// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datastream.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_datastream_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_datastream_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_datastream_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_datastream_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_datastream_2eproto;
namespace datastream {
namespace v1 {
class BatchEnd;
struct BatchEndDefaultTypeInternal;
extern BatchEndDefaultTypeInternal _BatchEnd_default_instance_;
class BatchStart;
struct BatchStartDefaultTypeInternal;
extern BatchStartDefaultTypeInternal _BatchStart_default_instance_;
class BookMark;
struct BookMarkDefaultTypeInternal;
extern BookMarkDefaultTypeInternal _BookMark_default_instance_;
class Debug;
struct DebugDefaultTypeInternal;
extern DebugDefaultTypeInternal _Debug_default_instance_;
class L2Block;
struct L2BlockDefaultTypeInternal;
extern L2BlockDefaultTypeInternal _L2Block_default_instance_;
class L2BlockEnd;
struct L2BlockEndDefaultTypeInternal;
extern L2BlockEndDefaultTypeInternal _L2BlockEnd_default_instance_;
class Transaction;
struct TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class UpdateGER;
struct UpdateGERDefaultTypeInternal;
extern UpdateGERDefaultTypeInternal _UpdateGER_default_instance_;
}  // namespace v1
}  // namespace datastream
PROTOBUF_NAMESPACE_OPEN
template<> ::datastream::v1::BatchEnd* Arena::CreateMaybeMessage<::datastream::v1::BatchEnd>(Arena*);
template<> ::datastream::v1::BatchStart* Arena::CreateMaybeMessage<::datastream::v1::BatchStart>(Arena*);
template<> ::datastream::v1::BookMark* Arena::CreateMaybeMessage<::datastream::v1::BookMark>(Arena*);
template<> ::datastream::v1::Debug* Arena::CreateMaybeMessage<::datastream::v1::Debug>(Arena*);
template<> ::datastream::v1::L2Block* Arena::CreateMaybeMessage<::datastream::v1::L2Block>(Arena*);
template<> ::datastream::v1::L2BlockEnd* Arena::CreateMaybeMessage<::datastream::v1::L2BlockEnd>(Arena*);
template<> ::datastream::v1::Transaction* Arena::CreateMaybeMessage<::datastream::v1::Transaction>(Arena*);
template<> ::datastream::v1::UpdateGER* Arena::CreateMaybeMessage<::datastream::v1::UpdateGER>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace datastream {
namespace v1 {

enum BookmarkType : int {
  BOOKMARK_TYPE_UNSPECIFIED = 0,
  BOOKMARK_TYPE_BATCH = 1,
  BOOKMARK_TYPE_L2_BLOCK = 2,
  BookmarkType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BookmarkType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BookmarkType_IsValid(int value);
constexpr BookmarkType BookmarkType_MIN = BOOKMARK_TYPE_UNSPECIFIED;
constexpr BookmarkType BookmarkType_MAX = BOOKMARK_TYPE_L2_BLOCK;
constexpr int BookmarkType_ARRAYSIZE = BookmarkType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BookmarkType_descriptor();
template<typename T>
inline const std::string& BookmarkType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BookmarkType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BookmarkType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BookmarkType_descriptor(), enum_t_value);
}
inline bool BookmarkType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BookmarkType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BookmarkType>(
    BookmarkType_descriptor(), name, value);
}
enum EntryType : int {
  ENTRY_TYPE_UNSPECIFIED = 0,
  ENTRY_TYPE_BATCH_START = 1,
  ENTRY_TYPE_L2_BLOCK = 2,
  ENTRY_TYPE_TRANSACTION = 3,
  ENTRY_TYPE_BATCH_END = 4,
  ENTRY_TYPE_UPDATE_GER = 5,
  ENTRY_TYPE_L2_BLOCK_END = 6,
  EntryType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EntryType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EntryType_IsValid(int value);
constexpr EntryType EntryType_MIN = ENTRY_TYPE_UNSPECIFIED;
constexpr EntryType EntryType_MAX = ENTRY_TYPE_L2_BLOCK_END;
constexpr int EntryType_ARRAYSIZE = EntryType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EntryType_descriptor();
template<typename T>
inline const std::string& EntryType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EntryType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EntryType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EntryType_descriptor(), enum_t_value);
}
inline bool EntryType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EntryType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EntryType>(
    EntryType_descriptor(), name, value);
}
enum BatchType : int {
  BATCH_TYPE_UNSPECIFIED = 0,
  BATCH_TYPE_REGULAR = 1,
  BATCH_TYPE_FORCED = 2,
  BATCH_TYPE_INJECTED = 3,
  BATCH_TYPE_INVALID = 4,
  BatchType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BatchType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BatchType_IsValid(int value);
constexpr BatchType BatchType_MIN = BATCH_TYPE_UNSPECIFIED;
constexpr BatchType BatchType_MAX = BATCH_TYPE_INVALID;
constexpr int BatchType_ARRAYSIZE = BatchType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BatchType_descriptor();
template<typename T>
inline const std::string& BatchType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BatchType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BatchType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BatchType_descriptor(), enum_t_value);
}
inline bool BatchType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BatchType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BatchType>(
    BatchType_descriptor(), name, value);
}
// ===================================================================

class BatchStart final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:datastream.v1.BatchStart) */ {
 public:
  inline BatchStart() : BatchStart(nullptr) {}
  ~BatchStart() override;
  explicit PROTOBUF_CONSTEXPR BatchStart(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchStart(const BatchStart& from);
  BatchStart(BatchStart&& from) noexcept
    : BatchStart() {
    *this = ::std::move(from);
  }

  inline BatchStart& operator=(const BatchStart& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchStart& operator=(BatchStart&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchStart& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchStart* internal_default_instance() {
    return reinterpret_cast<const BatchStart*>(
               &_BatchStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BatchStart& a, BatchStart& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchStart* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchStart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchStart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchStart>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchStart& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchStart& from) {
    BatchStart::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchStart* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "datastream.v1.BatchStart";
  }
  protected:
  explicit BatchStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDebugFieldNumber = 5,
    kNumberFieldNumber = 1,
    kForkIdFieldNumber = 3,
    kChainIdFieldNumber = 4,
    kTypeFieldNumber = 2,
  };
  // .datastream.v1.Debug debug = 5;
  bool has_debug() const;
  private:
  bool _internal_has_debug() const;
  public:
  void clear_debug();
  const ::datastream::v1::Debug& debug() const;
  PROTOBUF_NODISCARD ::datastream::v1::Debug* release_debug();
  ::datastream::v1::Debug* mutable_debug();
  void set_allocated_debug(::datastream::v1::Debug* debug);
  private:
  const ::datastream::v1::Debug& _internal_debug() const;
  ::datastream::v1::Debug* _internal_mutable_debug();
  public:
  void unsafe_arena_set_allocated_debug(
      ::datastream::v1::Debug* debug);
  ::datastream::v1::Debug* unsafe_arena_release_debug();

  // uint64 number = 1;
  void clear_number();
  uint64_t number() const;
  void set_number(uint64_t value);
  private:
  uint64_t _internal_number() const;
  void _internal_set_number(uint64_t value);
  public:

  // uint64 fork_id = 3;
  void clear_fork_id();
  uint64_t fork_id() const;
  void set_fork_id(uint64_t value);
  private:
  uint64_t _internal_fork_id() const;
  void _internal_set_fork_id(uint64_t value);
  public:

  // uint64 chain_id = 4;
  void clear_chain_id();
  uint64_t chain_id() const;
  void set_chain_id(uint64_t value);
  private:
  uint64_t _internal_chain_id() const;
  void _internal_set_chain_id(uint64_t value);
  public:

  // .datastream.v1.BatchType type = 2;
  void clear_type();
  ::datastream::v1::BatchType type() const;
  void set_type(::datastream::v1::BatchType value);
  private:
  ::datastream::v1::BatchType _internal_type() const;
  void _internal_set_type(::datastream::v1::BatchType value);
  public:

  // @@protoc_insertion_point(class_scope:datastream.v1.BatchStart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::datastream::v1::Debug* debug_;
    uint64_t number_;
    uint64_t fork_id_;
    uint64_t chain_id_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datastream_2eproto;
};
// -------------------------------------------------------------------

class BatchEnd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:datastream.v1.BatchEnd) */ {
 public:
  inline BatchEnd() : BatchEnd(nullptr) {}
  ~BatchEnd() override;
  explicit PROTOBUF_CONSTEXPR BatchEnd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchEnd(const BatchEnd& from);
  BatchEnd(BatchEnd&& from) noexcept
    : BatchEnd() {
    *this = ::std::move(from);
  }

  inline BatchEnd& operator=(const BatchEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchEnd& operator=(BatchEnd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchEnd& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchEnd* internal_default_instance() {
    return reinterpret_cast<const BatchEnd*>(
               &_BatchEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BatchEnd& a, BatchEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchEnd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchEnd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchEnd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchEnd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchEnd& from) {
    BatchEnd::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchEnd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "datastream.v1.BatchEnd";
  }
  protected:
  explicit BatchEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalExitRootFieldNumber = 2,
    kStateRootFieldNumber = 3,
    kDebugFieldNumber = 4,
    kNumberFieldNumber = 1,
  };
  // bytes local_exit_root = 2;
  void clear_local_exit_root();
  const std::string& local_exit_root() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_local_exit_root(ArgT0&& arg0, ArgT... args);
  std::string* mutable_local_exit_root();
  PROTOBUF_NODISCARD std::string* release_local_exit_root();
  void set_allocated_local_exit_root(std::string* local_exit_root);
  private:
  const std::string& _internal_local_exit_root() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_local_exit_root(const std::string& value);
  std::string* _internal_mutable_local_exit_root();
  public:

  // bytes state_root = 3;
  void clear_state_root();
  const std::string& state_root() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state_root(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state_root();
  PROTOBUF_NODISCARD std::string* release_state_root();
  void set_allocated_state_root(std::string* state_root);
  private:
  const std::string& _internal_state_root() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state_root(const std::string& value);
  std::string* _internal_mutable_state_root();
  public:

  // .datastream.v1.Debug debug = 4;
  bool has_debug() const;
  private:
  bool _internal_has_debug() const;
  public:
  void clear_debug();
  const ::datastream::v1::Debug& debug() const;
  PROTOBUF_NODISCARD ::datastream::v1::Debug* release_debug();
  ::datastream::v1::Debug* mutable_debug();
  void set_allocated_debug(::datastream::v1::Debug* debug);
  private:
  const ::datastream::v1::Debug& _internal_debug() const;
  ::datastream::v1::Debug* _internal_mutable_debug();
  public:
  void unsafe_arena_set_allocated_debug(
      ::datastream::v1::Debug* debug);
  ::datastream::v1::Debug* unsafe_arena_release_debug();

  // uint64 number = 1;
  void clear_number();
  uint64_t number() const;
  void set_number(uint64_t value);
  private:
  uint64_t _internal_number() const;
  void _internal_set_number(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:datastream.v1.BatchEnd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_exit_root_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_root_;
    ::datastream::v1::Debug* debug_;
    uint64_t number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datastream_2eproto;
};
// -------------------------------------------------------------------

class L2Block final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:datastream.v1.L2Block) */ {
 public:
  inline L2Block() : L2Block(nullptr) {}
  ~L2Block() override;
  explicit PROTOBUF_CONSTEXPR L2Block(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  L2Block(const L2Block& from);
  L2Block(L2Block&& from) noexcept
    : L2Block() {
    *this = ::std::move(from);
  }

  inline L2Block& operator=(const L2Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline L2Block& operator=(L2Block&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const L2Block& default_instance() {
    return *internal_default_instance();
  }
  static inline const L2Block* internal_default_instance() {
    return reinterpret_cast<const L2Block*>(
               &_L2Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(L2Block& a, L2Block& b) {
    a.Swap(&b);
  }
  inline void Swap(L2Block* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(L2Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  L2Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<L2Block>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const L2Block& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const L2Block& from) {
    L2Block::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(L2Block* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "datastream.v1.L2Block";
  }
  protected:
  explicit L2Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kL1BlockhashFieldNumber = 6,
    kHashFieldNumber = 8,
    kStateRootFieldNumber = 9,
    kGlobalExitRootFieldNumber = 10,
    kCoinbaseFieldNumber = 11,
    kBlockInfoRootFieldNumber = 13,
    kDebugFieldNumber = 14,
    kNumberFieldNumber = 1,
    kBatchNumberFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kMinTimestampFieldNumber = 5,
    kDeltaTimestampFieldNumber = 4,
    kL1InfotreeIndexFieldNumber = 7,
    kBlockGasLimitFieldNumber = 12,
  };
  // bytes l1_blockhash = 6;
  void clear_l1_blockhash();
  const std::string& l1_blockhash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_l1_blockhash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_l1_blockhash();
  PROTOBUF_NODISCARD std::string* release_l1_blockhash();
  void set_allocated_l1_blockhash(std::string* l1_blockhash);
  private:
  const std::string& _internal_l1_blockhash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_l1_blockhash(const std::string& value);
  std::string* _internal_mutable_l1_blockhash();
  public:

  // bytes hash = 8;
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // bytes state_root = 9;
  void clear_state_root();
  const std::string& state_root() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state_root(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state_root();
  PROTOBUF_NODISCARD std::string* release_state_root();
  void set_allocated_state_root(std::string* state_root);
  private:
  const std::string& _internal_state_root() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state_root(const std::string& value);
  std::string* _internal_mutable_state_root();
  public:

  // bytes global_exit_root = 10;
  void clear_global_exit_root();
  const std::string& global_exit_root() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_global_exit_root(ArgT0&& arg0, ArgT... args);
  std::string* mutable_global_exit_root();
  PROTOBUF_NODISCARD std::string* release_global_exit_root();
  void set_allocated_global_exit_root(std::string* global_exit_root);
  private:
  const std::string& _internal_global_exit_root() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_global_exit_root(const std::string& value);
  std::string* _internal_mutable_global_exit_root();
  public:

  // bytes coinbase = 11;
  void clear_coinbase();
  const std::string& coinbase() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_coinbase(ArgT0&& arg0, ArgT... args);
  std::string* mutable_coinbase();
  PROTOBUF_NODISCARD std::string* release_coinbase();
  void set_allocated_coinbase(std::string* coinbase);
  private:
  const std::string& _internal_coinbase() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_coinbase(const std::string& value);
  std::string* _internal_mutable_coinbase();
  public:

  // bytes block_info_root = 13;
  void clear_block_info_root();
  const std::string& block_info_root() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_block_info_root(ArgT0&& arg0, ArgT... args);
  std::string* mutable_block_info_root();
  PROTOBUF_NODISCARD std::string* release_block_info_root();
  void set_allocated_block_info_root(std::string* block_info_root);
  private:
  const std::string& _internal_block_info_root() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_info_root(const std::string& value);
  std::string* _internal_mutable_block_info_root();
  public:

  // .datastream.v1.Debug debug = 14;
  bool has_debug() const;
  private:
  bool _internal_has_debug() const;
  public:
  void clear_debug();
  const ::datastream::v1::Debug& debug() const;
  PROTOBUF_NODISCARD ::datastream::v1::Debug* release_debug();
  ::datastream::v1::Debug* mutable_debug();
  void set_allocated_debug(::datastream::v1::Debug* debug);
  private:
  const ::datastream::v1::Debug& _internal_debug() const;
  ::datastream::v1::Debug* _internal_mutable_debug();
  public:
  void unsafe_arena_set_allocated_debug(
      ::datastream::v1::Debug* debug);
  ::datastream::v1::Debug* unsafe_arena_release_debug();

  // uint64 number = 1;
  void clear_number();
  uint64_t number() const;
  void set_number(uint64_t value);
  private:
  uint64_t _internal_number() const;
  void _internal_set_number(uint64_t value);
  public:

  // uint64 batch_number = 2;
  void clear_batch_number();
  uint64_t batch_number() const;
  void set_batch_number(uint64_t value);
  private:
  uint64_t _internal_batch_number() const;
  void _internal_set_batch_number(uint64_t value);
  public:

  // uint64 timestamp = 3;
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // uint64 min_timestamp = 5;
  void clear_min_timestamp();
  uint64_t min_timestamp() const;
  void set_min_timestamp(uint64_t value);
  private:
  uint64_t _internal_min_timestamp() const;
  void _internal_set_min_timestamp(uint64_t value);
  public:

  // uint32 delta_timestamp = 4;
  void clear_delta_timestamp();
  uint32_t delta_timestamp() const;
  void set_delta_timestamp(uint32_t value);
  private:
  uint32_t _internal_delta_timestamp() const;
  void _internal_set_delta_timestamp(uint32_t value);
  public:

  // uint32 l1_infotree_index = 7;
  void clear_l1_infotree_index();
  uint32_t l1_infotree_index() const;
  void set_l1_infotree_index(uint32_t value);
  private:
  uint32_t _internal_l1_infotree_index() const;
  void _internal_set_l1_infotree_index(uint32_t value);
  public:

  // uint64 block_gas_limit = 12;
  void clear_block_gas_limit();
  uint64_t block_gas_limit() const;
  void set_block_gas_limit(uint64_t value);
  private:
  uint64_t _internal_block_gas_limit() const;
  void _internal_set_block_gas_limit(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:datastream.v1.L2Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr l1_blockhash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_root_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr global_exit_root_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coinbase_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_info_root_;
    ::datastream::v1::Debug* debug_;
    uint64_t number_;
    uint64_t batch_number_;
    uint64_t timestamp_;
    uint64_t min_timestamp_;
    uint32_t delta_timestamp_;
    uint32_t l1_infotree_index_;
    uint64_t block_gas_limit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datastream_2eproto;
};
// -------------------------------------------------------------------

class L2BlockEnd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:datastream.v1.L2BlockEnd) */ {
 public:
  inline L2BlockEnd() : L2BlockEnd(nullptr) {}
  ~L2BlockEnd() override;
  explicit PROTOBUF_CONSTEXPR L2BlockEnd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  L2BlockEnd(const L2BlockEnd& from);
  L2BlockEnd(L2BlockEnd&& from) noexcept
    : L2BlockEnd() {
    *this = ::std::move(from);
  }

  inline L2BlockEnd& operator=(const L2BlockEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline L2BlockEnd& operator=(L2BlockEnd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const L2BlockEnd& default_instance() {
    return *internal_default_instance();
  }
  static inline const L2BlockEnd* internal_default_instance() {
    return reinterpret_cast<const L2BlockEnd*>(
               &_L2BlockEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(L2BlockEnd& a, L2BlockEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(L2BlockEnd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(L2BlockEnd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  L2BlockEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<L2BlockEnd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const L2BlockEnd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const L2BlockEnd& from) {
    L2BlockEnd::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(L2BlockEnd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "datastream.v1.L2BlockEnd";
  }
  protected:
  explicit L2BlockEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumberFieldNumber = 1,
  };
  // uint64 number = 1;
  void clear_number();
  uint64_t number() const;
  void set_number(uint64_t value);
  private:
  uint64_t _internal_number() const;
  void _internal_set_number(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:datastream.v1.L2BlockEnd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datastream_2eproto;
};
// -------------------------------------------------------------------

class Transaction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:datastream.v1.Transaction) */ {
 public:
  inline Transaction() : Transaction(nullptr) {}
  ~Transaction() override;
  explicit PROTOBUF_CONSTEXPR Transaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transaction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Transaction& from) {
    Transaction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "datastream.v1.Transaction";
  }
  protected:
  explicit Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedFieldNumber = 4,
    kImStateRootFieldNumber = 6,
    kDebugFieldNumber = 7,
    kL2BlockNumberFieldNumber = 1,
    kIndexFieldNumber = 2,
    kIsValidFieldNumber = 3,
    kEffectiveGasPricePercentageFieldNumber = 5,
  };
  // bytes encoded = 4;
  void clear_encoded();
  const std::string& encoded() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encoded(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encoded();
  PROTOBUF_NODISCARD std::string* release_encoded();
  void set_allocated_encoded(std::string* encoded);
  private:
  const std::string& _internal_encoded() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encoded(const std::string& value);
  std::string* _internal_mutable_encoded();
  public:

  // bytes im_state_root = 6;
  void clear_im_state_root();
  const std::string& im_state_root() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_im_state_root(ArgT0&& arg0, ArgT... args);
  std::string* mutable_im_state_root();
  PROTOBUF_NODISCARD std::string* release_im_state_root();
  void set_allocated_im_state_root(std::string* im_state_root);
  private:
  const std::string& _internal_im_state_root() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_im_state_root(const std::string& value);
  std::string* _internal_mutable_im_state_root();
  public:

  // .datastream.v1.Debug debug = 7;
  bool has_debug() const;
  private:
  bool _internal_has_debug() const;
  public:
  void clear_debug();
  const ::datastream::v1::Debug& debug() const;
  PROTOBUF_NODISCARD ::datastream::v1::Debug* release_debug();
  ::datastream::v1::Debug* mutable_debug();
  void set_allocated_debug(::datastream::v1::Debug* debug);
  private:
  const ::datastream::v1::Debug& _internal_debug() const;
  ::datastream::v1::Debug* _internal_mutable_debug();
  public:
  void unsafe_arena_set_allocated_debug(
      ::datastream::v1::Debug* debug);
  ::datastream::v1::Debug* unsafe_arena_release_debug();

  // uint64 l2block_number = 1;
  void clear_l2block_number();
  uint64_t l2block_number() const;
  void set_l2block_number(uint64_t value);
  private:
  uint64_t _internal_l2block_number() const;
  void _internal_set_l2block_number(uint64_t value);
  public:

  // uint64 index = 2;
  void clear_index();
  uint64_t index() const;
  void set_index(uint64_t value);
  private:
  uint64_t _internal_index() const;
  void _internal_set_index(uint64_t value);
  public:

  // bool is_valid = 3;
  void clear_is_valid();
  bool is_valid() const;
  void set_is_valid(bool value);
  private:
  bool _internal_is_valid() const;
  void _internal_set_is_valid(bool value);
  public:

  // uint32 effective_gas_price_percentage = 5;
  void clear_effective_gas_price_percentage();
  uint32_t effective_gas_price_percentage() const;
  void set_effective_gas_price_percentage(uint32_t value);
  private:
  uint32_t _internal_effective_gas_price_percentage() const;
  void _internal_set_effective_gas_price_percentage(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:datastream.v1.Transaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr im_state_root_;
    ::datastream::v1::Debug* debug_;
    uint64_t l2block_number_;
    uint64_t index_;
    bool is_valid_;
    uint32_t effective_gas_price_percentage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datastream_2eproto;
};
// -------------------------------------------------------------------

class UpdateGER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:datastream.v1.UpdateGER) */ {
 public:
  inline UpdateGER() : UpdateGER(nullptr) {}
  ~UpdateGER() override;
  explicit PROTOBUF_CONSTEXPR UpdateGER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateGER(const UpdateGER& from);
  UpdateGER(UpdateGER&& from) noexcept
    : UpdateGER() {
    *this = ::std::move(from);
  }

  inline UpdateGER& operator=(const UpdateGER& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateGER& operator=(UpdateGER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateGER& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateGER* internal_default_instance() {
    return reinterpret_cast<const UpdateGER*>(
               &_UpdateGER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateGER& a, UpdateGER& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateGER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateGER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateGER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateGER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateGER& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateGER& from) {
    UpdateGER::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateGER* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "datastream.v1.UpdateGER";
  }
  protected:
  explicit UpdateGER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGlobalExitRootFieldNumber = 3,
    kCoinbaseFieldNumber = 4,
    kStateRootFieldNumber = 7,
    kDebugFieldNumber = 8,
    kBatchNumberFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kForkIdFieldNumber = 5,
    kChainIdFieldNumber = 6,
  };
  // bytes global_exit_root = 3;
  void clear_global_exit_root();
  const std::string& global_exit_root() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_global_exit_root(ArgT0&& arg0, ArgT... args);
  std::string* mutable_global_exit_root();
  PROTOBUF_NODISCARD std::string* release_global_exit_root();
  void set_allocated_global_exit_root(std::string* global_exit_root);
  private:
  const std::string& _internal_global_exit_root() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_global_exit_root(const std::string& value);
  std::string* _internal_mutable_global_exit_root();
  public:

  // bytes coinbase = 4;
  void clear_coinbase();
  const std::string& coinbase() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_coinbase(ArgT0&& arg0, ArgT... args);
  std::string* mutable_coinbase();
  PROTOBUF_NODISCARD std::string* release_coinbase();
  void set_allocated_coinbase(std::string* coinbase);
  private:
  const std::string& _internal_coinbase() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_coinbase(const std::string& value);
  std::string* _internal_mutable_coinbase();
  public:

  // bytes state_root = 7;
  void clear_state_root();
  const std::string& state_root() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state_root(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state_root();
  PROTOBUF_NODISCARD std::string* release_state_root();
  void set_allocated_state_root(std::string* state_root);
  private:
  const std::string& _internal_state_root() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state_root(const std::string& value);
  std::string* _internal_mutable_state_root();
  public:

  // .datastream.v1.Debug debug = 8;
  bool has_debug() const;
  private:
  bool _internal_has_debug() const;
  public:
  void clear_debug();
  const ::datastream::v1::Debug& debug() const;
  PROTOBUF_NODISCARD ::datastream::v1::Debug* release_debug();
  ::datastream::v1::Debug* mutable_debug();
  void set_allocated_debug(::datastream::v1::Debug* debug);
  private:
  const ::datastream::v1::Debug& _internal_debug() const;
  ::datastream::v1::Debug* _internal_mutable_debug();
  public:
  void unsafe_arena_set_allocated_debug(
      ::datastream::v1::Debug* debug);
  ::datastream::v1::Debug* unsafe_arena_release_debug();

  // uint64 batch_number = 1;
  void clear_batch_number();
  uint64_t batch_number() const;
  void set_batch_number(uint64_t value);
  private:
  uint64_t _internal_batch_number() const;
  void _internal_set_batch_number(uint64_t value);
  public:

  // uint64 timestamp = 2;
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // uint64 fork_id = 5;
  void clear_fork_id();
  uint64_t fork_id() const;
  void set_fork_id(uint64_t value);
  private:
  uint64_t _internal_fork_id() const;
  void _internal_set_fork_id(uint64_t value);
  public:

  // uint64 chain_id = 6;
  void clear_chain_id();
  uint64_t chain_id() const;
  void set_chain_id(uint64_t value);
  private:
  uint64_t _internal_chain_id() const;
  void _internal_set_chain_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:datastream.v1.UpdateGER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr global_exit_root_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coinbase_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_root_;
    ::datastream::v1::Debug* debug_;
    uint64_t batch_number_;
    uint64_t timestamp_;
    uint64_t fork_id_;
    uint64_t chain_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datastream_2eproto;
};
// -------------------------------------------------------------------

class BookMark final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:datastream.v1.BookMark) */ {
 public:
  inline BookMark() : BookMark(nullptr) {}
  ~BookMark() override;
  explicit PROTOBUF_CONSTEXPR BookMark(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BookMark(const BookMark& from);
  BookMark(BookMark&& from) noexcept
    : BookMark() {
    *this = ::std::move(from);
  }

  inline BookMark& operator=(const BookMark& from) {
    CopyFrom(from);
    return *this;
  }
  inline BookMark& operator=(BookMark&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BookMark& default_instance() {
    return *internal_default_instance();
  }
  static inline const BookMark* internal_default_instance() {
    return reinterpret_cast<const BookMark*>(
               &_BookMark_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BookMark& a, BookMark& b) {
    a.Swap(&b);
  }
  inline void Swap(BookMark* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BookMark* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BookMark* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BookMark>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BookMark& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BookMark& from) {
    BookMark::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BookMark* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "datastream.v1.BookMark";
  }
  protected:
  explicit BookMark(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // uint64 value = 2;
  void clear_value();
  uint64_t value() const;
  void set_value(uint64_t value);
  private:
  uint64_t _internal_value() const;
  void _internal_set_value(uint64_t value);
  public:

  // .datastream.v1.BookmarkType type = 1;
  void clear_type();
  ::datastream::v1::BookmarkType type() const;
  void set_type(::datastream::v1::BookmarkType value);
  private:
  ::datastream::v1::BookmarkType _internal_type() const;
  void _internal_set_type(::datastream::v1::BookmarkType value);
  public:

  // @@protoc_insertion_point(class_scope:datastream.v1.BookMark)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t value_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datastream_2eproto;
};
// -------------------------------------------------------------------

class Debug final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:datastream.v1.Debug) */ {
 public:
  inline Debug() : Debug(nullptr) {}
  ~Debug() override;
  explicit PROTOBUF_CONSTEXPR Debug(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Debug(const Debug& from);
  Debug(Debug&& from) noexcept
    : Debug() {
    *this = ::std::move(from);
  }

  inline Debug& operator=(const Debug& from) {
    CopyFrom(from);
    return *this;
  }
  inline Debug& operator=(Debug&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Debug& default_instance() {
    return *internal_default_instance();
  }
  static inline const Debug* internal_default_instance() {
    return reinterpret_cast<const Debug*>(
               &_Debug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Debug& a, Debug& b) {
    a.Swap(&b);
  }
  inline void Swap(Debug* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Debug* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Debug* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Debug>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Debug& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Debug& from) {
    Debug::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Debug* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "datastream.v1.Debug";
  }
  protected:
  explicit Debug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:datastream.v1.Debug)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datastream_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BatchStart

// uint64 number = 1;
inline void BatchStart::clear_number() {
  _impl_.number_ = uint64_t{0u};
}
inline uint64_t BatchStart::_internal_number() const {
  return _impl_.number_;
}
inline uint64_t BatchStart::number() const {
  // @@protoc_insertion_point(field_get:datastream.v1.BatchStart.number)
  return _internal_number();
}
inline void BatchStart::_internal_set_number(uint64_t value) {
  
  _impl_.number_ = value;
}
inline void BatchStart::set_number(uint64_t value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:datastream.v1.BatchStart.number)
}

// .datastream.v1.BatchType type = 2;
inline void BatchStart::clear_type() {
  _impl_.type_ = 0;
}
inline ::datastream::v1::BatchType BatchStart::_internal_type() const {
  return static_cast< ::datastream::v1::BatchType >(_impl_.type_);
}
inline ::datastream::v1::BatchType BatchStart::type() const {
  // @@protoc_insertion_point(field_get:datastream.v1.BatchStart.type)
  return _internal_type();
}
inline void BatchStart::_internal_set_type(::datastream::v1::BatchType value) {
  
  _impl_.type_ = value;
}
inline void BatchStart::set_type(::datastream::v1::BatchType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:datastream.v1.BatchStart.type)
}

// uint64 fork_id = 3;
inline void BatchStart::clear_fork_id() {
  _impl_.fork_id_ = uint64_t{0u};
}
inline uint64_t BatchStart::_internal_fork_id() const {
  return _impl_.fork_id_;
}
inline uint64_t BatchStart::fork_id() const {
  // @@protoc_insertion_point(field_get:datastream.v1.BatchStart.fork_id)
  return _internal_fork_id();
}
inline void BatchStart::_internal_set_fork_id(uint64_t value) {
  
  _impl_.fork_id_ = value;
}
inline void BatchStart::set_fork_id(uint64_t value) {
  _internal_set_fork_id(value);
  // @@protoc_insertion_point(field_set:datastream.v1.BatchStart.fork_id)
}

// uint64 chain_id = 4;
inline void BatchStart::clear_chain_id() {
  _impl_.chain_id_ = uint64_t{0u};
}
inline uint64_t BatchStart::_internal_chain_id() const {
  return _impl_.chain_id_;
}
inline uint64_t BatchStart::chain_id() const {
  // @@protoc_insertion_point(field_get:datastream.v1.BatchStart.chain_id)
  return _internal_chain_id();
}
inline void BatchStart::_internal_set_chain_id(uint64_t value) {
  
  _impl_.chain_id_ = value;
}
inline void BatchStart::set_chain_id(uint64_t value) {
  _internal_set_chain_id(value);
  // @@protoc_insertion_point(field_set:datastream.v1.BatchStart.chain_id)
}

// .datastream.v1.Debug debug = 5;
inline bool BatchStart::_internal_has_debug() const {
  return this != internal_default_instance() && _impl_.debug_ != nullptr;
}
inline bool BatchStart::has_debug() const {
  return _internal_has_debug();
}
inline void BatchStart::clear_debug() {
  if (GetArenaForAllocation() == nullptr && _impl_.debug_ != nullptr) {
    delete _impl_.debug_;
  }
  _impl_.debug_ = nullptr;
}
inline const ::datastream::v1::Debug& BatchStart::_internal_debug() const {
  const ::datastream::v1::Debug* p = _impl_.debug_;
  return p != nullptr ? *p : reinterpret_cast<const ::datastream::v1::Debug&>(
      ::datastream::v1::_Debug_default_instance_);
}
inline const ::datastream::v1::Debug& BatchStart::debug() const {
  // @@protoc_insertion_point(field_get:datastream.v1.BatchStart.debug)
  return _internal_debug();
}
inline void BatchStart::unsafe_arena_set_allocated_debug(
    ::datastream::v1::Debug* debug) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.debug_);
  }
  _impl_.debug_ = debug;
  if (debug) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datastream.v1.BatchStart.debug)
}
inline ::datastream::v1::Debug* BatchStart::release_debug() {
  
  ::datastream::v1::Debug* temp = _impl_.debug_;
  _impl_.debug_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::datastream::v1::Debug* BatchStart::unsafe_arena_release_debug() {
  // @@protoc_insertion_point(field_release:datastream.v1.BatchStart.debug)
  
  ::datastream::v1::Debug* temp = _impl_.debug_;
  _impl_.debug_ = nullptr;
  return temp;
}
inline ::datastream::v1::Debug* BatchStart::_internal_mutable_debug() {
  
  if (_impl_.debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::datastream::v1::Debug>(GetArenaForAllocation());
    _impl_.debug_ = p;
  }
  return _impl_.debug_;
}
inline ::datastream::v1::Debug* BatchStart::mutable_debug() {
  ::datastream::v1::Debug* _msg = _internal_mutable_debug();
  // @@protoc_insertion_point(field_mutable:datastream.v1.BatchStart.debug)
  return _msg;
}
inline void BatchStart::set_allocated_debug(::datastream::v1::Debug* debug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.debug_;
  }
  if (debug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(debug);
    if (message_arena != submessage_arena) {
      debug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.debug_ = debug;
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.BatchStart.debug)
}

// -------------------------------------------------------------------

// BatchEnd

// uint64 number = 1;
inline void BatchEnd::clear_number() {
  _impl_.number_ = uint64_t{0u};
}
inline uint64_t BatchEnd::_internal_number() const {
  return _impl_.number_;
}
inline uint64_t BatchEnd::number() const {
  // @@protoc_insertion_point(field_get:datastream.v1.BatchEnd.number)
  return _internal_number();
}
inline void BatchEnd::_internal_set_number(uint64_t value) {
  
  _impl_.number_ = value;
}
inline void BatchEnd::set_number(uint64_t value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:datastream.v1.BatchEnd.number)
}

// bytes local_exit_root = 2;
inline void BatchEnd::clear_local_exit_root() {
  _impl_.local_exit_root_.ClearToEmpty();
}
inline const std::string& BatchEnd::local_exit_root() const {
  // @@protoc_insertion_point(field_get:datastream.v1.BatchEnd.local_exit_root)
  return _internal_local_exit_root();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BatchEnd::set_local_exit_root(ArgT0&& arg0, ArgT... args) {
 
 _impl_.local_exit_root_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:datastream.v1.BatchEnd.local_exit_root)
}
inline std::string* BatchEnd::mutable_local_exit_root() {
  std::string* _s = _internal_mutable_local_exit_root();
  // @@protoc_insertion_point(field_mutable:datastream.v1.BatchEnd.local_exit_root)
  return _s;
}
inline const std::string& BatchEnd::_internal_local_exit_root() const {
  return _impl_.local_exit_root_.Get();
}
inline void BatchEnd::_internal_set_local_exit_root(const std::string& value) {
  
  _impl_.local_exit_root_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchEnd::_internal_mutable_local_exit_root() {
  
  return _impl_.local_exit_root_.Mutable(GetArenaForAllocation());
}
inline std::string* BatchEnd::release_local_exit_root() {
  // @@protoc_insertion_point(field_release:datastream.v1.BatchEnd.local_exit_root)
  return _impl_.local_exit_root_.Release();
}
inline void BatchEnd::set_allocated_local_exit_root(std::string* local_exit_root) {
  if (local_exit_root != nullptr) {
    
  } else {
    
  }
  _impl_.local_exit_root_.SetAllocated(local_exit_root, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.local_exit_root_.IsDefault()) {
    _impl_.local_exit_root_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.BatchEnd.local_exit_root)
}

// bytes state_root = 3;
inline void BatchEnd::clear_state_root() {
  _impl_.state_root_.ClearToEmpty();
}
inline const std::string& BatchEnd::state_root() const {
  // @@protoc_insertion_point(field_get:datastream.v1.BatchEnd.state_root)
  return _internal_state_root();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BatchEnd::set_state_root(ArgT0&& arg0, ArgT... args) {
 
 _impl_.state_root_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:datastream.v1.BatchEnd.state_root)
}
inline std::string* BatchEnd::mutable_state_root() {
  std::string* _s = _internal_mutable_state_root();
  // @@protoc_insertion_point(field_mutable:datastream.v1.BatchEnd.state_root)
  return _s;
}
inline const std::string& BatchEnd::_internal_state_root() const {
  return _impl_.state_root_.Get();
}
inline void BatchEnd::_internal_set_state_root(const std::string& value) {
  
  _impl_.state_root_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchEnd::_internal_mutable_state_root() {
  
  return _impl_.state_root_.Mutable(GetArenaForAllocation());
}
inline std::string* BatchEnd::release_state_root() {
  // @@protoc_insertion_point(field_release:datastream.v1.BatchEnd.state_root)
  return _impl_.state_root_.Release();
}
inline void BatchEnd::set_allocated_state_root(std::string* state_root) {
  if (state_root != nullptr) {
    
  } else {
    
  }
  _impl_.state_root_.SetAllocated(state_root, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.state_root_.IsDefault()) {
    _impl_.state_root_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.BatchEnd.state_root)
}

// .datastream.v1.Debug debug = 4;
inline bool BatchEnd::_internal_has_debug() const {
  return this != internal_default_instance() && _impl_.debug_ != nullptr;
}
inline bool BatchEnd::has_debug() const {
  return _internal_has_debug();
}
inline void BatchEnd::clear_debug() {
  if (GetArenaForAllocation() == nullptr && _impl_.debug_ != nullptr) {
    delete _impl_.debug_;
  }
  _impl_.debug_ = nullptr;
}
inline const ::datastream::v1::Debug& BatchEnd::_internal_debug() const {
  const ::datastream::v1::Debug* p = _impl_.debug_;
  return p != nullptr ? *p : reinterpret_cast<const ::datastream::v1::Debug&>(
      ::datastream::v1::_Debug_default_instance_);
}
inline const ::datastream::v1::Debug& BatchEnd::debug() const {
  // @@protoc_insertion_point(field_get:datastream.v1.BatchEnd.debug)
  return _internal_debug();
}
inline void BatchEnd::unsafe_arena_set_allocated_debug(
    ::datastream::v1::Debug* debug) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.debug_);
  }
  _impl_.debug_ = debug;
  if (debug) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datastream.v1.BatchEnd.debug)
}
inline ::datastream::v1::Debug* BatchEnd::release_debug() {
  
  ::datastream::v1::Debug* temp = _impl_.debug_;
  _impl_.debug_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::datastream::v1::Debug* BatchEnd::unsafe_arena_release_debug() {
  // @@protoc_insertion_point(field_release:datastream.v1.BatchEnd.debug)
  
  ::datastream::v1::Debug* temp = _impl_.debug_;
  _impl_.debug_ = nullptr;
  return temp;
}
inline ::datastream::v1::Debug* BatchEnd::_internal_mutable_debug() {
  
  if (_impl_.debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::datastream::v1::Debug>(GetArenaForAllocation());
    _impl_.debug_ = p;
  }
  return _impl_.debug_;
}
inline ::datastream::v1::Debug* BatchEnd::mutable_debug() {
  ::datastream::v1::Debug* _msg = _internal_mutable_debug();
  // @@protoc_insertion_point(field_mutable:datastream.v1.BatchEnd.debug)
  return _msg;
}
inline void BatchEnd::set_allocated_debug(::datastream::v1::Debug* debug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.debug_;
  }
  if (debug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(debug);
    if (message_arena != submessage_arena) {
      debug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.debug_ = debug;
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.BatchEnd.debug)
}

// -------------------------------------------------------------------

// L2Block

// uint64 number = 1;
inline void L2Block::clear_number() {
  _impl_.number_ = uint64_t{0u};
}
inline uint64_t L2Block::_internal_number() const {
  return _impl_.number_;
}
inline uint64_t L2Block::number() const {
  // @@protoc_insertion_point(field_get:datastream.v1.L2Block.number)
  return _internal_number();
}
inline void L2Block::_internal_set_number(uint64_t value) {
  
  _impl_.number_ = value;
}
inline void L2Block::set_number(uint64_t value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:datastream.v1.L2Block.number)
}

// uint64 batch_number = 2;
inline void L2Block::clear_batch_number() {
  _impl_.batch_number_ = uint64_t{0u};
}
inline uint64_t L2Block::_internal_batch_number() const {
  return _impl_.batch_number_;
}
inline uint64_t L2Block::batch_number() const {
  // @@protoc_insertion_point(field_get:datastream.v1.L2Block.batch_number)
  return _internal_batch_number();
}
inline void L2Block::_internal_set_batch_number(uint64_t value) {
  
  _impl_.batch_number_ = value;
}
inline void L2Block::set_batch_number(uint64_t value) {
  _internal_set_batch_number(value);
  // @@protoc_insertion_point(field_set:datastream.v1.L2Block.batch_number)
}

// uint64 timestamp = 3;
inline void L2Block::clear_timestamp() {
  _impl_.timestamp_ = uint64_t{0u};
}
inline uint64_t L2Block::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint64_t L2Block::timestamp() const {
  // @@protoc_insertion_point(field_get:datastream.v1.L2Block.timestamp)
  return _internal_timestamp();
}
inline void L2Block::_internal_set_timestamp(uint64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void L2Block::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:datastream.v1.L2Block.timestamp)
}

// uint32 delta_timestamp = 4;
inline void L2Block::clear_delta_timestamp() {
  _impl_.delta_timestamp_ = 0u;
}
inline uint32_t L2Block::_internal_delta_timestamp() const {
  return _impl_.delta_timestamp_;
}
inline uint32_t L2Block::delta_timestamp() const {
  // @@protoc_insertion_point(field_get:datastream.v1.L2Block.delta_timestamp)
  return _internal_delta_timestamp();
}
inline void L2Block::_internal_set_delta_timestamp(uint32_t value) {
  
  _impl_.delta_timestamp_ = value;
}
inline void L2Block::set_delta_timestamp(uint32_t value) {
  _internal_set_delta_timestamp(value);
  // @@protoc_insertion_point(field_set:datastream.v1.L2Block.delta_timestamp)
}

// uint64 min_timestamp = 5;
inline void L2Block::clear_min_timestamp() {
  _impl_.min_timestamp_ = uint64_t{0u};
}
inline uint64_t L2Block::_internal_min_timestamp() const {
  return _impl_.min_timestamp_;
}
inline uint64_t L2Block::min_timestamp() const {
  // @@protoc_insertion_point(field_get:datastream.v1.L2Block.min_timestamp)
  return _internal_min_timestamp();
}
inline void L2Block::_internal_set_min_timestamp(uint64_t value) {
  
  _impl_.min_timestamp_ = value;
}
inline void L2Block::set_min_timestamp(uint64_t value) {
  _internal_set_min_timestamp(value);
  // @@protoc_insertion_point(field_set:datastream.v1.L2Block.min_timestamp)
}

// bytes l1_blockhash = 6;
inline void L2Block::clear_l1_blockhash() {
  _impl_.l1_blockhash_.ClearToEmpty();
}
inline const std::string& L2Block::l1_blockhash() const {
  // @@protoc_insertion_point(field_get:datastream.v1.L2Block.l1_blockhash)
  return _internal_l1_blockhash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void L2Block::set_l1_blockhash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.l1_blockhash_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:datastream.v1.L2Block.l1_blockhash)
}
inline std::string* L2Block::mutable_l1_blockhash() {
  std::string* _s = _internal_mutable_l1_blockhash();
  // @@protoc_insertion_point(field_mutable:datastream.v1.L2Block.l1_blockhash)
  return _s;
}
inline const std::string& L2Block::_internal_l1_blockhash() const {
  return _impl_.l1_blockhash_.Get();
}
inline void L2Block::_internal_set_l1_blockhash(const std::string& value) {
  
  _impl_.l1_blockhash_.Set(value, GetArenaForAllocation());
}
inline std::string* L2Block::_internal_mutable_l1_blockhash() {
  
  return _impl_.l1_blockhash_.Mutable(GetArenaForAllocation());
}
inline std::string* L2Block::release_l1_blockhash() {
  // @@protoc_insertion_point(field_release:datastream.v1.L2Block.l1_blockhash)
  return _impl_.l1_blockhash_.Release();
}
inline void L2Block::set_allocated_l1_blockhash(std::string* l1_blockhash) {
  if (l1_blockhash != nullptr) {
    
  } else {
    
  }
  _impl_.l1_blockhash_.SetAllocated(l1_blockhash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.l1_blockhash_.IsDefault()) {
    _impl_.l1_blockhash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.L2Block.l1_blockhash)
}

// uint32 l1_infotree_index = 7;
inline void L2Block::clear_l1_infotree_index() {
  _impl_.l1_infotree_index_ = 0u;
}
inline uint32_t L2Block::_internal_l1_infotree_index() const {
  return _impl_.l1_infotree_index_;
}
inline uint32_t L2Block::l1_infotree_index() const {
  // @@protoc_insertion_point(field_get:datastream.v1.L2Block.l1_infotree_index)
  return _internal_l1_infotree_index();
}
inline void L2Block::_internal_set_l1_infotree_index(uint32_t value) {
  
  _impl_.l1_infotree_index_ = value;
}
inline void L2Block::set_l1_infotree_index(uint32_t value) {
  _internal_set_l1_infotree_index(value);
  // @@protoc_insertion_point(field_set:datastream.v1.L2Block.l1_infotree_index)
}

// bytes hash = 8;
inline void L2Block::clear_hash() {
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& L2Block::hash() const {
  // @@protoc_insertion_point(field_get:datastream.v1.L2Block.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void L2Block::set_hash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hash_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:datastream.v1.L2Block.hash)
}
inline std::string* L2Block::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:datastream.v1.L2Block.hash)
  return _s;
}
inline const std::string& L2Block::_internal_hash() const {
  return _impl_.hash_.Get();
}
inline void L2Block::_internal_set_hash(const std::string& value) {
  
  _impl_.hash_.Set(value, GetArenaForAllocation());
}
inline std::string* L2Block::_internal_mutable_hash() {
  
  return _impl_.hash_.Mutable(GetArenaForAllocation());
}
inline std::string* L2Block::release_hash() {
  // @@protoc_insertion_point(field_release:datastream.v1.L2Block.hash)
  return _impl_.hash_.Release();
}
inline void L2Block::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  _impl_.hash_.SetAllocated(hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hash_.IsDefault()) {
    _impl_.hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.L2Block.hash)
}

// bytes state_root = 9;
inline void L2Block::clear_state_root() {
  _impl_.state_root_.ClearToEmpty();
}
inline const std::string& L2Block::state_root() const {
  // @@protoc_insertion_point(field_get:datastream.v1.L2Block.state_root)
  return _internal_state_root();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void L2Block::set_state_root(ArgT0&& arg0, ArgT... args) {
 
 _impl_.state_root_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:datastream.v1.L2Block.state_root)
}
inline std::string* L2Block::mutable_state_root() {
  std::string* _s = _internal_mutable_state_root();
  // @@protoc_insertion_point(field_mutable:datastream.v1.L2Block.state_root)
  return _s;
}
inline const std::string& L2Block::_internal_state_root() const {
  return _impl_.state_root_.Get();
}
inline void L2Block::_internal_set_state_root(const std::string& value) {
  
  _impl_.state_root_.Set(value, GetArenaForAllocation());
}
inline std::string* L2Block::_internal_mutable_state_root() {
  
  return _impl_.state_root_.Mutable(GetArenaForAllocation());
}
inline std::string* L2Block::release_state_root() {
  // @@protoc_insertion_point(field_release:datastream.v1.L2Block.state_root)
  return _impl_.state_root_.Release();
}
inline void L2Block::set_allocated_state_root(std::string* state_root) {
  if (state_root != nullptr) {
    
  } else {
    
  }
  _impl_.state_root_.SetAllocated(state_root, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.state_root_.IsDefault()) {
    _impl_.state_root_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.L2Block.state_root)
}

// bytes global_exit_root = 10;
inline void L2Block::clear_global_exit_root() {
  _impl_.global_exit_root_.ClearToEmpty();
}
inline const std::string& L2Block::global_exit_root() const {
  // @@protoc_insertion_point(field_get:datastream.v1.L2Block.global_exit_root)
  return _internal_global_exit_root();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void L2Block::set_global_exit_root(ArgT0&& arg0, ArgT... args) {
 
 _impl_.global_exit_root_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:datastream.v1.L2Block.global_exit_root)
}
inline std::string* L2Block::mutable_global_exit_root() {
  std::string* _s = _internal_mutable_global_exit_root();
  // @@protoc_insertion_point(field_mutable:datastream.v1.L2Block.global_exit_root)
  return _s;
}
inline const std::string& L2Block::_internal_global_exit_root() const {
  return _impl_.global_exit_root_.Get();
}
inline void L2Block::_internal_set_global_exit_root(const std::string& value) {
  
  _impl_.global_exit_root_.Set(value, GetArenaForAllocation());
}
inline std::string* L2Block::_internal_mutable_global_exit_root() {
  
  return _impl_.global_exit_root_.Mutable(GetArenaForAllocation());
}
inline std::string* L2Block::release_global_exit_root() {
  // @@protoc_insertion_point(field_release:datastream.v1.L2Block.global_exit_root)
  return _impl_.global_exit_root_.Release();
}
inline void L2Block::set_allocated_global_exit_root(std::string* global_exit_root) {
  if (global_exit_root != nullptr) {
    
  } else {
    
  }
  _impl_.global_exit_root_.SetAllocated(global_exit_root, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.global_exit_root_.IsDefault()) {
    _impl_.global_exit_root_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.L2Block.global_exit_root)
}

// bytes coinbase = 11;
inline void L2Block::clear_coinbase() {
  _impl_.coinbase_.ClearToEmpty();
}
inline const std::string& L2Block::coinbase() const {
  // @@protoc_insertion_point(field_get:datastream.v1.L2Block.coinbase)
  return _internal_coinbase();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void L2Block::set_coinbase(ArgT0&& arg0, ArgT... args) {
 
 _impl_.coinbase_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:datastream.v1.L2Block.coinbase)
}
inline std::string* L2Block::mutable_coinbase() {
  std::string* _s = _internal_mutable_coinbase();
  // @@protoc_insertion_point(field_mutable:datastream.v1.L2Block.coinbase)
  return _s;
}
inline const std::string& L2Block::_internal_coinbase() const {
  return _impl_.coinbase_.Get();
}
inline void L2Block::_internal_set_coinbase(const std::string& value) {
  
  _impl_.coinbase_.Set(value, GetArenaForAllocation());
}
inline std::string* L2Block::_internal_mutable_coinbase() {
  
  return _impl_.coinbase_.Mutable(GetArenaForAllocation());
}
inline std::string* L2Block::release_coinbase() {
  // @@protoc_insertion_point(field_release:datastream.v1.L2Block.coinbase)
  return _impl_.coinbase_.Release();
}
inline void L2Block::set_allocated_coinbase(std::string* coinbase) {
  if (coinbase != nullptr) {
    
  } else {
    
  }
  _impl_.coinbase_.SetAllocated(coinbase, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.coinbase_.IsDefault()) {
    _impl_.coinbase_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.L2Block.coinbase)
}

// uint64 block_gas_limit = 12;
inline void L2Block::clear_block_gas_limit() {
  _impl_.block_gas_limit_ = uint64_t{0u};
}
inline uint64_t L2Block::_internal_block_gas_limit() const {
  return _impl_.block_gas_limit_;
}
inline uint64_t L2Block::block_gas_limit() const {
  // @@protoc_insertion_point(field_get:datastream.v1.L2Block.block_gas_limit)
  return _internal_block_gas_limit();
}
inline void L2Block::_internal_set_block_gas_limit(uint64_t value) {
  
  _impl_.block_gas_limit_ = value;
}
inline void L2Block::set_block_gas_limit(uint64_t value) {
  _internal_set_block_gas_limit(value);
  // @@protoc_insertion_point(field_set:datastream.v1.L2Block.block_gas_limit)
}

// bytes block_info_root = 13;
inline void L2Block::clear_block_info_root() {
  _impl_.block_info_root_.ClearToEmpty();
}
inline const std::string& L2Block::block_info_root() const {
  // @@protoc_insertion_point(field_get:datastream.v1.L2Block.block_info_root)
  return _internal_block_info_root();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void L2Block::set_block_info_root(ArgT0&& arg0, ArgT... args) {
 
 _impl_.block_info_root_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:datastream.v1.L2Block.block_info_root)
}
inline std::string* L2Block::mutable_block_info_root() {
  std::string* _s = _internal_mutable_block_info_root();
  // @@protoc_insertion_point(field_mutable:datastream.v1.L2Block.block_info_root)
  return _s;
}
inline const std::string& L2Block::_internal_block_info_root() const {
  return _impl_.block_info_root_.Get();
}
inline void L2Block::_internal_set_block_info_root(const std::string& value) {
  
  _impl_.block_info_root_.Set(value, GetArenaForAllocation());
}
inline std::string* L2Block::_internal_mutable_block_info_root() {
  
  return _impl_.block_info_root_.Mutable(GetArenaForAllocation());
}
inline std::string* L2Block::release_block_info_root() {
  // @@protoc_insertion_point(field_release:datastream.v1.L2Block.block_info_root)
  return _impl_.block_info_root_.Release();
}
inline void L2Block::set_allocated_block_info_root(std::string* block_info_root) {
  if (block_info_root != nullptr) {
    
  } else {
    
  }
  _impl_.block_info_root_.SetAllocated(block_info_root, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.block_info_root_.IsDefault()) {
    _impl_.block_info_root_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.L2Block.block_info_root)
}

// .datastream.v1.Debug debug = 14;
inline bool L2Block::_internal_has_debug() const {
  return this != internal_default_instance() && _impl_.debug_ != nullptr;
}
inline bool L2Block::has_debug() const {
  return _internal_has_debug();
}
inline void L2Block::clear_debug() {
  if (GetArenaForAllocation() == nullptr && _impl_.debug_ != nullptr) {
    delete _impl_.debug_;
  }
  _impl_.debug_ = nullptr;
}
inline const ::datastream::v1::Debug& L2Block::_internal_debug() const {
  const ::datastream::v1::Debug* p = _impl_.debug_;
  return p != nullptr ? *p : reinterpret_cast<const ::datastream::v1::Debug&>(
      ::datastream::v1::_Debug_default_instance_);
}
inline const ::datastream::v1::Debug& L2Block::debug() const {
  // @@protoc_insertion_point(field_get:datastream.v1.L2Block.debug)
  return _internal_debug();
}
inline void L2Block::unsafe_arena_set_allocated_debug(
    ::datastream::v1::Debug* debug) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.debug_);
  }
  _impl_.debug_ = debug;
  if (debug) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datastream.v1.L2Block.debug)
}
inline ::datastream::v1::Debug* L2Block::release_debug() {
  
  ::datastream::v1::Debug* temp = _impl_.debug_;
  _impl_.debug_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::datastream::v1::Debug* L2Block::unsafe_arena_release_debug() {
  // @@protoc_insertion_point(field_release:datastream.v1.L2Block.debug)
  
  ::datastream::v1::Debug* temp = _impl_.debug_;
  _impl_.debug_ = nullptr;
  return temp;
}
inline ::datastream::v1::Debug* L2Block::_internal_mutable_debug() {
  
  if (_impl_.debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::datastream::v1::Debug>(GetArenaForAllocation());
    _impl_.debug_ = p;
  }
  return _impl_.debug_;
}
inline ::datastream::v1::Debug* L2Block::mutable_debug() {
  ::datastream::v1::Debug* _msg = _internal_mutable_debug();
  // @@protoc_insertion_point(field_mutable:datastream.v1.L2Block.debug)
  return _msg;
}
inline void L2Block::set_allocated_debug(::datastream::v1::Debug* debug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.debug_;
  }
  if (debug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(debug);
    if (message_arena != submessage_arena) {
      debug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.debug_ = debug;
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.L2Block.debug)
}

// -------------------------------------------------------------------

// L2BlockEnd

// uint64 number = 1;
inline void L2BlockEnd::clear_number() {
  _impl_.number_ = uint64_t{0u};
}
inline uint64_t L2BlockEnd::_internal_number() const {
  return _impl_.number_;
}
inline uint64_t L2BlockEnd::number() const {
  // @@protoc_insertion_point(field_get:datastream.v1.L2BlockEnd.number)
  return _internal_number();
}
inline void L2BlockEnd::_internal_set_number(uint64_t value) {
  
  _impl_.number_ = value;
}
inline void L2BlockEnd::set_number(uint64_t value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:datastream.v1.L2BlockEnd.number)
}

// -------------------------------------------------------------------

// Transaction

// uint64 l2block_number = 1;
inline void Transaction::clear_l2block_number() {
  _impl_.l2block_number_ = uint64_t{0u};
}
inline uint64_t Transaction::_internal_l2block_number() const {
  return _impl_.l2block_number_;
}
inline uint64_t Transaction::l2block_number() const {
  // @@protoc_insertion_point(field_get:datastream.v1.Transaction.l2block_number)
  return _internal_l2block_number();
}
inline void Transaction::_internal_set_l2block_number(uint64_t value) {
  
  _impl_.l2block_number_ = value;
}
inline void Transaction::set_l2block_number(uint64_t value) {
  _internal_set_l2block_number(value);
  // @@protoc_insertion_point(field_set:datastream.v1.Transaction.l2block_number)
}

// uint64 index = 2;
inline void Transaction::clear_index() {
  _impl_.index_ = uint64_t{0u};
}
inline uint64_t Transaction::_internal_index() const {
  return _impl_.index_;
}
inline uint64_t Transaction::index() const {
  // @@protoc_insertion_point(field_get:datastream.v1.Transaction.index)
  return _internal_index();
}
inline void Transaction::_internal_set_index(uint64_t value) {
  
  _impl_.index_ = value;
}
inline void Transaction::set_index(uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:datastream.v1.Transaction.index)
}

// bool is_valid = 3;
inline void Transaction::clear_is_valid() {
  _impl_.is_valid_ = false;
}
inline bool Transaction::_internal_is_valid() const {
  return _impl_.is_valid_;
}
inline bool Transaction::is_valid() const {
  // @@protoc_insertion_point(field_get:datastream.v1.Transaction.is_valid)
  return _internal_is_valid();
}
inline void Transaction::_internal_set_is_valid(bool value) {
  
  _impl_.is_valid_ = value;
}
inline void Transaction::set_is_valid(bool value) {
  _internal_set_is_valid(value);
  // @@protoc_insertion_point(field_set:datastream.v1.Transaction.is_valid)
}

// bytes encoded = 4;
inline void Transaction::clear_encoded() {
  _impl_.encoded_.ClearToEmpty();
}
inline const std::string& Transaction::encoded() const {
  // @@protoc_insertion_point(field_get:datastream.v1.Transaction.encoded)
  return _internal_encoded();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction::set_encoded(ArgT0&& arg0, ArgT... args) {
 
 _impl_.encoded_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:datastream.v1.Transaction.encoded)
}
inline std::string* Transaction::mutable_encoded() {
  std::string* _s = _internal_mutable_encoded();
  // @@protoc_insertion_point(field_mutable:datastream.v1.Transaction.encoded)
  return _s;
}
inline const std::string& Transaction::_internal_encoded() const {
  return _impl_.encoded_.Get();
}
inline void Transaction::_internal_set_encoded(const std::string& value) {
  
  _impl_.encoded_.Set(value, GetArenaForAllocation());
}
inline std::string* Transaction::_internal_mutable_encoded() {
  
  return _impl_.encoded_.Mutable(GetArenaForAllocation());
}
inline std::string* Transaction::release_encoded() {
  // @@protoc_insertion_point(field_release:datastream.v1.Transaction.encoded)
  return _impl_.encoded_.Release();
}
inline void Transaction::set_allocated_encoded(std::string* encoded) {
  if (encoded != nullptr) {
    
  } else {
    
  }
  _impl_.encoded_.SetAllocated(encoded, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.encoded_.IsDefault()) {
    _impl_.encoded_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.Transaction.encoded)
}

// uint32 effective_gas_price_percentage = 5;
inline void Transaction::clear_effective_gas_price_percentage() {
  _impl_.effective_gas_price_percentage_ = 0u;
}
inline uint32_t Transaction::_internal_effective_gas_price_percentage() const {
  return _impl_.effective_gas_price_percentage_;
}
inline uint32_t Transaction::effective_gas_price_percentage() const {
  // @@protoc_insertion_point(field_get:datastream.v1.Transaction.effective_gas_price_percentage)
  return _internal_effective_gas_price_percentage();
}
inline void Transaction::_internal_set_effective_gas_price_percentage(uint32_t value) {
  
  _impl_.effective_gas_price_percentage_ = value;
}
inline void Transaction::set_effective_gas_price_percentage(uint32_t value) {
  _internal_set_effective_gas_price_percentage(value);
  // @@protoc_insertion_point(field_set:datastream.v1.Transaction.effective_gas_price_percentage)
}

// bytes im_state_root = 6;
inline void Transaction::clear_im_state_root() {
  _impl_.im_state_root_.ClearToEmpty();
}
inline const std::string& Transaction::im_state_root() const {
  // @@protoc_insertion_point(field_get:datastream.v1.Transaction.im_state_root)
  return _internal_im_state_root();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction::set_im_state_root(ArgT0&& arg0, ArgT... args) {
 
 _impl_.im_state_root_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:datastream.v1.Transaction.im_state_root)
}
inline std::string* Transaction::mutable_im_state_root() {
  std::string* _s = _internal_mutable_im_state_root();
  // @@protoc_insertion_point(field_mutable:datastream.v1.Transaction.im_state_root)
  return _s;
}
inline const std::string& Transaction::_internal_im_state_root() const {
  return _impl_.im_state_root_.Get();
}
inline void Transaction::_internal_set_im_state_root(const std::string& value) {
  
  _impl_.im_state_root_.Set(value, GetArenaForAllocation());
}
inline std::string* Transaction::_internal_mutable_im_state_root() {
  
  return _impl_.im_state_root_.Mutable(GetArenaForAllocation());
}
inline std::string* Transaction::release_im_state_root() {
  // @@protoc_insertion_point(field_release:datastream.v1.Transaction.im_state_root)
  return _impl_.im_state_root_.Release();
}
inline void Transaction::set_allocated_im_state_root(std::string* im_state_root) {
  if (im_state_root != nullptr) {
    
  } else {
    
  }
  _impl_.im_state_root_.SetAllocated(im_state_root, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.im_state_root_.IsDefault()) {
    _impl_.im_state_root_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.Transaction.im_state_root)
}

// .datastream.v1.Debug debug = 7;
inline bool Transaction::_internal_has_debug() const {
  return this != internal_default_instance() && _impl_.debug_ != nullptr;
}
inline bool Transaction::has_debug() const {
  return _internal_has_debug();
}
inline void Transaction::clear_debug() {
  if (GetArenaForAllocation() == nullptr && _impl_.debug_ != nullptr) {
    delete _impl_.debug_;
  }
  _impl_.debug_ = nullptr;
}
inline const ::datastream::v1::Debug& Transaction::_internal_debug() const {
  const ::datastream::v1::Debug* p = _impl_.debug_;
  return p != nullptr ? *p : reinterpret_cast<const ::datastream::v1::Debug&>(
      ::datastream::v1::_Debug_default_instance_);
}
inline const ::datastream::v1::Debug& Transaction::debug() const {
  // @@protoc_insertion_point(field_get:datastream.v1.Transaction.debug)
  return _internal_debug();
}
inline void Transaction::unsafe_arena_set_allocated_debug(
    ::datastream::v1::Debug* debug) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.debug_);
  }
  _impl_.debug_ = debug;
  if (debug) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datastream.v1.Transaction.debug)
}
inline ::datastream::v1::Debug* Transaction::release_debug() {
  
  ::datastream::v1::Debug* temp = _impl_.debug_;
  _impl_.debug_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::datastream::v1::Debug* Transaction::unsafe_arena_release_debug() {
  // @@protoc_insertion_point(field_release:datastream.v1.Transaction.debug)
  
  ::datastream::v1::Debug* temp = _impl_.debug_;
  _impl_.debug_ = nullptr;
  return temp;
}
inline ::datastream::v1::Debug* Transaction::_internal_mutable_debug() {
  
  if (_impl_.debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::datastream::v1::Debug>(GetArenaForAllocation());
    _impl_.debug_ = p;
  }
  return _impl_.debug_;
}
inline ::datastream::v1::Debug* Transaction::mutable_debug() {
  ::datastream::v1::Debug* _msg = _internal_mutable_debug();
  // @@protoc_insertion_point(field_mutable:datastream.v1.Transaction.debug)
  return _msg;
}
inline void Transaction::set_allocated_debug(::datastream::v1::Debug* debug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.debug_;
  }
  if (debug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(debug);
    if (message_arena != submessage_arena) {
      debug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.debug_ = debug;
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.Transaction.debug)
}

// -------------------------------------------------------------------

// UpdateGER

// uint64 batch_number = 1;
inline void UpdateGER::clear_batch_number() {
  _impl_.batch_number_ = uint64_t{0u};
}
inline uint64_t UpdateGER::_internal_batch_number() const {
  return _impl_.batch_number_;
}
inline uint64_t UpdateGER::batch_number() const {
  // @@protoc_insertion_point(field_get:datastream.v1.UpdateGER.batch_number)
  return _internal_batch_number();
}
inline void UpdateGER::_internal_set_batch_number(uint64_t value) {
  
  _impl_.batch_number_ = value;
}
inline void UpdateGER::set_batch_number(uint64_t value) {
  _internal_set_batch_number(value);
  // @@protoc_insertion_point(field_set:datastream.v1.UpdateGER.batch_number)
}

// uint64 timestamp = 2;
inline void UpdateGER::clear_timestamp() {
  _impl_.timestamp_ = uint64_t{0u};
}
inline uint64_t UpdateGER::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint64_t UpdateGER::timestamp() const {
  // @@protoc_insertion_point(field_get:datastream.v1.UpdateGER.timestamp)
  return _internal_timestamp();
}
inline void UpdateGER::_internal_set_timestamp(uint64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void UpdateGER::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:datastream.v1.UpdateGER.timestamp)
}

// bytes global_exit_root = 3;
inline void UpdateGER::clear_global_exit_root() {
  _impl_.global_exit_root_.ClearToEmpty();
}
inline const std::string& UpdateGER::global_exit_root() const {
  // @@protoc_insertion_point(field_get:datastream.v1.UpdateGER.global_exit_root)
  return _internal_global_exit_root();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateGER::set_global_exit_root(ArgT0&& arg0, ArgT... args) {
 
 _impl_.global_exit_root_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:datastream.v1.UpdateGER.global_exit_root)
}
inline std::string* UpdateGER::mutable_global_exit_root() {
  std::string* _s = _internal_mutable_global_exit_root();
  // @@protoc_insertion_point(field_mutable:datastream.v1.UpdateGER.global_exit_root)
  return _s;
}
inline const std::string& UpdateGER::_internal_global_exit_root() const {
  return _impl_.global_exit_root_.Get();
}
inline void UpdateGER::_internal_set_global_exit_root(const std::string& value) {
  
  _impl_.global_exit_root_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateGER::_internal_mutable_global_exit_root() {
  
  return _impl_.global_exit_root_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateGER::release_global_exit_root() {
  // @@protoc_insertion_point(field_release:datastream.v1.UpdateGER.global_exit_root)
  return _impl_.global_exit_root_.Release();
}
inline void UpdateGER::set_allocated_global_exit_root(std::string* global_exit_root) {
  if (global_exit_root != nullptr) {
    
  } else {
    
  }
  _impl_.global_exit_root_.SetAllocated(global_exit_root, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.global_exit_root_.IsDefault()) {
    _impl_.global_exit_root_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.UpdateGER.global_exit_root)
}

// bytes coinbase = 4;
inline void UpdateGER::clear_coinbase() {
  _impl_.coinbase_.ClearToEmpty();
}
inline const std::string& UpdateGER::coinbase() const {
  // @@protoc_insertion_point(field_get:datastream.v1.UpdateGER.coinbase)
  return _internal_coinbase();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateGER::set_coinbase(ArgT0&& arg0, ArgT... args) {
 
 _impl_.coinbase_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:datastream.v1.UpdateGER.coinbase)
}
inline std::string* UpdateGER::mutable_coinbase() {
  std::string* _s = _internal_mutable_coinbase();
  // @@protoc_insertion_point(field_mutable:datastream.v1.UpdateGER.coinbase)
  return _s;
}
inline const std::string& UpdateGER::_internal_coinbase() const {
  return _impl_.coinbase_.Get();
}
inline void UpdateGER::_internal_set_coinbase(const std::string& value) {
  
  _impl_.coinbase_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateGER::_internal_mutable_coinbase() {
  
  return _impl_.coinbase_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateGER::release_coinbase() {
  // @@protoc_insertion_point(field_release:datastream.v1.UpdateGER.coinbase)
  return _impl_.coinbase_.Release();
}
inline void UpdateGER::set_allocated_coinbase(std::string* coinbase) {
  if (coinbase != nullptr) {
    
  } else {
    
  }
  _impl_.coinbase_.SetAllocated(coinbase, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.coinbase_.IsDefault()) {
    _impl_.coinbase_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.UpdateGER.coinbase)
}

// uint64 fork_id = 5;
inline void UpdateGER::clear_fork_id() {
  _impl_.fork_id_ = uint64_t{0u};
}
inline uint64_t UpdateGER::_internal_fork_id() const {
  return _impl_.fork_id_;
}
inline uint64_t UpdateGER::fork_id() const {
  // @@protoc_insertion_point(field_get:datastream.v1.UpdateGER.fork_id)
  return _internal_fork_id();
}
inline void UpdateGER::_internal_set_fork_id(uint64_t value) {
  
  _impl_.fork_id_ = value;
}
inline void UpdateGER::set_fork_id(uint64_t value) {
  _internal_set_fork_id(value);
  // @@protoc_insertion_point(field_set:datastream.v1.UpdateGER.fork_id)
}

// uint64 chain_id = 6;
inline void UpdateGER::clear_chain_id() {
  _impl_.chain_id_ = uint64_t{0u};
}
inline uint64_t UpdateGER::_internal_chain_id() const {
  return _impl_.chain_id_;
}
inline uint64_t UpdateGER::chain_id() const {
  // @@protoc_insertion_point(field_get:datastream.v1.UpdateGER.chain_id)
  return _internal_chain_id();
}
inline void UpdateGER::_internal_set_chain_id(uint64_t value) {
  
  _impl_.chain_id_ = value;
}
inline void UpdateGER::set_chain_id(uint64_t value) {
  _internal_set_chain_id(value);
  // @@protoc_insertion_point(field_set:datastream.v1.UpdateGER.chain_id)
}

// bytes state_root = 7;
inline void UpdateGER::clear_state_root() {
  _impl_.state_root_.ClearToEmpty();
}
inline const std::string& UpdateGER::state_root() const {
  // @@protoc_insertion_point(field_get:datastream.v1.UpdateGER.state_root)
  return _internal_state_root();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateGER::set_state_root(ArgT0&& arg0, ArgT... args) {
 
 _impl_.state_root_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:datastream.v1.UpdateGER.state_root)
}
inline std::string* UpdateGER::mutable_state_root() {
  std::string* _s = _internal_mutable_state_root();
  // @@protoc_insertion_point(field_mutable:datastream.v1.UpdateGER.state_root)
  return _s;
}
inline const std::string& UpdateGER::_internal_state_root() const {
  return _impl_.state_root_.Get();
}
inline void UpdateGER::_internal_set_state_root(const std::string& value) {
  
  _impl_.state_root_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateGER::_internal_mutable_state_root() {
  
  return _impl_.state_root_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateGER::release_state_root() {
  // @@protoc_insertion_point(field_release:datastream.v1.UpdateGER.state_root)
  return _impl_.state_root_.Release();
}
inline void UpdateGER::set_allocated_state_root(std::string* state_root) {
  if (state_root != nullptr) {
    
  } else {
    
  }
  _impl_.state_root_.SetAllocated(state_root, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.state_root_.IsDefault()) {
    _impl_.state_root_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.UpdateGER.state_root)
}

// .datastream.v1.Debug debug = 8;
inline bool UpdateGER::_internal_has_debug() const {
  return this != internal_default_instance() && _impl_.debug_ != nullptr;
}
inline bool UpdateGER::has_debug() const {
  return _internal_has_debug();
}
inline void UpdateGER::clear_debug() {
  if (GetArenaForAllocation() == nullptr && _impl_.debug_ != nullptr) {
    delete _impl_.debug_;
  }
  _impl_.debug_ = nullptr;
}
inline const ::datastream::v1::Debug& UpdateGER::_internal_debug() const {
  const ::datastream::v1::Debug* p = _impl_.debug_;
  return p != nullptr ? *p : reinterpret_cast<const ::datastream::v1::Debug&>(
      ::datastream::v1::_Debug_default_instance_);
}
inline const ::datastream::v1::Debug& UpdateGER::debug() const {
  // @@protoc_insertion_point(field_get:datastream.v1.UpdateGER.debug)
  return _internal_debug();
}
inline void UpdateGER::unsafe_arena_set_allocated_debug(
    ::datastream::v1::Debug* debug) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.debug_);
  }
  _impl_.debug_ = debug;
  if (debug) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:datastream.v1.UpdateGER.debug)
}
inline ::datastream::v1::Debug* UpdateGER::release_debug() {
  
  ::datastream::v1::Debug* temp = _impl_.debug_;
  _impl_.debug_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::datastream::v1::Debug* UpdateGER::unsafe_arena_release_debug() {
  // @@protoc_insertion_point(field_release:datastream.v1.UpdateGER.debug)
  
  ::datastream::v1::Debug* temp = _impl_.debug_;
  _impl_.debug_ = nullptr;
  return temp;
}
inline ::datastream::v1::Debug* UpdateGER::_internal_mutable_debug() {
  
  if (_impl_.debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::datastream::v1::Debug>(GetArenaForAllocation());
    _impl_.debug_ = p;
  }
  return _impl_.debug_;
}
inline ::datastream::v1::Debug* UpdateGER::mutable_debug() {
  ::datastream::v1::Debug* _msg = _internal_mutable_debug();
  // @@protoc_insertion_point(field_mutable:datastream.v1.UpdateGER.debug)
  return _msg;
}
inline void UpdateGER::set_allocated_debug(::datastream::v1::Debug* debug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.debug_;
  }
  if (debug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(debug);
    if (message_arena != submessage_arena) {
      debug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.debug_ = debug;
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.UpdateGER.debug)
}

// -------------------------------------------------------------------

// BookMark

// .datastream.v1.BookmarkType type = 1;
inline void BookMark::clear_type() {
  _impl_.type_ = 0;
}
inline ::datastream::v1::BookmarkType BookMark::_internal_type() const {
  return static_cast< ::datastream::v1::BookmarkType >(_impl_.type_);
}
inline ::datastream::v1::BookmarkType BookMark::type() const {
  // @@protoc_insertion_point(field_get:datastream.v1.BookMark.type)
  return _internal_type();
}
inline void BookMark::_internal_set_type(::datastream::v1::BookmarkType value) {
  
  _impl_.type_ = value;
}
inline void BookMark::set_type(::datastream::v1::BookmarkType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:datastream.v1.BookMark.type)
}

// uint64 value = 2;
inline void BookMark::clear_value() {
  _impl_.value_ = uint64_t{0u};
}
inline uint64_t BookMark::_internal_value() const {
  return _impl_.value_;
}
inline uint64_t BookMark::value() const {
  // @@protoc_insertion_point(field_get:datastream.v1.BookMark.value)
  return _internal_value();
}
inline void BookMark::_internal_set_value(uint64_t value) {
  
  _impl_.value_ = value;
}
inline void BookMark::set_value(uint64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:datastream.v1.BookMark.value)
}

// -------------------------------------------------------------------

// Debug

// string message = 1;
inline void Debug::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& Debug::message() const {
  // @@protoc_insertion_point(field_get:datastream.v1.Debug.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Debug::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:datastream.v1.Debug.message)
}
inline std::string* Debug::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:datastream.v1.Debug.message)
  return _s;
}
inline const std::string& Debug::_internal_message() const {
  return _impl_.message_.Get();
}
inline void Debug::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* Debug::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* Debug::release_message() {
  // @@protoc_insertion_point(field_release:datastream.v1.Debug.message)
  return _impl_.message_.Release();
}
inline void Debug::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:datastream.v1.Debug.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace datastream

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::datastream::v1::BookmarkType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::datastream::v1::BookmarkType>() {
  return ::datastream::v1::BookmarkType_descriptor();
}
template <> struct is_proto_enum< ::datastream::v1::EntryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::datastream::v1::EntryType>() {
  return ::datastream::v1::EntryType_descriptor();
}
template <> struct is_proto_enum< ::datastream::v1::BatchType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::datastream::v1::BatchType>() {
  return ::datastream::v1::BatchType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_datastream_2eproto
