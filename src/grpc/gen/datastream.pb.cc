// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datastream.proto

#include "datastream.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace datastream {
namespace v1 {
PROTOBUF_CONSTEXPR BatchStart::BatchStart(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.debug_)*/nullptr
  , /*decltype(_impl_.number_)*/uint64_t{0u}
  , /*decltype(_impl_.fork_id_)*/uint64_t{0u}
  , /*decltype(_impl_.chain_id_)*/uint64_t{0u}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BatchStartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatchStartDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatchStartDefaultTypeInternal() {}
  union {
    BatchStart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatchStartDefaultTypeInternal _BatchStart_default_instance_;
PROTOBUF_CONSTEXPR BatchEnd::BatchEnd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.local_exit_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.debug_)*/nullptr
  , /*decltype(_impl_.number_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BatchEndDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatchEndDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatchEndDefaultTypeInternal() {}
  union {
    BatchEnd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatchEndDefaultTypeInternal _BatchEnd_default_instance_;
PROTOBUF_CONSTEXPR L2Block::L2Block(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.l1_blockhash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.global_exit_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.coinbase_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.block_info_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.debug_)*/nullptr
  , /*decltype(_impl_.number_)*/uint64_t{0u}
  , /*decltype(_impl_.batch_number_)*/uint64_t{0u}
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.min_timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.delta_timestamp_)*/0u
  , /*decltype(_impl_.l1_infotree_index_)*/0u
  , /*decltype(_impl_.block_gas_limit_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct L2BlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR L2BlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~L2BlockDefaultTypeInternal() {}
  union {
    L2Block _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 L2BlockDefaultTypeInternal _L2Block_default_instance_;
PROTOBUF_CONSTEXPR L2BlockEnd::L2BlockEnd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.number_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct L2BlockEndDefaultTypeInternal {
  PROTOBUF_CONSTEXPR L2BlockEndDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~L2BlockEndDefaultTypeInternal() {}
  union {
    L2BlockEnd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 L2BlockEndDefaultTypeInternal _L2BlockEnd_default_instance_;
PROTOBUF_CONSTEXPR Transaction::Transaction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.encoded_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.im_state_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.debug_)*/nullptr
  , /*decltype(_impl_.l2block_number_)*/uint64_t{0u}
  , /*decltype(_impl_.index_)*/uint64_t{0u}
  , /*decltype(_impl_.is_valid_)*/false
  , /*decltype(_impl_.effective_gas_price_percentage_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransactionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransactionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransactionDefaultTypeInternal() {}
  union {
    Transaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransactionDefaultTypeInternal _Transaction_default_instance_;
PROTOBUF_CONSTEXPR UpdateGER::UpdateGER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.global_exit_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.coinbase_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.debug_)*/nullptr
  , /*decltype(_impl_.batch_number_)*/uint64_t{0u}
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.fork_id_)*/uint64_t{0u}
  , /*decltype(_impl_.chain_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateGERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateGERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateGERDefaultTypeInternal() {}
  union {
    UpdateGER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateGERDefaultTypeInternal _UpdateGER_default_instance_;
PROTOBUF_CONSTEXPR BookMark::BookMark(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/uint64_t{0u}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BookMarkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BookMarkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BookMarkDefaultTypeInternal() {}
  union {
    BookMark _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BookMarkDefaultTypeInternal _BookMark_default_instance_;
PROTOBUF_CONSTEXPR Debug::Debug(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DebugDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugDefaultTypeInternal() {}
  union {
    Debug _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugDefaultTypeInternal _Debug_default_instance_;
}  // namespace v1
}  // namespace datastream
static ::_pb::Metadata file_level_metadata_datastream_2eproto[8];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_datastream_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_datastream_2eproto = nullptr;

const uint32_t TableStruct_datastream_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datastream::v1::BatchStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datastream::v1::BatchStart, _impl_.number_),
  PROTOBUF_FIELD_OFFSET(::datastream::v1::BatchStart, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::datastream::v1::BatchStart, _impl_.fork_id_),
  PROTOBUF_FIELD_OFFSET(::datastream::v1::BatchStart, _impl_.chain_id_),
  PROTOBUF_FIELD_OFFSET(::datastream::v1::BatchStart, _impl_.debug_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datastream::v1::BatchEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datastream::v1::BatchEnd, _impl_.number_),
  PROTOBUF_FIELD_OFFSET(::datastream::v1::BatchEnd, _impl_.local_exit_root_),
  PROTOBUF_FIELD_OFFSET(::datastream::v1::BatchEnd, _impl_.state_root_),
  PROTOBUF_FIELD_OFFSET(::datastream::v1::BatchEnd, _impl_.debug_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datastream::v1::L2Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datastream::v1::L2Block, _impl_.number_),
  PROTOBUF_FIELD_OFFSET(::datastream::v1::L2Block, _impl_.batch_number_),
  PROTOBUF_FIELD_OFFSET(::datastream::v1::L2Block, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::datastream::v1::L2Block, _impl_.delta_timestamp_),
  PROTOBUF_FIELD_OFFSET(::datastream::v1::L2Block, _impl_.min_timestamp_),
  PROTOBUF_FIELD_OFFSET(::datastream::v1::L2Block, _impl_.l1_blockhash_),
  PROTOBUF_FIELD_OFFSET(::datastream::v1::L2Block, _impl_.l1_infotree_index_),
  PROTOBUF_FIELD_OFFSET(::datastream::v1::L2Block, _impl_.hash_),
  PROTOBUF_FIELD_OFFSET(::datastream::v1::L2Block, _impl_.state_root_),
  PROTOBUF_FIELD_OFFSET(::datastream::v1::L2Block, _impl_.global_exit_root_),
  PROTOBUF_FIELD_OFFSET(::datastream::v1::L2Block, _impl_.coinbase_),
  PROTOBUF_FIELD_OFFSET(::datastream::v1::L2Block, _impl_.block_gas_limit_),
  PROTOBUF_FIELD_OFFSET(::datastream::v1::L2Block, _impl_.block_info_root_),
  PROTOBUF_FIELD_OFFSET(::datastream::v1::L2Block, _impl_.debug_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datastream::v1::L2BlockEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datastream::v1::L2BlockEnd, _impl_.number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datastream::v1::Transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datastream::v1::Transaction, _impl_.l2block_number_),
  PROTOBUF_FIELD_OFFSET(::datastream::v1::Transaction, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::datastream::v1::Transaction, _impl_.is_valid_),
  PROTOBUF_FIELD_OFFSET(::datastream::v1::Transaction, _impl_.encoded_),
  PROTOBUF_FIELD_OFFSET(::datastream::v1::Transaction, _impl_.effective_gas_price_percentage_),
  PROTOBUF_FIELD_OFFSET(::datastream::v1::Transaction, _impl_.im_state_root_),
  PROTOBUF_FIELD_OFFSET(::datastream::v1::Transaction, _impl_.debug_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datastream::v1::UpdateGER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datastream::v1::UpdateGER, _impl_.batch_number_),
  PROTOBUF_FIELD_OFFSET(::datastream::v1::UpdateGER, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::datastream::v1::UpdateGER, _impl_.global_exit_root_),
  PROTOBUF_FIELD_OFFSET(::datastream::v1::UpdateGER, _impl_.coinbase_),
  PROTOBUF_FIELD_OFFSET(::datastream::v1::UpdateGER, _impl_.fork_id_),
  PROTOBUF_FIELD_OFFSET(::datastream::v1::UpdateGER, _impl_.chain_id_),
  PROTOBUF_FIELD_OFFSET(::datastream::v1::UpdateGER, _impl_.state_root_),
  PROTOBUF_FIELD_OFFSET(::datastream::v1::UpdateGER, _impl_.debug_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datastream::v1::BookMark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datastream::v1::BookMark, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::datastream::v1::BookMark, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datastream::v1::Debug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::datastream::v1::Debug, _impl_.message_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::datastream::v1::BatchStart)},
  { 11, -1, -1, sizeof(::datastream::v1::BatchEnd)},
  { 21, -1, -1, sizeof(::datastream::v1::L2Block)},
  { 41, -1, -1, sizeof(::datastream::v1::L2BlockEnd)},
  { 48, -1, -1, sizeof(::datastream::v1::Transaction)},
  { 61, -1, -1, sizeof(::datastream::v1::UpdateGER)},
  { 75, -1, -1, sizeof(::datastream::v1::BookMark)},
  { 83, -1, -1, sizeof(::datastream::v1::Debug)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::datastream::v1::_BatchStart_default_instance_._instance,
  &::datastream::v1::_BatchEnd_default_instance_._instance,
  &::datastream::v1::_L2Block_default_instance_._instance,
  &::datastream::v1::_L2BlockEnd_default_instance_._instance,
  &::datastream::v1::_Transaction_default_instance_._instance,
  &::datastream::v1::_UpdateGER_default_instance_._instance,
  &::datastream::v1::_BookMark_default_instance_._instance,
  &::datastream::v1::_Debug_default_instance_._instance,
};

const char descriptor_table_protodef_datastream_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020datastream.proto\022\rdatastream.v1\"\214\001\n\nBa"
  "tchStart\022\016\n\006number\030\001 \001(\004\022&\n\004type\030\002 \001(\0162\030"
  ".datastream.v1.BatchType\022\017\n\007fork_id\030\003 \001("
  "\004\022\020\n\010chain_id\030\004 \001(\004\022#\n\005debug\030\005 \001(\0132\024.dat"
  "astream.v1.Debug\"l\n\010BatchEnd\022\016\n\006number\030\001"
  " \001(\004\022\027\n\017local_exit_root\030\002 \001(\014\022\022\n\nstate_r"
  "oot\030\003 \001(\014\022#\n\005debug\030\004 \001(\0132\024.datastream.v1"
  ".Debug\"\310\002\n\007L2Block\022\016\n\006number\030\001 \001(\004\022\024\n\014ba"
  "tch_number\030\002 \001(\004\022\021\n\ttimestamp\030\003 \001(\004\022\027\n\017d"
  "elta_timestamp\030\004 \001(\r\022\025\n\rmin_timestamp\030\005 "
  "\001(\004\022\024\n\014l1_blockhash\030\006 \001(\014\022\031\n\021l1_infotree"
  "_index\030\007 \001(\r\022\014\n\004hash\030\010 \001(\014\022\022\n\nstate_root"
  "\030\t \001(\014\022\030\n\020global_exit_root\030\n \001(\014\022\020\n\010coin"
  "base\030\013 \001(\014\022\027\n\017block_gas_limit\030\014 \001(\004\022\027\n\017b"
  "lock_info_root\030\r \001(\014\022#\n\005debug\030\016 \001(\0132\024.da"
  "tastream.v1.Debug\"\034\n\nL2BlockEnd\022\016\n\006numbe"
  "r\030\001 \001(\004\"\273\001\n\013Transaction\022\026\n\016l2block_numbe"
  "r\030\001 \001(\004\022\r\n\005index\030\002 \001(\004\022\020\n\010is_valid\030\003 \001(\010"
  "\022\017\n\007encoded\030\004 \001(\014\022&\n\036effective_gas_price"
  "_percentage\030\005 \001(\r\022\025\n\rim_state_root\030\006 \001(\014"
  "\022#\n\005debug\030\007 \001(\0132\024.datastream.v1.Debug\"\274\001"
  "\n\tUpdateGER\022\024\n\014batch_number\030\001 \001(\004\022\021\n\ttim"
  "estamp\030\002 \001(\004\022\030\n\020global_exit_root\030\003 \001(\014\022\020"
  "\n\010coinbase\030\004 \001(\014\022\017\n\007fork_id\030\005 \001(\004\022\020\n\010cha"
  "in_id\030\006 \001(\004\022\022\n\nstate_root\030\007 \001(\014\022#\n\005debug"
  "\030\010 \001(\0132\024.datastream.v1.Debug\"D\n\010BookMark"
  "\022)\n\004type\030\001 \001(\0162\033.datastream.v1.BookmarkT"
  "ype\022\r\n\005value\030\002 \001(\004\"\030\n\005Debug\022\017\n\007message\030\001"
  " \001(\t*b\n\014BookmarkType\022\035\n\031BOOKMARK_TYPE_UN"
  "SPECIFIED\020\000\022\027\n\023BOOKMARK_TYPE_BATCH\020\001\022\032\n\026"
  "BOOKMARK_TYPE_L2_BLOCK\020\002*\312\001\n\tEntryType\022\032"
  "\n\026ENTRY_TYPE_UNSPECIFIED\020\000\022\032\n\026ENTRY_TYPE"
  "_BATCH_START\020\001\022\027\n\023ENTRY_TYPE_L2_BLOCK\020\002\022"
  "\032\n\026ENTRY_TYPE_TRANSACTION\020\003\022\030\n\024ENTRY_TYP"
  "E_BATCH_END\020\004\022\031\n\025ENTRY_TYPE_UPDATE_GER\020\005"
  "\022\033\n\027ENTRY_TYPE_L2_BLOCK_END\020\006*\207\001\n\tBatchT"
  "ype\022\032\n\026BATCH_TYPE_UNSPECIFIED\020\000\022\026\n\022BATCH"
  "_TYPE_REGULAR\020\001\022\025\n\021BATCH_TYPE_FORCED\020\002\022\027"
  "\n\023BATCH_TYPE_INJECTED\020\003\022\026\n\022BATCH_TYPE_IN"
  "VALID\020\004B8Z6github.com/0xPolygonHermez/zk"
  "evm-node/state/datastreamb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_datastream_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_datastream_2eproto = {
    false, false, 1633, descriptor_table_protodef_datastream_2eproto,
    "datastream.proto",
    &descriptor_table_datastream_2eproto_once, nullptr, 0, 8,
    schemas, file_default_instances, TableStruct_datastream_2eproto::offsets,
    file_level_metadata_datastream_2eproto, file_level_enum_descriptors_datastream_2eproto,
    file_level_service_descriptors_datastream_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_datastream_2eproto_getter() {
  return &descriptor_table_datastream_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_datastream_2eproto(&descriptor_table_datastream_2eproto);
namespace datastream {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BookmarkType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_datastream_2eproto);
  return file_level_enum_descriptors_datastream_2eproto[0];
}
bool BookmarkType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EntryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_datastream_2eproto);
  return file_level_enum_descriptors_datastream_2eproto[1];
}
bool EntryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BatchType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_datastream_2eproto);
  return file_level_enum_descriptors_datastream_2eproto[2];
}
bool BatchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class BatchStart::_Internal {
 public:
  static const ::datastream::v1::Debug& debug(const BatchStart* msg);
};

const ::datastream::v1::Debug&
BatchStart::_Internal::debug(const BatchStart* msg) {
  return *msg->_impl_.debug_;
}
BatchStart::BatchStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:datastream.v1.BatchStart)
}
BatchStart::BatchStart(const BatchStart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BatchStart* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.debug_){nullptr}
    , decltype(_impl_.number_){}
    , decltype(_impl_.fork_id_){}
    , decltype(_impl_.chain_id_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_debug()) {
    _this->_impl_.debug_ = new ::datastream::v1::Debug(*from._impl_.debug_);
  }
  ::memcpy(&_impl_.number_, &from._impl_.number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.number_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:datastream.v1.BatchStart)
}

inline void BatchStart::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.debug_){nullptr}
    , decltype(_impl_.number_){uint64_t{0u}}
    , decltype(_impl_.fork_id_){uint64_t{0u}}
    , decltype(_impl_.chain_id_){uint64_t{0u}}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BatchStart::~BatchStart() {
  // @@protoc_insertion_point(destructor:datastream.v1.BatchStart)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BatchStart::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.debug_;
}

void BatchStart::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BatchStart::Clear() {
// @@protoc_insertion_point(message_clear_start:datastream.v1.BatchStart)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.debug_ != nullptr) {
    delete _impl_.debug_;
  }
  _impl_.debug_ = nullptr;
  ::memset(&_impl_.number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.number_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchStart::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .datastream.v1.BatchType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::datastream::v1::BatchType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 fork_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.fork_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 chain_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.chain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .datastream.v1.Debug debug = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_debug(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatchStart::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:datastream.v1.BatchStart)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 number = 1;
  if (this->_internal_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_number(), target);
  }

  // .datastream.v1.BatchType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // uint64 fork_id = 3;
  if (this->_internal_fork_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_fork_id(), target);
  }

  // uint64 chain_id = 4;
  if (this->_internal_chain_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_chain_id(), target);
  }

  // .datastream.v1.Debug debug = 5;
  if (this->_internal_has_debug()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::debug(this),
        _Internal::debug(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datastream.v1.BatchStart)
  return target;
}

size_t BatchStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datastream.v1.BatchStart)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .datastream.v1.Debug debug = 5;
  if (this->_internal_has_debug()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.debug_);
  }

  // uint64 number = 1;
  if (this->_internal_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_number());
  }

  // uint64 fork_id = 3;
  if (this->_internal_fork_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_fork_id());
  }

  // uint64 chain_id = 4;
  if (this->_internal_chain_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_chain_id());
  }

  // .datastream.v1.BatchType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchStart::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BatchStart::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchStart::GetClassData() const { return &_class_data_; }


void BatchStart::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BatchStart*>(&to_msg);
  auto& from = static_cast<const BatchStart&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:datastream.v1.BatchStart)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_debug()) {
    _this->_internal_mutable_debug()->::datastream::v1::Debug::MergeFrom(
        from._internal_debug());
  }
  if (from._internal_number() != 0) {
    _this->_internal_set_number(from._internal_number());
  }
  if (from._internal_fork_id() != 0) {
    _this->_internal_set_fork_id(from._internal_fork_id());
  }
  if (from._internal_chain_id() != 0) {
    _this->_internal_set_chain_id(from._internal_chain_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchStart::CopyFrom(const BatchStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datastream.v1.BatchStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchStart::IsInitialized() const {
  return true;
}

void BatchStart::InternalSwap(BatchStart* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BatchStart, _impl_.type_)
      + sizeof(BatchStart::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(BatchStart, _impl_.debug_)>(
          reinterpret_cast<char*>(&_impl_.debug_),
          reinterpret_cast<char*>(&other->_impl_.debug_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchStart::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_datastream_2eproto_getter, &descriptor_table_datastream_2eproto_once,
      file_level_metadata_datastream_2eproto[0]);
}

// ===================================================================

class BatchEnd::_Internal {
 public:
  static const ::datastream::v1::Debug& debug(const BatchEnd* msg);
};

const ::datastream::v1::Debug&
BatchEnd::_Internal::debug(const BatchEnd* msg) {
  return *msg->_impl_.debug_;
}
BatchEnd::BatchEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:datastream.v1.BatchEnd)
}
BatchEnd::BatchEnd(const BatchEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BatchEnd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.local_exit_root_){}
    , decltype(_impl_.state_root_){}
    , decltype(_impl_.debug_){nullptr}
    , decltype(_impl_.number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.local_exit_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.local_exit_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_local_exit_root().empty()) {
    _this->_impl_.local_exit_root_.Set(from._internal_local_exit_root(), 
      _this->GetArenaForAllocation());
  }
  _impl_.state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_state_root().empty()) {
    _this->_impl_.state_root_.Set(from._internal_state_root(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_debug()) {
    _this->_impl_.debug_ = new ::datastream::v1::Debug(*from._impl_.debug_);
  }
  _this->_impl_.number_ = from._impl_.number_;
  // @@protoc_insertion_point(copy_constructor:datastream.v1.BatchEnd)
}

inline void BatchEnd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.local_exit_root_){}
    , decltype(_impl_.state_root_){}
    , decltype(_impl_.debug_){nullptr}
    , decltype(_impl_.number_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.local_exit_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.local_exit_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BatchEnd::~BatchEnd() {
  // @@protoc_insertion_point(destructor:datastream.v1.BatchEnd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BatchEnd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.local_exit_root_.Destroy();
  _impl_.state_root_.Destroy();
  if (this != internal_default_instance()) delete _impl_.debug_;
}

void BatchEnd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BatchEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:datastream.v1.BatchEnd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.local_exit_root_.ClearToEmpty();
  _impl_.state_root_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.debug_ != nullptr) {
    delete _impl_.debug_;
  }
  _impl_.debug_ = nullptr;
  _impl_.number_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchEnd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes local_exit_root = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_local_exit_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes state_root = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_state_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .datastream.v1.Debug debug = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_debug(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatchEnd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:datastream.v1.BatchEnd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 number = 1;
  if (this->_internal_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_number(), target);
  }

  // bytes local_exit_root = 2;
  if (!this->_internal_local_exit_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_local_exit_root(), target);
  }

  // bytes state_root = 3;
  if (!this->_internal_state_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_state_root(), target);
  }

  // .datastream.v1.Debug debug = 4;
  if (this->_internal_has_debug()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::debug(this),
        _Internal::debug(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datastream.v1.BatchEnd)
  return target;
}

size_t BatchEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datastream.v1.BatchEnd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes local_exit_root = 2;
  if (!this->_internal_local_exit_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_local_exit_root());
  }

  // bytes state_root = 3;
  if (!this->_internal_state_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_state_root());
  }

  // .datastream.v1.Debug debug = 4;
  if (this->_internal_has_debug()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.debug_);
  }

  // uint64 number = 1;
  if (this->_internal_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchEnd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BatchEnd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchEnd::GetClassData() const { return &_class_data_; }


void BatchEnd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BatchEnd*>(&to_msg);
  auto& from = static_cast<const BatchEnd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:datastream.v1.BatchEnd)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_local_exit_root().empty()) {
    _this->_internal_set_local_exit_root(from._internal_local_exit_root());
  }
  if (!from._internal_state_root().empty()) {
    _this->_internal_set_state_root(from._internal_state_root());
  }
  if (from._internal_has_debug()) {
    _this->_internal_mutable_debug()->::datastream::v1::Debug::MergeFrom(
        from._internal_debug());
  }
  if (from._internal_number() != 0) {
    _this->_internal_set_number(from._internal_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchEnd::CopyFrom(const BatchEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datastream.v1.BatchEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchEnd::IsInitialized() const {
  return true;
}

void BatchEnd::InternalSwap(BatchEnd* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.local_exit_root_, lhs_arena,
      &other->_impl_.local_exit_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.state_root_, lhs_arena,
      &other->_impl_.state_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BatchEnd, _impl_.number_)
      + sizeof(BatchEnd::_impl_.number_)
      - PROTOBUF_FIELD_OFFSET(BatchEnd, _impl_.debug_)>(
          reinterpret_cast<char*>(&_impl_.debug_),
          reinterpret_cast<char*>(&other->_impl_.debug_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchEnd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_datastream_2eproto_getter, &descriptor_table_datastream_2eproto_once,
      file_level_metadata_datastream_2eproto[1]);
}

// ===================================================================

class L2Block::_Internal {
 public:
  static const ::datastream::v1::Debug& debug(const L2Block* msg);
};

const ::datastream::v1::Debug&
L2Block::_Internal::debug(const L2Block* msg) {
  return *msg->_impl_.debug_;
}
L2Block::L2Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:datastream.v1.L2Block)
}
L2Block::L2Block(const L2Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  L2Block* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.l1_blockhash_){}
    , decltype(_impl_.hash_){}
    , decltype(_impl_.state_root_){}
    , decltype(_impl_.global_exit_root_){}
    , decltype(_impl_.coinbase_){}
    , decltype(_impl_.block_info_root_){}
    , decltype(_impl_.debug_){nullptr}
    , decltype(_impl_.number_){}
    , decltype(_impl_.batch_number_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.min_timestamp_){}
    , decltype(_impl_.delta_timestamp_){}
    , decltype(_impl_.l1_infotree_index_){}
    , decltype(_impl_.block_gas_limit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.l1_blockhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.l1_blockhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_l1_blockhash().empty()) {
    _this->_impl_.l1_blockhash_.Set(from._internal_l1_blockhash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_state_root().empty()) {
    _this->_impl_.state_root_.Set(from._internal_state_root(), 
      _this->GetArenaForAllocation());
  }
  _impl_.global_exit_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.global_exit_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_global_exit_root().empty()) {
    _this->_impl_.global_exit_root_.Set(from._internal_global_exit_root(), 
      _this->GetArenaForAllocation());
  }
  _impl_.coinbase_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.coinbase_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_coinbase().empty()) {
    _this->_impl_.coinbase_.Set(from._internal_coinbase(), 
      _this->GetArenaForAllocation());
  }
  _impl_.block_info_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_info_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_info_root().empty()) {
    _this->_impl_.block_info_root_.Set(from._internal_block_info_root(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_debug()) {
    _this->_impl_.debug_ = new ::datastream::v1::Debug(*from._impl_.debug_);
  }
  ::memcpy(&_impl_.number_, &from._impl_.number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.block_gas_limit_) -
    reinterpret_cast<char*>(&_impl_.number_)) + sizeof(_impl_.block_gas_limit_));
  // @@protoc_insertion_point(copy_constructor:datastream.v1.L2Block)
}

inline void L2Block::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.l1_blockhash_){}
    , decltype(_impl_.hash_){}
    , decltype(_impl_.state_root_){}
    , decltype(_impl_.global_exit_root_){}
    , decltype(_impl_.coinbase_){}
    , decltype(_impl_.block_info_root_){}
    , decltype(_impl_.debug_){nullptr}
    , decltype(_impl_.number_){uint64_t{0u}}
    , decltype(_impl_.batch_number_){uint64_t{0u}}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.min_timestamp_){uint64_t{0u}}
    , decltype(_impl_.delta_timestamp_){0u}
    , decltype(_impl_.l1_infotree_index_){0u}
    , decltype(_impl_.block_gas_limit_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.l1_blockhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.l1_blockhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.global_exit_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.global_exit_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.coinbase_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.coinbase_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.block_info_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_info_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

L2Block::~L2Block() {
  // @@protoc_insertion_point(destructor:datastream.v1.L2Block)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void L2Block::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.l1_blockhash_.Destroy();
  _impl_.hash_.Destroy();
  _impl_.state_root_.Destroy();
  _impl_.global_exit_root_.Destroy();
  _impl_.coinbase_.Destroy();
  _impl_.block_info_root_.Destroy();
  if (this != internal_default_instance()) delete _impl_.debug_;
}

void L2Block::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void L2Block::Clear() {
// @@protoc_insertion_point(message_clear_start:datastream.v1.L2Block)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.l1_blockhash_.ClearToEmpty();
  _impl_.hash_.ClearToEmpty();
  _impl_.state_root_.ClearToEmpty();
  _impl_.global_exit_root_.ClearToEmpty();
  _impl_.coinbase_.ClearToEmpty();
  _impl_.block_info_root_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.debug_ != nullptr) {
    delete _impl_.debug_;
  }
  _impl_.debug_ = nullptr;
  ::memset(&_impl_.number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.block_gas_limit_) -
      reinterpret_cast<char*>(&_impl_.number_)) + sizeof(_impl_.block_gas_limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* L2Block::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 batch_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.batch_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 delta_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.delta_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 min_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.min_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes l1_blockhash = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_l1_blockhash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 l1_infotree_index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.l1_infotree_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes hash = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes state_root = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_state_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes global_exit_root = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_global_exit_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes coinbase = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_coinbase();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 block_gas_limit = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.block_gas_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes block_info_root = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_block_info_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .datastream.v1.Debug debug = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_debug(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* L2Block::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:datastream.v1.L2Block)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 number = 1;
  if (this->_internal_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_number(), target);
  }

  // uint64 batch_number = 2;
  if (this->_internal_batch_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_batch_number(), target);
  }

  // uint64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // uint32 delta_timestamp = 4;
  if (this->_internal_delta_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_delta_timestamp(), target);
  }

  // uint64 min_timestamp = 5;
  if (this->_internal_min_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_min_timestamp(), target);
  }

  // bytes l1_blockhash = 6;
  if (!this->_internal_l1_blockhash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_l1_blockhash(), target);
  }

  // uint32 l1_infotree_index = 7;
  if (this->_internal_l1_infotree_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_l1_infotree_index(), target);
  }

  // bytes hash = 8;
  if (!this->_internal_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_hash(), target);
  }

  // bytes state_root = 9;
  if (!this->_internal_state_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_state_root(), target);
  }

  // bytes global_exit_root = 10;
  if (!this->_internal_global_exit_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_global_exit_root(), target);
  }

  // bytes coinbase = 11;
  if (!this->_internal_coinbase().empty()) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_coinbase(), target);
  }

  // uint64 block_gas_limit = 12;
  if (this->_internal_block_gas_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(12, this->_internal_block_gas_limit(), target);
  }

  // bytes block_info_root = 13;
  if (!this->_internal_block_info_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_block_info_root(), target);
  }

  // .datastream.v1.Debug debug = 14;
  if (this->_internal_has_debug()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::debug(this),
        _Internal::debug(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datastream.v1.L2Block)
  return target;
}

size_t L2Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datastream.v1.L2Block)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes l1_blockhash = 6;
  if (!this->_internal_l1_blockhash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_l1_blockhash());
  }

  // bytes hash = 8;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // bytes state_root = 9;
  if (!this->_internal_state_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_state_root());
  }

  // bytes global_exit_root = 10;
  if (!this->_internal_global_exit_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_global_exit_root());
  }

  // bytes coinbase = 11;
  if (!this->_internal_coinbase().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_coinbase());
  }

  // bytes block_info_root = 13;
  if (!this->_internal_block_info_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_info_root());
  }

  // .datastream.v1.Debug debug = 14;
  if (this->_internal_has_debug()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.debug_);
  }

  // uint64 number = 1;
  if (this->_internal_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_number());
  }

  // uint64 batch_number = 2;
  if (this->_internal_batch_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_batch_number());
  }

  // uint64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // uint64 min_timestamp = 5;
  if (this->_internal_min_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_min_timestamp());
  }

  // uint32 delta_timestamp = 4;
  if (this->_internal_delta_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_delta_timestamp());
  }

  // uint32 l1_infotree_index = 7;
  if (this->_internal_l1_infotree_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_l1_infotree_index());
  }

  // uint64 block_gas_limit = 12;
  if (this->_internal_block_gas_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_block_gas_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData L2Block::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    L2Block::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*L2Block::GetClassData() const { return &_class_data_; }


void L2Block::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<L2Block*>(&to_msg);
  auto& from = static_cast<const L2Block&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:datastream.v1.L2Block)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_l1_blockhash().empty()) {
    _this->_internal_set_l1_blockhash(from._internal_l1_blockhash());
  }
  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (!from._internal_state_root().empty()) {
    _this->_internal_set_state_root(from._internal_state_root());
  }
  if (!from._internal_global_exit_root().empty()) {
    _this->_internal_set_global_exit_root(from._internal_global_exit_root());
  }
  if (!from._internal_coinbase().empty()) {
    _this->_internal_set_coinbase(from._internal_coinbase());
  }
  if (!from._internal_block_info_root().empty()) {
    _this->_internal_set_block_info_root(from._internal_block_info_root());
  }
  if (from._internal_has_debug()) {
    _this->_internal_mutable_debug()->::datastream::v1::Debug::MergeFrom(
        from._internal_debug());
  }
  if (from._internal_number() != 0) {
    _this->_internal_set_number(from._internal_number());
  }
  if (from._internal_batch_number() != 0) {
    _this->_internal_set_batch_number(from._internal_batch_number());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_min_timestamp() != 0) {
    _this->_internal_set_min_timestamp(from._internal_min_timestamp());
  }
  if (from._internal_delta_timestamp() != 0) {
    _this->_internal_set_delta_timestamp(from._internal_delta_timestamp());
  }
  if (from._internal_l1_infotree_index() != 0) {
    _this->_internal_set_l1_infotree_index(from._internal_l1_infotree_index());
  }
  if (from._internal_block_gas_limit() != 0) {
    _this->_internal_set_block_gas_limit(from._internal_block_gas_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void L2Block::CopyFrom(const L2Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datastream.v1.L2Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2Block::IsInitialized() const {
  return true;
}

void L2Block::InternalSwap(L2Block* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.l1_blockhash_, lhs_arena,
      &other->_impl_.l1_blockhash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hash_, lhs_arena,
      &other->_impl_.hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.state_root_, lhs_arena,
      &other->_impl_.state_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.global_exit_root_, lhs_arena,
      &other->_impl_.global_exit_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.coinbase_, lhs_arena,
      &other->_impl_.coinbase_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.block_info_root_, lhs_arena,
      &other->_impl_.block_info_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(L2Block, _impl_.block_gas_limit_)
      + sizeof(L2Block::_impl_.block_gas_limit_)
      - PROTOBUF_FIELD_OFFSET(L2Block, _impl_.debug_)>(
          reinterpret_cast<char*>(&_impl_.debug_),
          reinterpret_cast<char*>(&other->_impl_.debug_));
}

::PROTOBUF_NAMESPACE_ID::Metadata L2Block::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_datastream_2eproto_getter, &descriptor_table_datastream_2eproto_once,
      file_level_metadata_datastream_2eproto[2]);
}

// ===================================================================

class L2BlockEnd::_Internal {
 public:
};

L2BlockEnd::L2BlockEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:datastream.v1.L2BlockEnd)
}
L2BlockEnd::L2BlockEnd(const L2BlockEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  L2BlockEnd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.number_ = from._impl_.number_;
  // @@protoc_insertion_point(copy_constructor:datastream.v1.L2BlockEnd)
}

inline void L2BlockEnd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.number_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

L2BlockEnd::~L2BlockEnd() {
  // @@protoc_insertion_point(destructor:datastream.v1.L2BlockEnd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void L2BlockEnd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void L2BlockEnd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void L2BlockEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:datastream.v1.L2BlockEnd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.number_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* L2BlockEnd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* L2BlockEnd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:datastream.v1.L2BlockEnd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 number = 1;
  if (this->_internal_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datastream.v1.L2BlockEnd)
  return target;
}

size_t L2BlockEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datastream.v1.L2BlockEnd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 number = 1;
  if (this->_internal_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData L2BlockEnd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    L2BlockEnd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*L2BlockEnd::GetClassData() const { return &_class_data_; }


void L2BlockEnd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<L2BlockEnd*>(&to_msg);
  auto& from = static_cast<const L2BlockEnd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:datastream.v1.L2BlockEnd)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_number() != 0) {
    _this->_internal_set_number(from._internal_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void L2BlockEnd::CopyFrom(const L2BlockEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datastream.v1.L2BlockEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2BlockEnd::IsInitialized() const {
  return true;
}

void L2BlockEnd::InternalSwap(L2BlockEnd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.number_, other->_impl_.number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata L2BlockEnd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_datastream_2eproto_getter, &descriptor_table_datastream_2eproto_once,
      file_level_metadata_datastream_2eproto[3]);
}

// ===================================================================

class Transaction::_Internal {
 public:
  static const ::datastream::v1::Debug& debug(const Transaction* msg);
};

const ::datastream::v1::Debug&
Transaction::_Internal::debug(const Transaction* msg) {
  return *msg->_impl_.debug_;
}
Transaction::Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:datastream.v1.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Transaction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.encoded_){}
    , decltype(_impl_.im_state_root_){}
    , decltype(_impl_.debug_){nullptr}
    , decltype(_impl_.l2block_number_){}
    , decltype(_impl_.index_){}
    , decltype(_impl_.is_valid_){}
    , decltype(_impl_.effective_gas_price_percentage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.encoded_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encoded_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encoded().empty()) {
    _this->_impl_.encoded_.Set(from._internal_encoded(), 
      _this->GetArenaForAllocation());
  }
  _impl_.im_state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.im_state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_im_state_root().empty()) {
    _this->_impl_.im_state_root_.Set(from._internal_im_state_root(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_debug()) {
    _this->_impl_.debug_ = new ::datastream::v1::Debug(*from._impl_.debug_);
  }
  ::memcpy(&_impl_.l2block_number_, &from._impl_.l2block_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.effective_gas_price_percentage_) -
    reinterpret_cast<char*>(&_impl_.l2block_number_)) + sizeof(_impl_.effective_gas_price_percentage_));
  // @@protoc_insertion_point(copy_constructor:datastream.v1.Transaction)
}

inline void Transaction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.encoded_){}
    , decltype(_impl_.im_state_root_){}
    , decltype(_impl_.debug_){nullptr}
    , decltype(_impl_.l2block_number_){uint64_t{0u}}
    , decltype(_impl_.index_){uint64_t{0u}}
    , decltype(_impl_.is_valid_){false}
    , decltype(_impl_.effective_gas_price_percentage_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.encoded_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encoded_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.im_state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.im_state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:datastream.v1.Transaction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Transaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.encoded_.Destroy();
  _impl_.im_state_root_.Destroy();
  if (this != internal_default_instance()) delete _impl_.debug_;
}

void Transaction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:datastream.v1.Transaction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.encoded_.ClearToEmpty();
  _impl_.im_state_root_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.debug_ != nullptr) {
    delete _impl_.debug_;
  }
  _impl_.debug_ = nullptr;
  ::memset(&_impl_.l2block_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.effective_gas_price_percentage_) -
      reinterpret_cast<char*>(&_impl_.l2block_number_)) + sizeof(_impl_.effective_gas_price_percentage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 l2block_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.l2block_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_valid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes encoded = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_encoded();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 effective_gas_price_percentage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.effective_gas_price_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes im_state_root = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_im_state_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .datastream.v1.Debug debug = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_debug(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Transaction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:datastream.v1.Transaction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 l2block_number = 1;
  if (this->_internal_l2block_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_l2block_number(), target);
  }

  // uint64 index = 2;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_index(), target);
  }

  // bool is_valid = 3;
  if (this->_internal_is_valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_valid(), target);
  }

  // bytes encoded = 4;
  if (!this->_internal_encoded().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_encoded(), target);
  }

  // uint32 effective_gas_price_percentage = 5;
  if (this->_internal_effective_gas_price_percentage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_effective_gas_price_percentage(), target);
  }

  // bytes im_state_root = 6;
  if (!this->_internal_im_state_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_im_state_root(), target);
  }

  // .datastream.v1.Debug debug = 7;
  if (this->_internal_has_debug()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::debug(this),
        _Internal::debug(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datastream.v1.Transaction)
  return target;
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datastream.v1.Transaction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes encoded = 4;
  if (!this->_internal_encoded().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encoded());
  }

  // bytes im_state_root = 6;
  if (!this->_internal_im_state_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_im_state_root());
  }

  // .datastream.v1.Debug debug = 7;
  if (this->_internal_has_debug()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.debug_);
  }

  // uint64 l2block_number = 1;
  if (this->_internal_l2block_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_l2block_number());
  }

  // uint64 index = 2;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_index());
  }

  // bool is_valid = 3;
  if (this->_internal_is_valid() != 0) {
    total_size += 1 + 1;
  }

  // uint32 effective_gas_price_percentage = 5;
  if (this->_internal_effective_gas_price_percentage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_effective_gas_price_percentage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Transaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transaction::GetClassData() const { return &_class_data_; }


void Transaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Transaction*>(&to_msg);
  auto& from = static_cast<const Transaction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:datastream.v1.Transaction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_encoded().empty()) {
    _this->_internal_set_encoded(from._internal_encoded());
  }
  if (!from._internal_im_state_root().empty()) {
    _this->_internal_set_im_state_root(from._internal_im_state_root());
  }
  if (from._internal_has_debug()) {
    _this->_internal_mutable_debug()->::datastream::v1::Debug::MergeFrom(
        from._internal_debug());
  }
  if (from._internal_l2block_number() != 0) {
    _this->_internal_set_l2block_number(from._internal_l2block_number());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_is_valid() != 0) {
    _this->_internal_set_is_valid(from._internal_is_valid());
  }
  if (from._internal_effective_gas_price_percentage() != 0) {
    _this->_internal_set_effective_gas_price_percentage(from._internal_effective_gas_price_percentage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datastream.v1.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  return true;
}

void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.encoded_, lhs_arena,
      &other->_impl_.encoded_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.im_state_root_, lhs_arena,
      &other->_impl_.im_state_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transaction, _impl_.effective_gas_price_percentage_)
      + sizeof(Transaction::_impl_.effective_gas_price_percentage_)
      - PROTOBUF_FIELD_OFFSET(Transaction, _impl_.debug_)>(
          reinterpret_cast<char*>(&_impl_.debug_),
          reinterpret_cast<char*>(&other->_impl_.debug_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_datastream_2eproto_getter, &descriptor_table_datastream_2eproto_once,
      file_level_metadata_datastream_2eproto[4]);
}

// ===================================================================

class UpdateGER::_Internal {
 public:
  static const ::datastream::v1::Debug& debug(const UpdateGER* msg);
};

const ::datastream::v1::Debug&
UpdateGER::_Internal::debug(const UpdateGER* msg) {
  return *msg->_impl_.debug_;
}
UpdateGER::UpdateGER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:datastream.v1.UpdateGER)
}
UpdateGER::UpdateGER(const UpdateGER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateGER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.global_exit_root_){}
    , decltype(_impl_.coinbase_){}
    , decltype(_impl_.state_root_){}
    , decltype(_impl_.debug_){nullptr}
    , decltype(_impl_.batch_number_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.fork_id_){}
    , decltype(_impl_.chain_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.global_exit_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.global_exit_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_global_exit_root().empty()) {
    _this->_impl_.global_exit_root_.Set(from._internal_global_exit_root(), 
      _this->GetArenaForAllocation());
  }
  _impl_.coinbase_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.coinbase_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_coinbase().empty()) {
    _this->_impl_.coinbase_.Set(from._internal_coinbase(), 
      _this->GetArenaForAllocation());
  }
  _impl_.state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_state_root().empty()) {
    _this->_impl_.state_root_.Set(from._internal_state_root(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_debug()) {
    _this->_impl_.debug_ = new ::datastream::v1::Debug(*from._impl_.debug_);
  }
  ::memcpy(&_impl_.batch_number_, &from._impl_.batch_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.chain_id_) -
    reinterpret_cast<char*>(&_impl_.batch_number_)) + sizeof(_impl_.chain_id_));
  // @@protoc_insertion_point(copy_constructor:datastream.v1.UpdateGER)
}

inline void UpdateGER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.global_exit_root_){}
    , decltype(_impl_.coinbase_){}
    , decltype(_impl_.state_root_){}
    , decltype(_impl_.debug_){nullptr}
    , decltype(_impl_.batch_number_){uint64_t{0u}}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.fork_id_){uint64_t{0u}}
    , decltype(_impl_.chain_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.global_exit_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.global_exit_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.coinbase_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.coinbase_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateGER::~UpdateGER() {
  // @@protoc_insertion_point(destructor:datastream.v1.UpdateGER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateGER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.global_exit_root_.Destroy();
  _impl_.coinbase_.Destroy();
  _impl_.state_root_.Destroy();
  if (this != internal_default_instance()) delete _impl_.debug_;
}

void UpdateGER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateGER::Clear() {
// @@protoc_insertion_point(message_clear_start:datastream.v1.UpdateGER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.global_exit_root_.ClearToEmpty();
  _impl_.coinbase_.ClearToEmpty();
  _impl_.state_root_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.debug_ != nullptr) {
    delete _impl_.debug_;
  }
  _impl_.debug_ = nullptr;
  ::memset(&_impl_.batch_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.chain_id_) -
      reinterpret_cast<char*>(&_impl_.batch_number_)) + sizeof(_impl_.chain_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateGER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 batch_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.batch_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes global_exit_root = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_global_exit_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes coinbase = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_coinbase();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 fork_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.fork_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 chain_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.chain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes state_root = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_state_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .datastream.v1.Debug debug = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_debug(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateGER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:datastream.v1.UpdateGER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 batch_number = 1;
  if (this->_internal_batch_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_batch_number(), target);
  }

  // uint64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // bytes global_exit_root = 3;
  if (!this->_internal_global_exit_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_global_exit_root(), target);
  }

  // bytes coinbase = 4;
  if (!this->_internal_coinbase().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_coinbase(), target);
  }

  // uint64 fork_id = 5;
  if (this->_internal_fork_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_fork_id(), target);
  }

  // uint64 chain_id = 6;
  if (this->_internal_chain_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_chain_id(), target);
  }

  // bytes state_root = 7;
  if (!this->_internal_state_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_state_root(), target);
  }

  // .datastream.v1.Debug debug = 8;
  if (this->_internal_has_debug()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::debug(this),
        _Internal::debug(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datastream.v1.UpdateGER)
  return target;
}

size_t UpdateGER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datastream.v1.UpdateGER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes global_exit_root = 3;
  if (!this->_internal_global_exit_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_global_exit_root());
  }

  // bytes coinbase = 4;
  if (!this->_internal_coinbase().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_coinbase());
  }

  // bytes state_root = 7;
  if (!this->_internal_state_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_state_root());
  }

  // .datastream.v1.Debug debug = 8;
  if (this->_internal_has_debug()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.debug_);
  }

  // uint64 batch_number = 1;
  if (this->_internal_batch_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_batch_number());
  }

  // uint64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // uint64 fork_id = 5;
  if (this->_internal_fork_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_fork_id());
  }

  // uint64 chain_id = 6;
  if (this->_internal_chain_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_chain_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateGER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateGER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateGER::GetClassData() const { return &_class_data_; }


void UpdateGER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateGER*>(&to_msg);
  auto& from = static_cast<const UpdateGER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:datastream.v1.UpdateGER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_global_exit_root().empty()) {
    _this->_internal_set_global_exit_root(from._internal_global_exit_root());
  }
  if (!from._internal_coinbase().empty()) {
    _this->_internal_set_coinbase(from._internal_coinbase());
  }
  if (!from._internal_state_root().empty()) {
    _this->_internal_set_state_root(from._internal_state_root());
  }
  if (from._internal_has_debug()) {
    _this->_internal_mutable_debug()->::datastream::v1::Debug::MergeFrom(
        from._internal_debug());
  }
  if (from._internal_batch_number() != 0) {
    _this->_internal_set_batch_number(from._internal_batch_number());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_fork_id() != 0) {
    _this->_internal_set_fork_id(from._internal_fork_id());
  }
  if (from._internal_chain_id() != 0) {
    _this->_internal_set_chain_id(from._internal_chain_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateGER::CopyFrom(const UpdateGER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datastream.v1.UpdateGER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGER::IsInitialized() const {
  return true;
}

void UpdateGER::InternalSwap(UpdateGER* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.global_exit_root_, lhs_arena,
      &other->_impl_.global_exit_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.coinbase_, lhs_arena,
      &other->_impl_.coinbase_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.state_root_, lhs_arena,
      &other->_impl_.state_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateGER, _impl_.chain_id_)
      + sizeof(UpdateGER::_impl_.chain_id_)
      - PROTOBUF_FIELD_OFFSET(UpdateGER, _impl_.debug_)>(
          reinterpret_cast<char*>(&_impl_.debug_),
          reinterpret_cast<char*>(&other->_impl_.debug_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateGER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_datastream_2eproto_getter, &descriptor_table_datastream_2eproto_once,
      file_level_metadata_datastream_2eproto[5]);
}

// ===================================================================

class BookMark::_Internal {
 public:
};

BookMark::BookMark(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:datastream.v1.BookMark)
}
BookMark::BookMark(const BookMark& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BookMark* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:datastream.v1.BookMark)
}

inline void BookMark::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){uint64_t{0u}}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BookMark::~BookMark() {
  // @@protoc_insertion_point(destructor:datastream.v1.BookMark)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BookMark::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BookMark::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BookMark::Clear() {
// @@protoc_insertion_point(message_clear_start:datastream.v1.BookMark)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BookMark::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .datastream.v1.BookmarkType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::datastream::v1::BookmarkType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BookMark::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:datastream.v1.BookMark)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .datastream.v1.BookmarkType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // uint64 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datastream.v1.BookMark)
  return target;
}

size_t BookMark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datastream.v1.BookMark)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_value());
  }

  // .datastream.v1.BookmarkType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BookMark::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BookMark::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BookMark::GetClassData() const { return &_class_data_; }


void BookMark::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BookMark*>(&to_msg);
  auto& from = static_cast<const BookMark&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:datastream.v1.BookMark)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BookMark::CopyFrom(const BookMark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datastream.v1.BookMark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BookMark::IsInitialized() const {
  return true;
}

void BookMark::InternalSwap(BookMark* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BookMark, _impl_.type_)
      + sizeof(BookMark::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(BookMark, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BookMark::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_datastream_2eproto_getter, &descriptor_table_datastream_2eproto_once,
      file_level_metadata_datastream_2eproto[6]);
}

// ===================================================================

class Debug::_Internal {
 public:
};

Debug::Debug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:datastream.v1.Debug)
}
Debug::Debug(const Debug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Debug* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:datastream.v1.Debug)
}

inline void Debug::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Debug::~Debug() {
  // @@protoc_insertion_point(destructor:datastream.v1.Debug)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Debug::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void Debug::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Debug::Clear() {
// @@protoc_insertion_point(message_clear_start:datastream.v1.Debug)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Debug::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "datastream.v1.Debug.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Debug::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:datastream.v1.Debug)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "datastream.v1.Debug.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datastream.v1.Debug)
  return target;
}

size_t Debug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datastream.v1.Debug)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Debug::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Debug::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Debug::GetClassData() const { return &_class_data_; }


void Debug::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Debug*>(&to_msg);
  auto& from = static_cast<const Debug&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:datastream.v1.Debug)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Debug::CopyFrom(const Debug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datastream.v1.Debug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug::IsInitialized() const {
  return true;
}

void Debug::InternalSwap(Debug* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Debug::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_datastream_2eproto_getter, &descriptor_table_datastream_2eproto_once,
      file_level_metadata_datastream_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace datastream
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::datastream::v1::BatchStart*
Arena::CreateMaybeMessage< ::datastream::v1::BatchStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datastream::v1::BatchStart >(arena);
}
template<> PROTOBUF_NOINLINE ::datastream::v1::BatchEnd*
Arena::CreateMaybeMessage< ::datastream::v1::BatchEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datastream::v1::BatchEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::datastream::v1::L2Block*
Arena::CreateMaybeMessage< ::datastream::v1::L2Block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datastream::v1::L2Block >(arena);
}
template<> PROTOBUF_NOINLINE ::datastream::v1::L2BlockEnd*
Arena::CreateMaybeMessage< ::datastream::v1::L2BlockEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datastream::v1::L2BlockEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::datastream::v1::Transaction*
Arena::CreateMaybeMessage< ::datastream::v1::Transaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datastream::v1::Transaction >(arena);
}
template<> PROTOBUF_NOINLINE ::datastream::v1::UpdateGER*
Arena::CreateMaybeMessage< ::datastream::v1::UpdateGER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datastream::v1::UpdateGER >(arena);
}
template<> PROTOBUF_NOINLINE ::datastream::v1::BookMark*
Arena::CreateMaybeMessage< ::datastream::v1::BookMark >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datastream::v1::BookMark >(arena);
}
template<> PROTOBUF_NOINLINE ::datastream::v1::Debug*
Arena::CreateMaybeMessage< ::datastream::v1::Debug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datastream::v1::Debug >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
