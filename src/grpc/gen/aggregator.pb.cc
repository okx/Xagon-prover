// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aggregator.proto

#include "aggregator.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace aggregator {
namespace v1 {
PROTOBUF_CONSTEXPR Version::Version(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.v0_0_1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VersionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VersionDefaultTypeInternal() {}
  union {
    Version _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VersionDefaultTypeInternal _Version_default_instance_;
PROTOBUF_CONSTEXPR AggregatorMessage::AggregatorMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AggregatorMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AggregatorMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AggregatorMessageDefaultTypeInternal() {}
  union {
    AggregatorMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AggregatorMessageDefaultTypeInternal _AggregatorMessage_default_instance_;
PROTOBUF_CONSTEXPR ProverMessage::ProverMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.response_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ProverMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProverMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProverMessageDefaultTypeInternal() {}
  union {
    ProverMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProverMessageDefaultTypeInternal _ProverMessage_default_instance_;
PROTOBUF_CONSTEXPR GetStatusRequest::GetStatusRequest(
    ::_pbi::ConstantInitialized) {}
struct GetStatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetStatusRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetStatusRequestDefaultTypeInternal() {}
  union {
    GetStatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetStatusRequestDefaultTypeInternal _GetStatusRequest_default_instance_;
PROTOBUF_CONSTEXPR GenBatchProofRequest::GenBatchProofRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.input_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GenBatchProofRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenBatchProofRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenBatchProofRequestDefaultTypeInternal() {}
  union {
    GenBatchProofRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenBatchProofRequestDefaultTypeInternal _GenBatchProofRequest_default_instance_;
PROTOBUF_CONSTEXPR GenStatelessBatchProofRequest::GenStatelessBatchProofRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.input_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GenStatelessBatchProofRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenStatelessBatchProofRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenStatelessBatchProofRequestDefaultTypeInternal() {}
  union {
    GenStatelessBatchProofRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenStatelessBatchProofRequestDefaultTypeInternal _GenStatelessBatchProofRequest_default_instance_;
PROTOBUF_CONSTEXPR GenAggregatedProofRequest::GenAggregatedProofRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.recursive_proof_1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.recursive_proof_2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GenAggregatedProofRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenAggregatedProofRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenAggregatedProofRequestDefaultTypeInternal() {}
  union {
    GenAggregatedProofRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenAggregatedProofRequestDefaultTypeInternal _GenAggregatedProofRequest_default_instance_;
PROTOBUF_CONSTEXPR GenFinalProofRequest::GenFinalProofRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.recursive_proof_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.aggregator_addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GenFinalProofRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenFinalProofRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenFinalProofRequestDefaultTypeInternal() {}
  union {
    GenFinalProofRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenFinalProofRequestDefaultTypeInternal _GenFinalProofRequest_default_instance_;
PROTOBUF_CONSTEXPR CancelRequest::CancelRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CancelRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CancelRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CancelRequestDefaultTypeInternal() {}
  union {
    CancelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CancelRequestDefaultTypeInternal _CancelRequest_default_instance_;
PROTOBUF_CONSTEXPR GetProofRequest::GetProofRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timeout_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetProofRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetProofRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetProofRequestDefaultTypeInternal() {}
  union {
    GetProofRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetProofRequestDefaultTypeInternal _GetProofRequest_default_instance_;
PROTOBUF_CONSTEXPR GetStatusResponse::GetStatusResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pending_request_queue_ids_)*/{}
  , /*decltype(_impl_.last_computed_request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.current_computing_request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_proto_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_server_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.prover_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.prover_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.last_computed_end_time_)*/uint64_t{0u}
  , /*decltype(_impl_.current_computing_start_time_)*/uint64_t{0u}
  , /*decltype(_impl_.number_of_cores_)*/uint64_t{0u}
  , /*decltype(_impl_.total_memory_)*/uint64_t{0u}
  , /*decltype(_impl_.free_memory_)*/uint64_t{0u}
  , /*decltype(_impl_.fork_id_)*/uint64_t{0u}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetStatusResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetStatusResponseDefaultTypeInternal() {}
  union {
    GetStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetStatusResponseDefaultTypeInternal _GetStatusResponse_default_instance_;
PROTOBUF_CONSTEXPR GenBatchProofResponse::GenBatchProofResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GenBatchProofResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenBatchProofResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenBatchProofResponseDefaultTypeInternal() {}
  union {
    GenBatchProofResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenBatchProofResponseDefaultTypeInternal _GenBatchProofResponse_default_instance_;
PROTOBUF_CONSTEXPR GenAggregatedProofResponse::GenAggregatedProofResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GenAggregatedProofResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenAggregatedProofResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenAggregatedProofResponseDefaultTypeInternal() {}
  union {
    GenAggregatedProofResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenAggregatedProofResponseDefaultTypeInternal _GenAggregatedProofResponse_default_instance_;
PROTOBUF_CONSTEXPR GenFinalProofResponse::GenFinalProofResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GenFinalProofResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenFinalProofResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenFinalProofResponseDefaultTypeInternal() {}
  union {
    GenFinalProofResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenFinalProofResponseDefaultTypeInternal _GenFinalProofResponse_default_instance_;
PROTOBUF_CONSTEXPR CancelResponse::CancelResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CancelResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CancelResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CancelResponseDefaultTypeInternal() {}
  union {
    CancelResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CancelResponseDefaultTypeInternal _CancelResponse_default_instance_;
PROTOBUF_CONSTEXPR GetProofResponse::GetProofResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_.proof_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct GetProofResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetProofResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetProofResponseDefaultTypeInternal() {}
  union {
    GetProofResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetProofResponseDefaultTypeInternal _GetProofResponse_default_instance_;
PROTOBUF_CONSTEXPR FinalProof::FinalProof(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.proof_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.public__)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FinalProofDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FinalProofDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FinalProofDefaultTypeInternal() {}
  union {
    FinalProof _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FinalProofDefaultTypeInternal _FinalProof_default_instance_;
PROTOBUF_CONSTEXPR PublicInputs_L1InfoTreeDataEntry_DoNotUse::PublicInputs_L1InfoTreeDataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PublicInputs_L1InfoTreeDataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublicInputs_L1InfoTreeDataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublicInputs_L1InfoTreeDataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PublicInputs_L1InfoTreeDataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublicInputs_L1InfoTreeDataEntry_DoNotUseDefaultTypeInternal _PublicInputs_L1InfoTreeDataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PublicInputs::PublicInputs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.l1_info_tree_data_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.old_state_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.old_acc_input_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.batch_l2_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.l1_info_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sequencer_addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.forced_blockhash_l1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.aggregator_addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.old_batch_num_)*/uint64_t{0u}
  , /*decltype(_impl_.chain_id_)*/uint64_t{0u}
  , /*decltype(_impl_.fork_id_)*/uint64_t{0u}
  , /*decltype(_impl_.timestamp_limit_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PublicInputsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublicInputsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublicInputsDefaultTypeInternal() {}
  union {
    PublicInputs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublicInputsDefaultTypeInternal _PublicInputs_default_instance_;
PROTOBUF_CONSTEXPR StatelessPublicInputs_L1InfoTreeDataEntry_DoNotUse::StatelessPublicInputs_L1InfoTreeDataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct StatelessPublicInputs_L1InfoTreeDataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatelessPublicInputs_L1InfoTreeDataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatelessPublicInputs_L1InfoTreeDataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    StatelessPublicInputs_L1InfoTreeDataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatelessPublicInputs_L1InfoTreeDataEntry_DoNotUseDefaultTypeInternal _StatelessPublicInputs_L1InfoTreeDataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR StatelessPublicInputs::StatelessPublicInputs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.l1_info_tree_data_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.witness_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.old_acc_input_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.batch_l2_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.l1_info_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sequencer_addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.forced_blockhash_l1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.aggregator_addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.old_batch_num_)*/uint64_t{0u}
  , /*decltype(_impl_.chain_id_)*/uint64_t{0u}
  , /*decltype(_impl_.fork_id_)*/uint64_t{0u}
  , /*decltype(_impl_.timestamp_limit_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatelessPublicInputsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatelessPublicInputsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatelessPublicInputsDefaultTypeInternal() {}
  union {
    StatelessPublicInputs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatelessPublicInputsDefaultTypeInternal _StatelessPublicInputs_default_instance_;
PROTOBUF_CONSTEXPR L1Data::L1Data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.smt_proof_)*/{}
  , /*decltype(_impl_.global_exit_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.blockhash_l1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.min_timestamp_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct L1DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR L1DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~L1DataDefaultTypeInternal() {}
  union {
    L1Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 L1DataDefaultTypeInternal _L1Data_default_instance_;
PROTOBUF_CONSTEXPR InputProver_DbEntry_DoNotUse::InputProver_DbEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct InputProver_DbEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InputProver_DbEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InputProver_DbEntry_DoNotUseDefaultTypeInternal() {}
  union {
    InputProver_DbEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InputProver_DbEntry_DoNotUseDefaultTypeInternal _InputProver_DbEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR InputProver_ContractsBytecodeEntry_DoNotUse::InputProver_ContractsBytecodeEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct InputProver_ContractsBytecodeEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InputProver_ContractsBytecodeEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InputProver_ContractsBytecodeEntry_DoNotUseDefaultTypeInternal() {}
  union {
    InputProver_ContractsBytecodeEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InputProver_ContractsBytecodeEntry_DoNotUseDefaultTypeInternal _InputProver_ContractsBytecodeEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR InputProver::InputProver(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.contracts_bytecode_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.public_inputs_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InputProverDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InputProverDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InputProverDefaultTypeInternal() {}
  union {
    InputProver _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InputProverDefaultTypeInternal _InputProver_default_instance_;
PROTOBUF_CONSTEXPR StatelessInputProver::StatelessInputProver(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.public_inputs_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatelessInputProverDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatelessInputProverDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatelessInputProverDefaultTypeInternal() {}
  union {
    StatelessInputProver _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatelessInputProverDefaultTypeInternal _StatelessInputProver_default_instance_;
PROTOBUF_CONSTEXPR PublicInputsExtended::PublicInputsExtended(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.new_state_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.new_acc_input_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.new_local_exit_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.public_inputs_)*/nullptr
  , /*decltype(_impl_.new_batch_num_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PublicInputsExtendedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublicInputsExtendedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublicInputsExtendedDefaultTypeInternal() {}
  union {
    PublicInputsExtended _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublicInputsExtendedDefaultTypeInternal _PublicInputsExtended_default_instance_;
}  // namespace v1
}  // namespace aggregator
static ::_pb::Metadata file_level_metadata_aggregator_2eproto[27];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_aggregator_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_aggregator_2eproto = nullptr;

const uint32_t TableStruct_aggregator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::Version, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::Version, _impl_.v0_0_1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::AggregatorMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::AggregatorMessage, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::AggregatorMessage, _impl_.id_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::AggregatorMessage, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::ProverMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::ProverMessage, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::ProverMessage, _impl_.id_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::ProverMessage, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GetStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GenBatchProofRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GenBatchProofRequest, _impl_.input_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GenStatelessBatchProofRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GenStatelessBatchProofRequest, _impl_.input_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GenAggregatedProofRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GenAggregatedProofRequest, _impl_.recursive_proof_1_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GenAggregatedProofRequest, _impl_.recursive_proof_2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GenFinalProofRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GenFinalProofRequest, _impl_.recursive_proof_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GenFinalProofRequest, _impl_.aggregator_addr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::CancelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::CancelRequest, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GetProofRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GetProofRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GetProofRequest, _impl_.timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GetStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GetStatusResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GetStatusResponse, _impl_.last_computed_request_id_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GetStatusResponse, _impl_.last_computed_end_time_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GetStatusResponse, _impl_.current_computing_request_id_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GetStatusResponse, _impl_.current_computing_start_time_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GetStatusResponse, _impl_.version_proto_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GetStatusResponse, _impl_.version_server_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GetStatusResponse, _impl_.pending_request_queue_ids_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GetStatusResponse, _impl_.prover_name_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GetStatusResponse, _impl_.prover_id_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GetStatusResponse, _impl_.number_of_cores_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GetStatusResponse, _impl_.total_memory_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GetStatusResponse, _impl_.free_memory_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GetStatusResponse, _impl_.fork_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GenBatchProofResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GenBatchProofResponse, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GenBatchProofResponse, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GenAggregatedProofResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GenAggregatedProofResponse, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GenAggregatedProofResponse, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GenFinalProofResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GenFinalProofResponse, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GenFinalProofResponse, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::CancelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::CancelResponse, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GetProofResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GetProofResponse, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GetProofResponse, _impl_.id_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GetProofResponse, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GetProofResponse, _impl_.result_string_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::GetProofResponse, _impl_.proof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::FinalProof, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::FinalProof, _impl_.proof_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::FinalProof, _impl_.public__),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::PublicInputs_L1InfoTreeDataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::PublicInputs_L1InfoTreeDataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::PublicInputs_L1InfoTreeDataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::PublicInputs_L1InfoTreeDataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::PublicInputs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::PublicInputs, _impl_.old_state_root_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::PublicInputs, _impl_.old_acc_input_hash_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::PublicInputs, _impl_.old_batch_num_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::PublicInputs, _impl_.chain_id_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::PublicInputs, _impl_.fork_id_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::PublicInputs, _impl_.batch_l2_data_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::PublicInputs, _impl_.l1_info_root_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::PublicInputs, _impl_.timestamp_limit_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::PublicInputs, _impl_.sequencer_addr_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::PublicInputs, _impl_.forced_blockhash_l1_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::PublicInputs, _impl_.aggregator_addr_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::PublicInputs, _impl_.l1_info_tree_data_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::StatelessPublicInputs_L1InfoTreeDataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::StatelessPublicInputs_L1InfoTreeDataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::StatelessPublicInputs_L1InfoTreeDataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::StatelessPublicInputs_L1InfoTreeDataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::StatelessPublicInputs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::StatelessPublicInputs, _impl_.witness_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::StatelessPublicInputs, _impl_.old_acc_input_hash_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::StatelessPublicInputs, _impl_.old_batch_num_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::StatelessPublicInputs, _impl_.chain_id_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::StatelessPublicInputs, _impl_.fork_id_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::StatelessPublicInputs, _impl_.batch_l2_data_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::StatelessPublicInputs, _impl_.l1_info_root_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::StatelessPublicInputs, _impl_.timestamp_limit_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::StatelessPublicInputs, _impl_.sequencer_addr_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::StatelessPublicInputs, _impl_.forced_blockhash_l1_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::StatelessPublicInputs, _impl_.aggregator_addr_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::StatelessPublicInputs, _impl_.l1_info_tree_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::L1Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::L1Data, _impl_.global_exit_root_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::L1Data, _impl_.blockhash_l1_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::L1Data, _impl_.min_timestamp_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::L1Data, _impl_.smt_proof_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::InputProver_DbEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::InputProver_DbEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::InputProver_DbEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::InputProver_DbEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::InputProver_ContractsBytecodeEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::InputProver_ContractsBytecodeEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::InputProver_ContractsBytecodeEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::InputProver_ContractsBytecodeEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::InputProver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::InputProver, _impl_.public_inputs_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::InputProver, _impl_.db_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::InputProver, _impl_.contracts_bytecode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::StatelessInputProver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::StatelessInputProver, _impl_.public_inputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::PublicInputsExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::PublicInputsExtended, _impl_.public_inputs_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::PublicInputsExtended, _impl_.new_state_root_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::PublicInputsExtended, _impl_.new_acc_input_hash_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::PublicInputsExtended, _impl_.new_local_exit_root_),
  PROTOBUF_FIELD_OFFSET(::aggregator::v1::PublicInputsExtended, _impl_.new_batch_num_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::aggregator::v1::Version)},
  { 7, -1, -1, sizeof(::aggregator::v1::AggregatorMessage)},
  { 22, -1, -1, sizeof(::aggregator::v1::ProverMessage)},
  { 36, -1, -1, sizeof(::aggregator::v1::GetStatusRequest)},
  { 42, -1, -1, sizeof(::aggregator::v1::GenBatchProofRequest)},
  { 49, -1, -1, sizeof(::aggregator::v1::GenStatelessBatchProofRequest)},
  { 56, -1, -1, sizeof(::aggregator::v1::GenAggregatedProofRequest)},
  { 64, -1, -1, sizeof(::aggregator::v1::GenFinalProofRequest)},
  { 72, -1, -1, sizeof(::aggregator::v1::CancelRequest)},
  { 79, -1, -1, sizeof(::aggregator::v1::GetProofRequest)},
  { 87, -1, -1, sizeof(::aggregator::v1::GetStatusResponse)},
  { 107, -1, -1, sizeof(::aggregator::v1::GenBatchProofResponse)},
  { 115, -1, -1, sizeof(::aggregator::v1::GenAggregatedProofResponse)},
  { 123, -1, -1, sizeof(::aggregator::v1::GenFinalProofResponse)},
  { 131, -1, -1, sizeof(::aggregator::v1::CancelResponse)},
  { 138, -1, -1, sizeof(::aggregator::v1::GetProofResponse)},
  { 150, -1, -1, sizeof(::aggregator::v1::FinalProof)},
  { 158, 166, -1, sizeof(::aggregator::v1::PublicInputs_L1InfoTreeDataEntry_DoNotUse)},
  { 168, -1, -1, sizeof(::aggregator::v1::PublicInputs)},
  { 186, 194, -1, sizeof(::aggregator::v1::StatelessPublicInputs_L1InfoTreeDataEntry_DoNotUse)},
  { 196, -1, -1, sizeof(::aggregator::v1::StatelessPublicInputs)},
  { 214, -1, -1, sizeof(::aggregator::v1::L1Data)},
  { 224, 232, -1, sizeof(::aggregator::v1::InputProver_DbEntry_DoNotUse)},
  { 234, 242, -1, sizeof(::aggregator::v1::InputProver_ContractsBytecodeEntry_DoNotUse)},
  { 244, -1, -1, sizeof(::aggregator::v1::InputProver)},
  { 253, -1, -1, sizeof(::aggregator::v1::StatelessInputProver)},
  { 260, -1, -1, sizeof(::aggregator::v1::PublicInputsExtended)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::aggregator::v1::_Version_default_instance_._instance,
  &::aggregator::v1::_AggregatorMessage_default_instance_._instance,
  &::aggregator::v1::_ProverMessage_default_instance_._instance,
  &::aggregator::v1::_GetStatusRequest_default_instance_._instance,
  &::aggregator::v1::_GenBatchProofRequest_default_instance_._instance,
  &::aggregator::v1::_GenStatelessBatchProofRequest_default_instance_._instance,
  &::aggregator::v1::_GenAggregatedProofRequest_default_instance_._instance,
  &::aggregator::v1::_GenFinalProofRequest_default_instance_._instance,
  &::aggregator::v1::_CancelRequest_default_instance_._instance,
  &::aggregator::v1::_GetProofRequest_default_instance_._instance,
  &::aggregator::v1::_GetStatusResponse_default_instance_._instance,
  &::aggregator::v1::_GenBatchProofResponse_default_instance_._instance,
  &::aggregator::v1::_GenAggregatedProofResponse_default_instance_._instance,
  &::aggregator::v1::_GenFinalProofResponse_default_instance_._instance,
  &::aggregator::v1::_CancelResponse_default_instance_._instance,
  &::aggregator::v1::_GetProofResponse_default_instance_._instance,
  &::aggregator::v1::_FinalProof_default_instance_._instance,
  &::aggregator::v1::_PublicInputs_L1InfoTreeDataEntry_DoNotUse_default_instance_._instance,
  &::aggregator::v1::_PublicInputs_default_instance_._instance,
  &::aggregator::v1::_StatelessPublicInputs_L1InfoTreeDataEntry_DoNotUse_default_instance_._instance,
  &::aggregator::v1::_StatelessPublicInputs_default_instance_._instance,
  &::aggregator::v1::_L1Data_default_instance_._instance,
  &::aggregator::v1::_InputProver_DbEntry_DoNotUse_default_instance_._instance,
  &::aggregator::v1::_InputProver_ContractsBytecodeEntry_DoNotUse_default_instance_._instance,
  &::aggregator::v1::_InputProver_default_instance_._instance,
  &::aggregator::v1::_StatelessInputProver_default_instance_._instance,
  &::aggregator::v1::_PublicInputsExtended_default_instance_._instance,
};

const char descriptor_table_protodef_aggregator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020aggregator.proto\022\raggregator.v1\"\031\n\007Ver"
  "sion\022\016\n\006v0_0_1\030\001 \001(\t\"\233\004\n\021AggregatorMessa"
  "ge\022\n\n\002id\030\001 \001(\t\022=\n\022get_status_request\030\002 \001"
  "(\0132\037.aggregator.v1.GetStatusRequestH\000\022F\n"
  "\027gen_batch_proof_request\030\003 \001(\0132#.aggrega"
  "tor.v1.GenBatchProofRequestH\000\022P\n\034gen_agg"
  "regated_proof_request\030\004 \001(\0132(.aggregator"
  ".v1.GenAggregatedProofRequestH\000\022F\n\027gen_f"
  "inal_proof_request\030\005 \001(\0132#.aggregator.v1"
  ".GenFinalProofRequestH\000\0226\n\016cancel_reques"
  "t\030\006 \001(\0132\034.aggregator.v1.CancelRequestH\000\022"
  ";\n\021get_proof_request\030\007 \001(\0132\036.aggregator."
  "v1.GetProofRequestH\000\022Y\n!gen_stateless_ba"
  "tch_proof_request\030\010 \001(\0132,.aggregator.v1."
  "GenStatelessBatchProofRequestH\000B\t\n\007reque"
  "st\"\311\003\n\rProverMessage\022\n\n\002id\030\001 \001(\t\022\?\n\023get_"
  "status_response\030\002 \001(\0132 .aggregator.v1.Ge"
  "tStatusResponseH\000\022H\n\030gen_batch_proof_res"
  "ponse\030\003 \001(\0132$.aggregator.v1.GenBatchProo"
  "fResponseH\000\022R\n\035gen_aggregated_proof_resp"
  "onse\030\004 \001(\0132).aggregator.v1.GenAggregated"
  "ProofResponseH\000\022H\n\030gen_final_proof_respo"
  "nse\030\005 \001(\0132$.aggregator.v1.GenFinalProofR"
  "esponseH\000\0228\n\017cancel_response\030\006 \001(\0132\035.agg"
  "regator.v1.CancelResponseH\000\022=\n\022get_proof"
  "_response\030\007 \001(\0132\037.aggregator.v1.GetProof"
  "ResponseH\000B\n\n\010response\"\022\n\020GetStatusReque"
  "st\"A\n\024GenBatchProofRequest\022)\n\005input\030\001 \001("
  "\0132\032.aggregator.v1.InputProver\"S\n\035GenStat"
  "elessBatchProofRequest\0222\n\005input\030\001 \001(\0132#."
  "aggregator.v1.StatelessInputProver\"Q\n\031Ge"
  "nAggregatedProofRequest\022\031\n\021recursive_pro"
  "of_1\030\001 \001(\t\022\031\n\021recursive_proof_2\030\002 \001(\t\"H\n"
  "\024GenFinalProofRequest\022\027\n\017recursive_proof"
  "\030\001 \001(\t\022\027\n\017aggregator_addr\030\002 \001(\t\"\033\n\rCance"
  "lRequest\022\n\n\002id\030\001 \001(\t\".\n\017GetProofRequest\022"
  "\n\n\002id\030\001 \001(\t\022\017\n\007timeout\030\002 \001(\004\"\227\004\n\021GetStat"
  "usResponse\0227\n\006status\030\001 \001(\0162\'.aggregator."
  "v1.GetStatusResponse.Status\022 \n\030last_comp"
  "uted_request_id\030\002 \001(\t\022\036\n\026last_computed_e"
  "nd_time\030\003 \001(\004\022$\n\034current_computing_reque"
  "st_id\030\004 \001(\t\022$\n\034current_computing_start_t"
  "ime\030\005 \001(\004\022\025\n\rversion_proto\030\006 \001(\t\022\026\n\016vers"
  "ion_server\030\007 \001(\t\022!\n\031pending_request_queu"
  "e_ids\030\010 \003(\t\022\023\n\013prover_name\030\t \001(\t\022\021\n\tprov"
  "er_id\030\n \001(\t\022\027\n\017number_of_cores\030\013 \001(\004\022\024\n\014"
  "total_memory\030\014 \001(\004\022\023\n\013free_memory\030\r \001(\004\022"
  "\017\n\007fork_id\030\016 \001(\004\"l\n\006Status\022\026\n\022STATUS_UNS"
  "PECIFIED\020\000\022\022\n\016STATUS_BOOTING\020\001\022\024\n\020STATUS"
  "_COMPUTING\020\002\022\017\n\013STATUS_IDLE\020\003\022\017\n\013STATUS_"
  "HALT\020\004\"J\n\025GenBatchProofResponse\022\n\n\002id\030\001 "
  "\001(\t\022%\n\006result\030\002 \001(\0162\025.aggregator.v1.Resu"
  "lt\"O\n\032GenAggregatedProofResponse\022\n\n\002id\030\001"
  " \001(\t\022%\n\006result\030\002 \001(\0162\025.aggregator.v1.Res"
  "ult\"J\n\025GenFinalProofResponse\022\n\n\002id\030\001 \001(\t"
  "\022%\n\006result\030\002 \001(\0162\025.aggregator.v1.Result\""
  "7\n\016CancelResponse\022%\n\006result\030\001 \001(\0162\025.aggr"
  "egator.v1.Result\"\357\002\n\020GetProofResponse\022\n\n"
  "\002id\030\001 \001(\t\0220\n\013final_proof\030\002 \001(\0132\031.aggrega"
  "tor.v1.FinalProofH\000\022\031\n\017recursive_proof\030\003"
  " \001(\tH\000\0226\n\006result\030\004 \001(\0162&.aggregator.v1.G"
  "etProofResponse.Result\022\025\n\rresult_string\030"
  "\005 \001(\t\"\251\001\n\006Result\022\026\n\022RESULT_UNSPECIFIED\020\000"
  "\022\027\n\023RESULT_COMPLETED_OK\020\001\022\020\n\014RESULT_ERRO"
  "R\020\002\022\032\n\026RESULT_COMPLETED_ERROR\020\003\022\022\n\016RESUL"
  "T_PENDING\020\004\022\031\n\025RESULT_INTERNAL_ERROR\020\005\022\021"
  "\n\rRESULT_CANCEL\020\006B\007\n\005proof\"P\n\nFinalProof"
  "\022\r\n\005proof\030\001 \001(\t\0223\n\006public\030\002 \001(\0132#.aggreg"
  "ator.v1.PublicInputsExtended\"\252\003\n\014PublicI"
  "nputs\022\026\n\016old_state_root\030\001 \001(\014\022\032\n\022old_acc"
  "_input_hash\030\002 \001(\014\022\025\n\rold_batch_num\030\003 \001(\004"
  "\022\020\n\010chain_id\030\004 \001(\004\022\017\n\007fork_id\030\005 \001(\004\022\025\n\rb"
  "atch_l2_data\030\006 \001(\014\022\024\n\014l1_info_root\030\007 \001(\014"
  "\022\027\n\017timestamp_limit\030\010 \001(\004\022\026\n\016sequencer_a"
  "ddr\030\t \001(\t\022\033\n\023forced_blockhash_l1\030\n \001(\014\022\027"
  "\n\017aggregator_addr\030\014 \001(\t\022J\n\021l1_info_tree_"
  "data\030\020 \003(\0132/.aggregator.v1.PublicInputs."
  "L1InfoTreeDataEntry\032L\n\023L1InfoTreeDataEnt"
  "ry\022\013\n\003key\030\001 \001(\r\022$\n\005value\030\002 \001(\0132\025.aggrega"
  "tor.v1.L1Data:\0028\001\"\265\003\n\025StatelessPublicInp"
  "uts\022\017\n\007witness\030\001 \001(\014\022\032\n\022old_acc_input_ha"
  "sh\030\002 \001(\014\022\025\n\rold_batch_num\030\003 \001(\004\022\020\n\010chain"
  "_id\030\004 \001(\004\022\017\n\007fork_id\030\005 \001(\004\022\025\n\rbatch_l2_d"
  "ata\030\006 \001(\014\022\024\n\014l1_info_root\030\007 \001(\014\022\027\n\017times"
  "tamp_limit\030\010 \001(\004\022\026\n\016sequencer_addr\030\t \001(\t"
  "\022\033\n\023forced_blockhash_l1\030\n \001(\014\022\027\n\017aggrega"
  "tor_addr\030\013 \001(\t\022S\n\021l1_info_tree_data\030\014 \003("
  "\01328.aggregator.v1.StatelessPublicInputs."
  "L1InfoTreeDataEntry\032L\n\023L1InfoTreeDataEnt"
  "ry\022\013\n\003key\030\001 \001(\r\022$\n\005value\030\002 \001(\0132\025.aggrega"
  "tor.v1.L1Data:\0028\001\"b\n\006L1Data\022\030\n\020global_ex"
  "it_root\030\001 \001(\014\022\024\n\014blockhash_l1\030\002 \001(\014\022\025\n\rm"
  "in_timestamp\030\003 \001(\r\022\021\n\tsmt_proof\030\004 \003(\014\"\245\002"
  "\n\013InputProver\0222\n\rpublic_inputs\030\001 \001(\0132\033.a"
  "ggregator.v1.PublicInputs\022.\n\002db\030\004 \003(\0132\"."
  "aggregator.v1.InputProver.DbEntry\022M\n\022con"
  "tracts_bytecode\030\005 \003(\01321.aggregator.v1.In"
  "putProver.ContractsBytecodeEntry\032)\n\007DbEn"
  "try\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\0328\n\026C"
  "ontractsBytecodeEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
  "lue\030\002 \001(\t:\0028\001\"S\n\024StatelessInputProver\022;\n"
  "\rpublic_inputs\030\001 \001(\0132$.aggregator.v1.Sta"
  "telessPublicInputs\"\262\001\n\024PublicInputsExten"
  "ded\0222\n\rpublic_inputs\030\001 \001(\0132\033.aggregator."
  "v1.PublicInputs\022\026\n\016new_state_root\030\002 \001(\014\022"
  "\032\n\022new_acc_input_hash\030\003 \001(\014\022\033\n\023new_local"
  "_exit_root\030\004 \001(\014\022\025\n\rnew_batch_num\030\005 \001(\004*"
  "\\\n\006Result\022\026\n\022RESULT_UNSPECIFIED\020\000\022\r\n\tRES"
  "ULT_OK\020\001\022\020\n\014RESULT_ERROR\020\002\022\031\n\025RESULT_INT"
  "ERNAL_ERROR\020\0032d\n\021AggregatorService\022O\n\007Ch"
  "annel\022\034.aggregator.v1.ProverMessage\032 .ag"
  "gregator.v1.AggregatorMessage\"\000(\0010\001B;Z9g"
  "ithub.com/0xPolygonHermez/zkevm-node/pro"
  "verclient/proverb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_aggregator_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_aggregator_2eproto = {
    false, false, 4544, descriptor_table_protodef_aggregator_2eproto,
    "aggregator.proto",
    &descriptor_table_aggregator_2eproto_once, nullptr, 0, 27,
    schemas, file_default_instances, TableStruct_aggregator_2eproto::offsets,
    file_level_metadata_aggregator_2eproto, file_level_enum_descriptors_aggregator_2eproto,
    file_level_service_descriptors_aggregator_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_aggregator_2eproto_getter() {
  return &descriptor_table_aggregator_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_aggregator_2eproto(&descriptor_table_aggregator_2eproto);
namespace aggregator {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetStatusResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_aggregator_2eproto);
  return file_level_enum_descriptors_aggregator_2eproto[0];
}
bool GetStatusResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GetStatusResponse_Status GetStatusResponse::STATUS_UNSPECIFIED;
constexpr GetStatusResponse_Status GetStatusResponse::STATUS_BOOTING;
constexpr GetStatusResponse_Status GetStatusResponse::STATUS_COMPUTING;
constexpr GetStatusResponse_Status GetStatusResponse::STATUS_IDLE;
constexpr GetStatusResponse_Status GetStatusResponse::STATUS_HALT;
constexpr GetStatusResponse_Status GetStatusResponse::Status_MIN;
constexpr GetStatusResponse_Status GetStatusResponse::Status_MAX;
constexpr int GetStatusResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetProofResponse_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_aggregator_2eproto);
  return file_level_enum_descriptors_aggregator_2eproto[1];
}
bool GetProofResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GetProofResponse_Result GetProofResponse::RESULT_UNSPECIFIED;
constexpr GetProofResponse_Result GetProofResponse::RESULT_COMPLETED_OK;
constexpr GetProofResponse_Result GetProofResponse::RESULT_ERROR;
constexpr GetProofResponse_Result GetProofResponse::RESULT_COMPLETED_ERROR;
constexpr GetProofResponse_Result GetProofResponse::RESULT_PENDING;
constexpr GetProofResponse_Result GetProofResponse::RESULT_INTERNAL_ERROR;
constexpr GetProofResponse_Result GetProofResponse::RESULT_CANCEL;
constexpr GetProofResponse_Result GetProofResponse::Result_MIN;
constexpr GetProofResponse_Result GetProofResponse::Result_MAX;
constexpr int GetProofResponse::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_aggregator_2eproto);
  return file_level_enum_descriptors_aggregator_2eproto[2];
}
bool Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Version::_Internal {
 public:
};

Version::Version(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aggregator.v1.Version)
}
Version::Version(const Version& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Version* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.v0_0_1_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.v0_0_1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.v0_0_1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_v0_0_1().empty()) {
    _this->_impl_.v0_0_1_.Set(from._internal_v0_0_1(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:aggregator.v1.Version)
}

inline void Version::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.v0_0_1_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.v0_0_1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.v0_0_1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Version::~Version() {
  // @@protoc_insertion_point(destructor:aggregator.v1.Version)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Version::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.v0_0_1_.Destroy();
}

void Version::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Version::Clear() {
// @@protoc_insertion_point(message_clear_start:aggregator.v1.Version)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.v0_0_1_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Version::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string v0_0_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_v0_0_1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aggregator.v1.Version.v0_0_1"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Version::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aggregator.v1.Version)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string v0_0_1 = 1;
  if (!this->_internal_v0_0_1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_v0_0_1().data(), static_cast<int>(this->_internal_v0_0_1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aggregator.v1.Version.v0_0_1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_v0_0_1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aggregator.v1.Version)
  return target;
}

size_t Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aggregator.v1.Version)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string v0_0_1 = 1;
  if (!this->_internal_v0_0_1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_v0_0_1());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Version::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Version::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Version::GetClassData() const { return &_class_data_; }


void Version::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Version*>(&to_msg);
  auto& from = static_cast<const Version&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aggregator.v1.Version)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_v0_0_1().empty()) {
    _this->_internal_set_v0_0_1(from._internal_v0_0_1());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Version::CopyFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aggregator.v1.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Version::IsInitialized() const {
  return true;
}

void Version::InternalSwap(Version* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.v0_0_1_, lhs_arena,
      &other->_impl_.v0_0_1_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Version::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aggregator_2eproto_getter, &descriptor_table_aggregator_2eproto_once,
      file_level_metadata_aggregator_2eproto[0]);
}

// ===================================================================

class AggregatorMessage::_Internal {
 public:
  static const ::aggregator::v1::GetStatusRequest& get_status_request(const AggregatorMessage* msg);
  static const ::aggregator::v1::GenBatchProofRequest& gen_batch_proof_request(const AggregatorMessage* msg);
  static const ::aggregator::v1::GenAggregatedProofRequest& gen_aggregated_proof_request(const AggregatorMessage* msg);
  static const ::aggregator::v1::GenFinalProofRequest& gen_final_proof_request(const AggregatorMessage* msg);
  static const ::aggregator::v1::CancelRequest& cancel_request(const AggregatorMessage* msg);
  static const ::aggregator::v1::GetProofRequest& get_proof_request(const AggregatorMessage* msg);
  static const ::aggregator::v1::GenStatelessBatchProofRequest& gen_stateless_batch_proof_request(const AggregatorMessage* msg);
};

const ::aggregator::v1::GetStatusRequest&
AggregatorMessage::_Internal::get_status_request(const AggregatorMessage* msg) {
  return *msg->_impl_.request_.get_status_request_;
}
const ::aggregator::v1::GenBatchProofRequest&
AggregatorMessage::_Internal::gen_batch_proof_request(const AggregatorMessage* msg) {
  return *msg->_impl_.request_.gen_batch_proof_request_;
}
const ::aggregator::v1::GenAggregatedProofRequest&
AggregatorMessage::_Internal::gen_aggregated_proof_request(const AggregatorMessage* msg) {
  return *msg->_impl_.request_.gen_aggregated_proof_request_;
}
const ::aggregator::v1::GenFinalProofRequest&
AggregatorMessage::_Internal::gen_final_proof_request(const AggregatorMessage* msg) {
  return *msg->_impl_.request_.gen_final_proof_request_;
}
const ::aggregator::v1::CancelRequest&
AggregatorMessage::_Internal::cancel_request(const AggregatorMessage* msg) {
  return *msg->_impl_.request_.cancel_request_;
}
const ::aggregator::v1::GetProofRequest&
AggregatorMessage::_Internal::get_proof_request(const AggregatorMessage* msg) {
  return *msg->_impl_.request_.get_proof_request_;
}
const ::aggregator::v1::GenStatelessBatchProofRequest&
AggregatorMessage::_Internal::gen_stateless_batch_proof_request(const AggregatorMessage* msg) {
  return *msg->_impl_.request_.gen_stateless_batch_proof_request_;
}
void AggregatorMessage::set_allocated_get_status_request(::aggregator::v1::GetStatusRequest* get_status_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (get_status_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_status_request);
    if (message_arena != submessage_arena) {
      get_status_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_status_request, submessage_arena);
    }
    set_has_get_status_request();
    _impl_.request_.get_status_request_ = get_status_request;
  }
  // @@protoc_insertion_point(field_set_allocated:aggregator.v1.AggregatorMessage.get_status_request)
}
void AggregatorMessage::set_allocated_gen_batch_proof_request(::aggregator::v1::GenBatchProofRequest* gen_batch_proof_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (gen_batch_proof_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gen_batch_proof_request);
    if (message_arena != submessage_arena) {
      gen_batch_proof_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gen_batch_proof_request, submessage_arena);
    }
    set_has_gen_batch_proof_request();
    _impl_.request_.gen_batch_proof_request_ = gen_batch_proof_request;
  }
  // @@protoc_insertion_point(field_set_allocated:aggregator.v1.AggregatorMessage.gen_batch_proof_request)
}
void AggregatorMessage::set_allocated_gen_aggregated_proof_request(::aggregator::v1::GenAggregatedProofRequest* gen_aggregated_proof_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (gen_aggregated_proof_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gen_aggregated_proof_request);
    if (message_arena != submessage_arena) {
      gen_aggregated_proof_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gen_aggregated_proof_request, submessage_arena);
    }
    set_has_gen_aggregated_proof_request();
    _impl_.request_.gen_aggregated_proof_request_ = gen_aggregated_proof_request;
  }
  // @@protoc_insertion_point(field_set_allocated:aggregator.v1.AggregatorMessage.gen_aggregated_proof_request)
}
void AggregatorMessage::set_allocated_gen_final_proof_request(::aggregator::v1::GenFinalProofRequest* gen_final_proof_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (gen_final_proof_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gen_final_proof_request);
    if (message_arena != submessage_arena) {
      gen_final_proof_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gen_final_proof_request, submessage_arena);
    }
    set_has_gen_final_proof_request();
    _impl_.request_.gen_final_proof_request_ = gen_final_proof_request;
  }
  // @@protoc_insertion_point(field_set_allocated:aggregator.v1.AggregatorMessage.gen_final_proof_request)
}
void AggregatorMessage::set_allocated_cancel_request(::aggregator::v1::CancelRequest* cancel_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (cancel_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cancel_request);
    if (message_arena != submessage_arena) {
      cancel_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancel_request, submessage_arena);
    }
    set_has_cancel_request();
    _impl_.request_.cancel_request_ = cancel_request;
  }
  // @@protoc_insertion_point(field_set_allocated:aggregator.v1.AggregatorMessage.cancel_request)
}
void AggregatorMessage::set_allocated_get_proof_request(::aggregator::v1::GetProofRequest* get_proof_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (get_proof_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_proof_request);
    if (message_arena != submessage_arena) {
      get_proof_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_proof_request, submessage_arena);
    }
    set_has_get_proof_request();
    _impl_.request_.get_proof_request_ = get_proof_request;
  }
  // @@protoc_insertion_point(field_set_allocated:aggregator.v1.AggregatorMessage.get_proof_request)
}
void AggregatorMessage::set_allocated_gen_stateless_batch_proof_request(::aggregator::v1::GenStatelessBatchProofRequest* gen_stateless_batch_proof_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (gen_stateless_batch_proof_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gen_stateless_batch_proof_request);
    if (message_arena != submessage_arena) {
      gen_stateless_batch_proof_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gen_stateless_batch_proof_request, submessage_arena);
    }
    set_has_gen_stateless_batch_proof_request();
    _impl_.request_.gen_stateless_batch_proof_request_ = gen_stateless_batch_proof_request;
  }
  // @@protoc_insertion_point(field_set_allocated:aggregator.v1.AggregatorMessage.gen_stateless_batch_proof_request)
}
AggregatorMessage::AggregatorMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aggregator.v1.AggregatorMessage)
}
AggregatorMessage::AggregatorMessage(const AggregatorMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AggregatorMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.request_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  clear_has_request();
  switch (from.request_case()) {
    case kGetStatusRequest: {
      _this->_internal_mutable_get_status_request()->::aggregator::v1::GetStatusRequest::MergeFrom(
          from._internal_get_status_request());
      break;
    }
    case kGenBatchProofRequest: {
      _this->_internal_mutable_gen_batch_proof_request()->::aggregator::v1::GenBatchProofRequest::MergeFrom(
          from._internal_gen_batch_proof_request());
      break;
    }
    case kGenAggregatedProofRequest: {
      _this->_internal_mutable_gen_aggregated_proof_request()->::aggregator::v1::GenAggregatedProofRequest::MergeFrom(
          from._internal_gen_aggregated_proof_request());
      break;
    }
    case kGenFinalProofRequest: {
      _this->_internal_mutable_gen_final_proof_request()->::aggregator::v1::GenFinalProofRequest::MergeFrom(
          from._internal_gen_final_proof_request());
      break;
    }
    case kCancelRequest: {
      _this->_internal_mutable_cancel_request()->::aggregator::v1::CancelRequest::MergeFrom(
          from._internal_cancel_request());
      break;
    }
    case kGetProofRequest: {
      _this->_internal_mutable_get_proof_request()->::aggregator::v1::GetProofRequest::MergeFrom(
          from._internal_get_proof_request());
      break;
    }
    case kGenStatelessBatchProofRequest: {
      _this->_internal_mutable_gen_stateless_batch_proof_request()->::aggregator::v1::GenStatelessBatchProofRequest::MergeFrom(
          from._internal_gen_stateless_batch_proof_request());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aggregator.v1.AggregatorMessage)
}

inline void AggregatorMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.request_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_request();
}

AggregatorMessage::~AggregatorMessage() {
  // @@protoc_insertion_point(destructor:aggregator.v1.AggregatorMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AggregatorMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  if (has_request()) {
    clear_request();
  }
}

void AggregatorMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AggregatorMessage::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:aggregator.v1.AggregatorMessage)
  switch (request_case()) {
    case kGetStatusRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.get_status_request_;
      }
      break;
    }
    case kGenBatchProofRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.gen_batch_proof_request_;
      }
      break;
    }
    case kGenAggregatedProofRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.gen_aggregated_proof_request_;
      }
      break;
    }
    case kGenFinalProofRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.gen_final_proof_request_;
      }
      break;
    }
    case kCancelRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.cancel_request_;
      }
      break;
    }
    case kGetProofRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.get_proof_request_;
      }
      break;
    }
    case kGenStatelessBatchProofRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.gen_stateless_batch_proof_request_;
      }
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REQUEST_NOT_SET;
}


void AggregatorMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:aggregator.v1.AggregatorMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  clear_request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggregatorMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aggregator.v1.AggregatorMessage.id"));
        } else
          goto handle_unusual;
        continue;
      // .aggregator.v1.GetStatusRequest get_status_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_status_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .aggregator.v1.GenBatchProofRequest gen_batch_proof_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gen_batch_proof_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .aggregator.v1.GenAggregatedProofRequest gen_aggregated_proof_request = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_gen_aggregated_proof_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .aggregator.v1.GenFinalProofRequest gen_final_proof_request = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_gen_final_proof_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .aggregator.v1.CancelRequest cancel_request = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancel_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .aggregator.v1.GetProofRequest get_proof_request = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_proof_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .aggregator.v1.GenStatelessBatchProofRequest gen_stateless_batch_proof_request = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_gen_stateless_batch_proof_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AggregatorMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aggregator.v1.AggregatorMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aggregator.v1.AggregatorMessage.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .aggregator.v1.GetStatusRequest get_status_request = 2;
  if (_internal_has_get_status_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::get_status_request(this),
        _Internal::get_status_request(this).GetCachedSize(), target, stream);
  }

  // .aggregator.v1.GenBatchProofRequest gen_batch_proof_request = 3;
  if (_internal_has_gen_batch_proof_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::gen_batch_proof_request(this),
        _Internal::gen_batch_proof_request(this).GetCachedSize(), target, stream);
  }

  // .aggregator.v1.GenAggregatedProofRequest gen_aggregated_proof_request = 4;
  if (_internal_has_gen_aggregated_proof_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::gen_aggregated_proof_request(this),
        _Internal::gen_aggregated_proof_request(this).GetCachedSize(), target, stream);
  }

  // .aggregator.v1.GenFinalProofRequest gen_final_proof_request = 5;
  if (_internal_has_gen_final_proof_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::gen_final_proof_request(this),
        _Internal::gen_final_proof_request(this).GetCachedSize(), target, stream);
  }

  // .aggregator.v1.CancelRequest cancel_request = 6;
  if (_internal_has_cancel_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::cancel_request(this),
        _Internal::cancel_request(this).GetCachedSize(), target, stream);
  }

  // .aggregator.v1.GetProofRequest get_proof_request = 7;
  if (_internal_has_get_proof_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::get_proof_request(this),
        _Internal::get_proof_request(this).GetCachedSize(), target, stream);
  }

  // .aggregator.v1.GenStatelessBatchProofRequest gen_stateless_batch_proof_request = 8;
  if (_internal_has_gen_stateless_batch_proof_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::gen_stateless_batch_proof_request(this),
        _Internal::gen_stateless_batch_proof_request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aggregator.v1.AggregatorMessage)
  return target;
}

size_t AggregatorMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aggregator.v1.AggregatorMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  switch (request_case()) {
    // .aggregator.v1.GetStatusRequest get_status_request = 2;
    case kGetStatusRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.get_status_request_);
      break;
    }
    // .aggregator.v1.GenBatchProofRequest gen_batch_proof_request = 3;
    case kGenBatchProofRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.gen_batch_proof_request_);
      break;
    }
    // .aggregator.v1.GenAggregatedProofRequest gen_aggregated_proof_request = 4;
    case kGenAggregatedProofRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.gen_aggregated_proof_request_);
      break;
    }
    // .aggregator.v1.GenFinalProofRequest gen_final_proof_request = 5;
    case kGenFinalProofRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.gen_final_proof_request_);
      break;
    }
    // .aggregator.v1.CancelRequest cancel_request = 6;
    case kCancelRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.cancel_request_);
      break;
    }
    // .aggregator.v1.GetProofRequest get_proof_request = 7;
    case kGetProofRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.get_proof_request_);
      break;
    }
    // .aggregator.v1.GenStatelessBatchProofRequest gen_stateless_batch_proof_request = 8;
    case kGenStatelessBatchProofRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.gen_stateless_batch_proof_request_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AggregatorMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AggregatorMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AggregatorMessage::GetClassData() const { return &_class_data_; }


void AggregatorMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AggregatorMessage*>(&to_msg);
  auto& from = static_cast<const AggregatorMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aggregator.v1.AggregatorMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  switch (from.request_case()) {
    case kGetStatusRequest: {
      _this->_internal_mutable_get_status_request()->::aggregator::v1::GetStatusRequest::MergeFrom(
          from._internal_get_status_request());
      break;
    }
    case kGenBatchProofRequest: {
      _this->_internal_mutable_gen_batch_proof_request()->::aggregator::v1::GenBatchProofRequest::MergeFrom(
          from._internal_gen_batch_proof_request());
      break;
    }
    case kGenAggregatedProofRequest: {
      _this->_internal_mutable_gen_aggregated_proof_request()->::aggregator::v1::GenAggregatedProofRequest::MergeFrom(
          from._internal_gen_aggregated_proof_request());
      break;
    }
    case kGenFinalProofRequest: {
      _this->_internal_mutable_gen_final_proof_request()->::aggregator::v1::GenFinalProofRequest::MergeFrom(
          from._internal_gen_final_proof_request());
      break;
    }
    case kCancelRequest: {
      _this->_internal_mutable_cancel_request()->::aggregator::v1::CancelRequest::MergeFrom(
          from._internal_cancel_request());
      break;
    }
    case kGetProofRequest: {
      _this->_internal_mutable_get_proof_request()->::aggregator::v1::GetProofRequest::MergeFrom(
          from._internal_get_proof_request());
      break;
    }
    case kGenStatelessBatchProofRequest: {
      _this->_internal_mutable_gen_stateless_batch_proof_request()->::aggregator::v1::GenStatelessBatchProofRequest::MergeFrom(
          from._internal_gen_stateless_batch_proof_request());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AggregatorMessage::CopyFrom(const AggregatorMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aggregator.v1.AggregatorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregatorMessage::IsInitialized() const {
  return true;
}

void AggregatorMessage::InternalSwap(AggregatorMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.request_, other->_impl_.request_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AggregatorMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aggregator_2eproto_getter, &descriptor_table_aggregator_2eproto_once,
      file_level_metadata_aggregator_2eproto[1]);
}

// ===================================================================

class ProverMessage::_Internal {
 public:
  static const ::aggregator::v1::GetStatusResponse& get_status_response(const ProverMessage* msg);
  static const ::aggregator::v1::GenBatchProofResponse& gen_batch_proof_response(const ProverMessage* msg);
  static const ::aggregator::v1::GenAggregatedProofResponse& gen_aggregated_proof_response(const ProverMessage* msg);
  static const ::aggregator::v1::GenFinalProofResponse& gen_final_proof_response(const ProverMessage* msg);
  static const ::aggregator::v1::CancelResponse& cancel_response(const ProverMessage* msg);
  static const ::aggregator::v1::GetProofResponse& get_proof_response(const ProverMessage* msg);
};

const ::aggregator::v1::GetStatusResponse&
ProverMessage::_Internal::get_status_response(const ProverMessage* msg) {
  return *msg->_impl_.response_.get_status_response_;
}
const ::aggregator::v1::GenBatchProofResponse&
ProverMessage::_Internal::gen_batch_proof_response(const ProverMessage* msg) {
  return *msg->_impl_.response_.gen_batch_proof_response_;
}
const ::aggregator::v1::GenAggregatedProofResponse&
ProverMessage::_Internal::gen_aggregated_proof_response(const ProverMessage* msg) {
  return *msg->_impl_.response_.gen_aggregated_proof_response_;
}
const ::aggregator::v1::GenFinalProofResponse&
ProverMessage::_Internal::gen_final_proof_response(const ProverMessage* msg) {
  return *msg->_impl_.response_.gen_final_proof_response_;
}
const ::aggregator::v1::CancelResponse&
ProverMessage::_Internal::cancel_response(const ProverMessage* msg) {
  return *msg->_impl_.response_.cancel_response_;
}
const ::aggregator::v1::GetProofResponse&
ProverMessage::_Internal::get_proof_response(const ProverMessage* msg) {
  return *msg->_impl_.response_.get_proof_response_;
}
void ProverMessage::set_allocated_get_status_response(::aggregator::v1::GetStatusResponse* get_status_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (get_status_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_status_response);
    if (message_arena != submessage_arena) {
      get_status_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_status_response, submessage_arena);
    }
    set_has_get_status_response();
    _impl_.response_.get_status_response_ = get_status_response;
  }
  // @@protoc_insertion_point(field_set_allocated:aggregator.v1.ProverMessage.get_status_response)
}
void ProverMessage::set_allocated_gen_batch_proof_response(::aggregator::v1::GenBatchProofResponse* gen_batch_proof_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (gen_batch_proof_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gen_batch_proof_response);
    if (message_arena != submessage_arena) {
      gen_batch_proof_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gen_batch_proof_response, submessage_arena);
    }
    set_has_gen_batch_proof_response();
    _impl_.response_.gen_batch_proof_response_ = gen_batch_proof_response;
  }
  // @@protoc_insertion_point(field_set_allocated:aggregator.v1.ProverMessage.gen_batch_proof_response)
}
void ProverMessage::set_allocated_gen_aggregated_proof_response(::aggregator::v1::GenAggregatedProofResponse* gen_aggregated_proof_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (gen_aggregated_proof_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gen_aggregated_proof_response);
    if (message_arena != submessage_arena) {
      gen_aggregated_proof_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gen_aggregated_proof_response, submessage_arena);
    }
    set_has_gen_aggregated_proof_response();
    _impl_.response_.gen_aggregated_proof_response_ = gen_aggregated_proof_response;
  }
  // @@protoc_insertion_point(field_set_allocated:aggregator.v1.ProverMessage.gen_aggregated_proof_response)
}
void ProverMessage::set_allocated_gen_final_proof_response(::aggregator::v1::GenFinalProofResponse* gen_final_proof_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (gen_final_proof_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gen_final_proof_response);
    if (message_arena != submessage_arena) {
      gen_final_proof_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gen_final_proof_response, submessage_arena);
    }
    set_has_gen_final_proof_response();
    _impl_.response_.gen_final_proof_response_ = gen_final_proof_response;
  }
  // @@protoc_insertion_point(field_set_allocated:aggregator.v1.ProverMessage.gen_final_proof_response)
}
void ProverMessage::set_allocated_cancel_response(::aggregator::v1::CancelResponse* cancel_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (cancel_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cancel_response);
    if (message_arena != submessage_arena) {
      cancel_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancel_response, submessage_arena);
    }
    set_has_cancel_response();
    _impl_.response_.cancel_response_ = cancel_response;
  }
  // @@protoc_insertion_point(field_set_allocated:aggregator.v1.ProverMessage.cancel_response)
}
void ProverMessage::set_allocated_get_proof_response(::aggregator::v1::GetProofResponse* get_proof_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (get_proof_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_proof_response);
    if (message_arena != submessage_arena) {
      get_proof_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_proof_response, submessage_arena);
    }
    set_has_get_proof_response();
    _impl_.response_.get_proof_response_ = get_proof_response;
  }
  // @@protoc_insertion_point(field_set_allocated:aggregator.v1.ProverMessage.get_proof_response)
}
ProverMessage::ProverMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aggregator.v1.ProverMessage)
}
ProverMessage::ProverMessage(const ProverMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProverMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.response_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  clear_has_response();
  switch (from.response_case()) {
    case kGetStatusResponse: {
      _this->_internal_mutable_get_status_response()->::aggregator::v1::GetStatusResponse::MergeFrom(
          from._internal_get_status_response());
      break;
    }
    case kGenBatchProofResponse: {
      _this->_internal_mutable_gen_batch_proof_response()->::aggregator::v1::GenBatchProofResponse::MergeFrom(
          from._internal_gen_batch_proof_response());
      break;
    }
    case kGenAggregatedProofResponse: {
      _this->_internal_mutable_gen_aggregated_proof_response()->::aggregator::v1::GenAggregatedProofResponse::MergeFrom(
          from._internal_gen_aggregated_proof_response());
      break;
    }
    case kGenFinalProofResponse: {
      _this->_internal_mutable_gen_final_proof_response()->::aggregator::v1::GenFinalProofResponse::MergeFrom(
          from._internal_gen_final_proof_response());
      break;
    }
    case kCancelResponse: {
      _this->_internal_mutable_cancel_response()->::aggregator::v1::CancelResponse::MergeFrom(
          from._internal_cancel_response());
      break;
    }
    case kGetProofResponse: {
      _this->_internal_mutable_get_proof_response()->::aggregator::v1::GetProofResponse::MergeFrom(
          from._internal_get_proof_response());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aggregator.v1.ProverMessage)
}

inline void ProverMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.response_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_response();
}

ProverMessage::~ProverMessage() {
  // @@protoc_insertion_point(destructor:aggregator.v1.ProverMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProverMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  if (has_response()) {
    clear_response();
  }
}

void ProverMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProverMessage::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:aggregator.v1.ProverMessage)
  switch (response_case()) {
    case kGetStatusResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.get_status_response_;
      }
      break;
    }
    case kGenBatchProofResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.gen_batch_proof_response_;
      }
      break;
    }
    case kGenAggregatedProofResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.gen_aggregated_proof_response_;
      }
      break;
    }
    case kGenFinalProofResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.gen_final_proof_response_;
      }
      break;
    }
    case kCancelResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.cancel_response_;
      }
      break;
    }
    case kGetProofResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.get_proof_response_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RESPONSE_NOT_SET;
}


void ProverMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:aggregator.v1.ProverMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProverMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aggregator.v1.ProverMessage.id"));
        } else
          goto handle_unusual;
        continue;
      // .aggregator.v1.GetStatusResponse get_status_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_status_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .aggregator.v1.GenBatchProofResponse gen_batch_proof_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gen_batch_proof_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .aggregator.v1.GenAggregatedProofResponse gen_aggregated_proof_response = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_gen_aggregated_proof_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .aggregator.v1.GenFinalProofResponse gen_final_proof_response = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_gen_final_proof_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .aggregator.v1.CancelResponse cancel_response = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancel_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .aggregator.v1.GetProofResponse get_proof_response = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_proof_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProverMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aggregator.v1.ProverMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aggregator.v1.ProverMessage.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .aggregator.v1.GetStatusResponse get_status_response = 2;
  if (_internal_has_get_status_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::get_status_response(this),
        _Internal::get_status_response(this).GetCachedSize(), target, stream);
  }

  // .aggregator.v1.GenBatchProofResponse gen_batch_proof_response = 3;
  if (_internal_has_gen_batch_proof_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::gen_batch_proof_response(this),
        _Internal::gen_batch_proof_response(this).GetCachedSize(), target, stream);
  }

  // .aggregator.v1.GenAggregatedProofResponse gen_aggregated_proof_response = 4;
  if (_internal_has_gen_aggregated_proof_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::gen_aggregated_proof_response(this),
        _Internal::gen_aggregated_proof_response(this).GetCachedSize(), target, stream);
  }

  // .aggregator.v1.GenFinalProofResponse gen_final_proof_response = 5;
  if (_internal_has_gen_final_proof_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::gen_final_proof_response(this),
        _Internal::gen_final_proof_response(this).GetCachedSize(), target, stream);
  }

  // .aggregator.v1.CancelResponse cancel_response = 6;
  if (_internal_has_cancel_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::cancel_response(this),
        _Internal::cancel_response(this).GetCachedSize(), target, stream);
  }

  // .aggregator.v1.GetProofResponse get_proof_response = 7;
  if (_internal_has_get_proof_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::get_proof_response(this),
        _Internal::get_proof_response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aggregator.v1.ProverMessage)
  return target;
}

size_t ProverMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aggregator.v1.ProverMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  switch (response_case()) {
    // .aggregator.v1.GetStatusResponse get_status_response = 2;
    case kGetStatusResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.get_status_response_);
      break;
    }
    // .aggregator.v1.GenBatchProofResponse gen_batch_proof_response = 3;
    case kGenBatchProofResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.gen_batch_proof_response_);
      break;
    }
    // .aggregator.v1.GenAggregatedProofResponse gen_aggregated_proof_response = 4;
    case kGenAggregatedProofResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.gen_aggregated_proof_response_);
      break;
    }
    // .aggregator.v1.GenFinalProofResponse gen_final_proof_response = 5;
    case kGenFinalProofResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.gen_final_proof_response_);
      break;
    }
    // .aggregator.v1.CancelResponse cancel_response = 6;
    case kCancelResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.cancel_response_);
      break;
    }
    // .aggregator.v1.GetProofResponse get_proof_response = 7;
    case kGetProofResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.get_proof_response_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProverMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProverMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProverMessage::GetClassData() const { return &_class_data_; }


void ProverMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProverMessage*>(&to_msg);
  auto& from = static_cast<const ProverMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aggregator.v1.ProverMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  switch (from.response_case()) {
    case kGetStatusResponse: {
      _this->_internal_mutable_get_status_response()->::aggregator::v1::GetStatusResponse::MergeFrom(
          from._internal_get_status_response());
      break;
    }
    case kGenBatchProofResponse: {
      _this->_internal_mutable_gen_batch_proof_response()->::aggregator::v1::GenBatchProofResponse::MergeFrom(
          from._internal_gen_batch_proof_response());
      break;
    }
    case kGenAggregatedProofResponse: {
      _this->_internal_mutable_gen_aggregated_proof_response()->::aggregator::v1::GenAggregatedProofResponse::MergeFrom(
          from._internal_gen_aggregated_proof_response());
      break;
    }
    case kGenFinalProofResponse: {
      _this->_internal_mutable_gen_final_proof_response()->::aggregator::v1::GenFinalProofResponse::MergeFrom(
          from._internal_gen_final_proof_response());
      break;
    }
    case kCancelResponse: {
      _this->_internal_mutable_cancel_response()->::aggregator::v1::CancelResponse::MergeFrom(
          from._internal_cancel_response());
      break;
    }
    case kGetProofResponse: {
      _this->_internal_mutable_get_proof_response()->::aggregator::v1::GetProofResponse::MergeFrom(
          from._internal_get_proof_response());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProverMessage::CopyFrom(const ProverMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aggregator.v1.ProverMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProverMessage::IsInitialized() const {
  return true;
}

void ProverMessage::InternalSwap(ProverMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.response_, other->_impl_.response_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProverMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aggregator_2eproto_getter, &descriptor_table_aggregator_2eproto_once,
      file_level_metadata_aggregator_2eproto[2]);
}

// ===================================================================

class GetStatusRequest::_Internal {
 public:
};

GetStatusRequest::GetStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:aggregator.v1.GetStatusRequest)
}
GetStatusRequest::GetStatusRequest(const GetStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetStatusRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aggregator.v1.GetStatusRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetStatusRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetStatusRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetStatusRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aggregator_2eproto_getter, &descriptor_table_aggregator_2eproto_once,
      file_level_metadata_aggregator_2eproto[3]);
}

// ===================================================================

class GenBatchProofRequest::_Internal {
 public:
  static const ::aggregator::v1::InputProver& input(const GenBatchProofRequest* msg);
};

const ::aggregator::v1::InputProver&
GenBatchProofRequest::_Internal::input(const GenBatchProofRequest* msg) {
  return *msg->_impl_.input_;
}
GenBatchProofRequest::GenBatchProofRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aggregator.v1.GenBatchProofRequest)
}
GenBatchProofRequest::GenBatchProofRequest(const GenBatchProofRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenBatchProofRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.input_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_input()) {
    _this->_impl_.input_ = new ::aggregator::v1::InputProver(*from._impl_.input_);
  }
  // @@protoc_insertion_point(copy_constructor:aggregator.v1.GenBatchProofRequest)
}

inline void GenBatchProofRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.input_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GenBatchProofRequest::~GenBatchProofRequest() {
  // @@protoc_insertion_point(destructor:aggregator.v1.GenBatchProofRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenBatchProofRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.input_;
}

void GenBatchProofRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenBatchProofRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aggregator.v1.GenBatchProofRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.input_ != nullptr) {
    delete _impl_.input_;
  }
  _impl_.input_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenBatchProofRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aggregator.v1.InputProver input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GenBatchProofRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aggregator.v1.GenBatchProofRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .aggregator.v1.InputProver input = 1;
  if (this->_internal_has_input()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::input(this),
        _Internal::input(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aggregator.v1.GenBatchProofRequest)
  return target;
}

size_t GenBatchProofRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aggregator.v1.GenBatchProofRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .aggregator.v1.InputProver input = 1;
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenBatchProofRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenBatchProofRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenBatchProofRequest::GetClassData() const { return &_class_data_; }


void GenBatchProofRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenBatchProofRequest*>(&to_msg);
  auto& from = static_cast<const GenBatchProofRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aggregator.v1.GenBatchProofRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_input()) {
    _this->_internal_mutable_input()->::aggregator::v1::InputProver::MergeFrom(
        from._internal_input());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenBatchProofRequest::CopyFrom(const GenBatchProofRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aggregator.v1.GenBatchProofRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenBatchProofRequest::IsInitialized() const {
  return true;
}

void GenBatchProofRequest::InternalSwap(GenBatchProofRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.input_, other->_impl_.input_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenBatchProofRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aggregator_2eproto_getter, &descriptor_table_aggregator_2eproto_once,
      file_level_metadata_aggregator_2eproto[4]);
}

// ===================================================================

class GenStatelessBatchProofRequest::_Internal {
 public:
  static const ::aggregator::v1::StatelessInputProver& input(const GenStatelessBatchProofRequest* msg);
};

const ::aggregator::v1::StatelessInputProver&
GenStatelessBatchProofRequest::_Internal::input(const GenStatelessBatchProofRequest* msg) {
  return *msg->_impl_.input_;
}
GenStatelessBatchProofRequest::GenStatelessBatchProofRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aggregator.v1.GenStatelessBatchProofRequest)
}
GenStatelessBatchProofRequest::GenStatelessBatchProofRequest(const GenStatelessBatchProofRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenStatelessBatchProofRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.input_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_input()) {
    _this->_impl_.input_ = new ::aggregator::v1::StatelessInputProver(*from._impl_.input_);
  }
  // @@protoc_insertion_point(copy_constructor:aggregator.v1.GenStatelessBatchProofRequest)
}

inline void GenStatelessBatchProofRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.input_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GenStatelessBatchProofRequest::~GenStatelessBatchProofRequest() {
  // @@protoc_insertion_point(destructor:aggregator.v1.GenStatelessBatchProofRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenStatelessBatchProofRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.input_;
}

void GenStatelessBatchProofRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenStatelessBatchProofRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aggregator.v1.GenStatelessBatchProofRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.input_ != nullptr) {
    delete _impl_.input_;
  }
  _impl_.input_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenStatelessBatchProofRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aggregator.v1.StatelessInputProver input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GenStatelessBatchProofRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aggregator.v1.GenStatelessBatchProofRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .aggregator.v1.StatelessInputProver input = 1;
  if (this->_internal_has_input()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::input(this),
        _Internal::input(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aggregator.v1.GenStatelessBatchProofRequest)
  return target;
}

size_t GenStatelessBatchProofRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aggregator.v1.GenStatelessBatchProofRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .aggregator.v1.StatelessInputProver input = 1;
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenStatelessBatchProofRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenStatelessBatchProofRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenStatelessBatchProofRequest::GetClassData() const { return &_class_data_; }


void GenStatelessBatchProofRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenStatelessBatchProofRequest*>(&to_msg);
  auto& from = static_cast<const GenStatelessBatchProofRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aggregator.v1.GenStatelessBatchProofRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_input()) {
    _this->_internal_mutable_input()->::aggregator::v1::StatelessInputProver::MergeFrom(
        from._internal_input());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenStatelessBatchProofRequest::CopyFrom(const GenStatelessBatchProofRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aggregator.v1.GenStatelessBatchProofRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenStatelessBatchProofRequest::IsInitialized() const {
  return true;
}

void GenStatelessBatchProofRequest::InternalSwap(GenStatelessBatchProofRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.input_, other->_impl_.input_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenStatelessBatchProofRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aggregator_2eproto_getter, &descriptor_table_aggregator_2eproto_once,
      file_level_metadata_aggregator_2eproto[5]);
}

// ===================================================================

class GenAggregatedProofRequest::_Internal {
 public:
};

GenAggregatedProofRequest::GenAggregatedProofRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aggregator.v1.GenAggregatedProofRequest)
}
GenAggregatedProofRequest::GenAggregatedProofRequest(const GenAggregatedProofRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenAggregatedProofRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.recursive_proof_1_){}
    , decltype(_impl_.recursive_proof_2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.recursive_proof_1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recursive_proof_1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_recursive_proof_1().empty()) {
    _this->_impl_.recursive_proof_1_.Set(from._internal_recursive_proof_1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.recursive_proof_2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recursive_proof_2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_recursive_proof_2().empty()) {
    _this->_impl_.recursive_proof_2_.Set(from._internal_recursive_proof_2(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:aggregator.v1.GenAggregatedProofRequest)
}

inline void GenAggregatedProofRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.recursive_proof_1_){}
    , decltype(_impl_.recursive_proof_2_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.recursive_proof_1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recursive_proof_1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.recursive_proof_2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recursive_proof_2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GenAggregatedProofRequest::~GenAggregatedProofRequest() {
  // @@protoc_insertion_point(destructor:aggregator.v1.GenAggregatedProofRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenAggregatedProofRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.recursive_proof_1_.Destroy();
  _impl_.recursive_proof_2_.Destroy();
}

void GenAggregatedProofRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenAggregatedProofRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aggregator.v1.GenAggregatedProofRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.recursive_proof_1_.ClearToEmpty();
  _impl_.recursive_proof_2_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenAggregatedProofRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string recursive_proof_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_recursive_proof_1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aggregator.v1.GenAggregatedProofRequest.recursive_proof_1"));
        } else
          goto handle_unusual;
        continue;
      // string recursive_proof_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_recursive_proof_2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aggregator.v1.GenAggregatedProofRequest.recursive_proof_2"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GenAggregatedProofRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aggregator.v1.GenAggregatedProofRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string recursive_proof_1 = 1;
  if (!this->_internal_recursive_proof_1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recursive_proof_1().data(), static_cast<int>(this->_internal_recursive_proof_1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aggregator.v1.GenAggregatedProofRequest.recursive_proof_1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_recursive_proof_1(), target);
  }

  // string recursive_proof_2 = 2;
  if (!this->_internal_recursive_proof_2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recursive_proof_2().data(), static_cast<int>(this->_internal_recursive_proof_2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aggregator.v1.GenAggregatedProofRequest.recursive_proof_2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_recursive_proof_2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aggregator.v1.GenAggregatedProofRequest)
  return target;
}

size_t GenAggregatedProofRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aggregator.v1.GenAggregatedProofRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string recursive_proof_1 = 1;
  if (!this->_internal_recursive_proof_1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recursive_proof_1());
  }

  // string recursive_proof_2 = 2;
  if (!this->_internal_recursive_proof_2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recursive_proof_2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenAggregatedProofRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenAggregatedProofRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenAggregatedProofRequest::GetClassData() const { return &_class_data_; }


void GenAggregatedProofRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenAggregatedProofRequest*>(&to_msg);
  auto& from = static_cast<const GenAggregatedProofRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aggregator.v1.GenAggregatedProofRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_recursive_proof_1().empty()) {
    _this->_internal_set_recursive_proof_1(from._internal_recursive_proof_1());
  }
  if (!from._internal_recursive_proof_2().empty()) {
    _this->_internal_set_recursive_proof_2(from._internal_recursive_proof_2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenAggregatedProofRequest::CopyFrom(const GenAggregatedProofRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aggregator.v1.GenAggregatedProofRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenAggregatedProofRequest::IsInitialized() const {
  return true;
}

void GenAggregatedProofRequest::InternalSwap(GenAggregatedProofRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.recursive_proof_1_, lhs_arena,
      &other->_impl_.recursive_proof_1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.recursive_proof_2_, lhs_arena,
      &other->_impl_.recursive_proof_2_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GenAggregatedProofRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aggregator_2eproto_getter, &descriptor_table_aggregator_2eproto_once,
      file_level_metadata_aggregator_2eproto[6]);
}

// ===================================================================

class GenFinalProofRequest::_Internal {
 public:
};

GenFinalProofRequest::GenFinalProofRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aggregator.v1.GenFinalProofRequest)
}
GenFinalProofRequest::GenFinalProofRequest(const GenFinalProofRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenFinalProofRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.recursive_proof_){}
    , decltype(_impl_.aggregator_addr_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.recursive_proof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recursive_proof_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_recursive_proof().empty()) {
    _this->_impl_.recursive_proof_.Set(from._internal_recursive_proof(), 
      _this->GetArenaForAllocation());
  }
  _impl_.aggregator_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aggregator_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_aggregator_addr().empty()) {
    _this->_impl_.aggregator_addr_.Set(from._internal_aggregator_addr(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:aggregator.v1.GenFinalProofRequest)
}

inline void GenFinalProofRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.recursive_proof_){}
    , decltype(_impl_.aggregator_addr_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.recursive_proof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recursive_proof_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.aggregator_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aggregator_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GenFinalProofRequest::~GenFinalProofRequest() {
  // @@protoc_insertion_point(destructor:aggregator.v1.GenFinalProofRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenFinalProofRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.recursive_proof_.Destroy();
  _impl_.aggregator_addr_.Destroy();
}

void GenFinalProofRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenFinalProofRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aggregator.v1.GenFinalProofRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.recursive_proof_.ClearToEmpty();
  _impl_.aggregator_addr_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenFinalProofRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string recursive_proof = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_recursive_proof();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aggregator.v1.GenFinalProofRequest.recursive_proof"));
        } else
          goto handle_unusual;
        continue;
      // string aggregator_addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_aggregator_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aggregator.v1.GenFinalProofRequest.aggregator_addr"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GenFinalProofRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aggregator.v1.GenFinalProofRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string recursive_proof = 1;
  if (!this->_internal_recursive_proof().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recursive_proof().data(), static_cast<int>(this->_internal_recursive_proof().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aggregator.v1.GenFinalProofRequest.recursive_proof");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_recursive_proof(), target);
  }

  // string aggregator_addr = 2;
  if (!this->_internal_aggregator_addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_aggregator_addr().data(), static_cast<int>(this->_internal_aggregator_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aggregator.v1.GenFinalProofRequest.aggregator_addr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_aggregator_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aggregator.v1.GenFinalProofRequest)
  return target;
}

size_t GenFinalProofRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aggregator.v1.GenFinalProofRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string recursive_proof = 1;
  if (!this->_internal_recursive_proof().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recursive_proof());
  }

  // string aggregator_addr = 2;
  if (!this->_internal_aggregator_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_aggregator_addr());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenFinalProofRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenFinalProofRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenFinalProofRequest::GetClassData() const { return &_class_data_; }


void GenFinalProofRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenFinalProofRequest*>(&to_msg);
  auto& from = static_cast<const GenFinalProofRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aggregator.v1.GenFinalProofRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_recursive_proof().empty()) {
    _this->_internal_set_recursive_proof(from._internal_recursive_proof());
  }
  if (!from._internal_aggregator_addr().empty()) {
    _this->_internal_set_aggregator_addr(from._internal_aggregator_addr());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenFinalProofRequest::CopyFrom(const GenFinalProofRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aggregator.v1.GenFinalProofRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenFinalProofRequest::IsInitialized() const {
  return true;
}

void GenFinalProofRequest::InternalSwap(GenFinalProofRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.recursive_proof_, lhs_arena,
      &other->_impl_.recursive_proof_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.aggregator_addr_, lhs_arena,
      &other->_impl_.aggregator_addr_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GenFinalProofRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aggregator_2eproto_getter, &descriptor_table_aggregator_2eproto_once,
      file_level_metadata_aggregator_2eproto[7]);
}

// ===================================================================

class CancelRequest::_Internal {
 public:
};

CancelRequest::CancelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aggregator.v1.CancelRequest)
}
CancelRequest::CancelRequest(const CancelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CancelRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:aggregator.v1.CancelRequest)
}

inline void CancelRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CancelRequest::~CancelRequest() {
  // @@protoc_insertion_point(destructor:aggregator.v1.CancelRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CancelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void CancelRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CancelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aggregator.v1.CancelRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aggregator.v1.CancelRequest.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CancelRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aggregator.v1.CancelRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aggregator.v1.CancelRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aggregator.v1.CancelRequest)
  return target;
}

size_t CancelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aggregator.v1.CancelRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CancelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CancelRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CancelRequest::GetClassData() const { return &_class_data_; }


void CancelRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CancelRequest*>(&to_msg);
  auto& from = static_cast<const CancelRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aggregator.v1.CancelRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CancelRequest::CopyFrom(const CancelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aggregator.v1.CancelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelRequest::IsInitialized() const {
  return true;
}

void CancelRequest::InternalSwap(CancelRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aggregator_2eproto_getter, &descriptor_table_aggregator_2eproto_once,
      file_level_metadata_aggregator_2eproto[8]);
}

// ===================================================================

class GetProofRequest::_Internal {
 public:
};

GetProofRequest::GetProofRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aggregator.v1.GetProofRequest)
}
GetProofRequest::GetProofRequest(const GetProofRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetProofRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.timeout_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.timeout_ = from._impl_.timeout_;
  // @@protoc_insertion_point(copy_constructor:aggregator.v1.GetProofRequest)
}

inline void GetProofRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.timeout_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetProofRequest::~GetProofRequest() {
  // @@protoc_insertion_point(destructor:aggregator.v1.GetProofRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetProofRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void GetProofRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetProofRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:aggregator.v1.GetProofRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.timeout_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProofRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aggregator.v1.GetProofRequest.id"));
        } else
          goto handle_unusual;
        continue;
      // uint64 timeout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetProofRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aggregator.v1.GetProofRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aggregator.v1.GetProofRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // uint64 timeout = 2;
  if (this->_internal_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aggregator.v1.GetProofRequest)
  return target;
}

size_t GetProofRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aggregator.v1.GetProofRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // uint64 timeout = 2;
  if (this->_internal_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timeout());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetProofRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetProofRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetProofRequest::GetClassData() const { return &_class_data_; }


void GetProofRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetProofRequest*>(&to_msg);
  auto& from = static_cast<const GetProofRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aggregator.v1.GetProofRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_timeout() != 0) {
    _this->_internal_set_timeout(from._internal_timeout());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetProofRequest::CopyFrom(const GetProofRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aggregator.v1.GetProofRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProofRequest::IsInitialized() const {
  return true;
}

void GetProofRequest::InternalSwap(GetProofRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.timeout_, other->_impl_.timeout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProofRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aggregator_2eproto_getter, &descriptor_table_aggregator_2eproto_once,
      file_level_metadata_aggregator_2eproto[9]);
}

// ===================================================================

class GetStatusResponse::_Internal {
 public:
};

GetStatusResponse::GetStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aggregator.v1.GetStatusResponse)
}
GetStatusResponse::GetStatusResponse(const GetStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetStatusResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pending_request_queue_ids_){from._impl_.pending_request_queue_ids_}
    , decltype(_impl_.last_computed_request_id_){}
    , decltype(_impl_.current_computing_request_id_){}
    , decltype(_impl_.version_proto_){}
    , decltype(_impl_.version_server_){}
    , decltype(_impl_.prover_name_){}
    , decltype(_impl_.prover_id_){}
    , decltype(_impl_.last_computed_end_time_){}
    , decltype(_impl_.current_computing_start_time_){}
    , decltype(_impl_.number_of_cores_){}
    , decltype(_impl_.total_memory_){}
    , decltype(_impl_.free_memory_){}
    , decltype(_impl_.fork_id_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.last_computed_request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.last_computed_request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_last_computed_request_id().empty()) {
    _this->_impl_.last_computed_request_id_.Set(from._internal_last_computed_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.current_computing_request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.current_computing_request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_current_computing_request_id().empty()) {
    _this->_impl_.current_computing_request_id_.Set(from._internal_current_computing_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_proto_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_proto_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version_proto().empty()) {
    _this->_impl_.version_proto_.Set(from._internal_version_proto(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_server_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_server_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version_server().empty()) {
    _this->_impl_.version_server_.Set(from._internal_version_server(), 
      _this->GetArenaForAllocation());
  }
  _impl_.prover_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prover_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prover_name().empty()) {
    _this->_impl_.prover_name_.Set(from._internal_prover_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.prover_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prover_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prover_id().empty()) {
    _this->_impl_.prover_id_.Set(from._internal_prover_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.last_computed_end_time_, &from._impl_.last_computed_end_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.last_computed_end_time_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:aggregator.v1.GetStatusResponse)
}

inline void GetStatusResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pending_request_queue_ids_){arena}
    , decltype(_impl_.last_computed_request_id_){}
    , decltype(_impl_.current_computing_request_id_){}
    , decltype(_impl_.version_proto_){}
    , decltype(_impl_.version_server_){}
    , decltype(_impl_.prover_name_){}
    , decltype(_impl_.prover_id_){}
    , decltype(_impl_.last_computed_end_time_){uint64_t{0u}}
    , decltype(_impl_.current_computing_start_time_){uint64_t{0u}}
    , decltype(_impl_.number_of_cores_){uint64_t{0u}}
    , decltype(_impl_.total_memory_){uint64_t{0u}}
    , decltype(_impl_.free_memory_){uint64_t{0u}}
    , decltype(_impl_.fork_id_){uint64_t{0u}}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.last_computed_request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.last_computed_request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.current_computing_request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.current_computing_request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_proto_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_proto_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_server_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_server_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.prover_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prover_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.prover_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prover_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetStatusResponse::~GetStatusResponse() {
  // @@protoc_insertion_point(destructor:aggregator.v1.GetStatusResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pending_request_queue_ids_.~RepeatedPtrField();
  _impl_.last_computed_request_id_.Destroy();
  _impl_.current_computing_request_id_.Destroy();
  _impl_.version_proto_.Destroy();
  _impl_.version_server_.Destroy();
  _impl_.prover_name_.Destroy();
  _impl_.prover_id_.Destroy();
}

void GetStatusResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aggregator.v1.GetStatusResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pending_request_queue_ids_.Clear();
  _impl_.last_computed_request_id_.ClearToEmpty();
  _impl_.current_computing_request_id_.ClearToEmpty();
  _impl_.version_proto_.ClearToEmpty();
  _impl_.version_server_.ClearToEmpty();
  _impl_.prover_name_.ClearToEmpty();
  _impl_.prover_id_.ClearToEmpty();
  ::memset(&_impl_.last_computed_end_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.last_computed_end_time_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStatusResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aggregator.v1.GetStatusResponse.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::aggregator::v1::GetStatusResponse_Status>(val));
        } else
          goto handle_unusual;
        continue;
      // string last_computed_request_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_last_computed_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aggregator.v1.GetStatusResponse.last_computed_request_id"));
        } else
          goto handle_unusual;
        continue;
      // uint64 last_computed_end_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.last_computed_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string current_computing_request_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_current_computing_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aggregator.v1.GetStatusResponse.current_computing_request_id"));
        } else
          goto handle_unusual;
        continue;
      // uint64 current_computing_start_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.current_computing_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version_proto = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_version_proto();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aggregator.v1.GetStatusResponse.version_proto"));
        } else
          goto handle_unusual;
        continue;
      // string version_server = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_version_server();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aggregator.v1.GetStatusResponse.version_server"));
        } else
          goto handle_unusual;
        continue;
      // repeated string pending_request_queue_ids = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_pending_request_queue_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "aggregator.v1.GetStatusResponse.pending_request_queue_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string prover_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_prover_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aggregator.v1.GetStatusResponse.prover_name"));
        } else
          goto handle_unusual;
        continue;
      // string prover_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_prover_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aggregator.v1.GetStatusResponse.prover_id"));
        } else
          goto handle_unusual;
        continue;
      // uint64 number_of_cores = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.number_of_cores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 total_memory = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.total_memory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 free_memory = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.free_memory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 fork_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.fork_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetStatusResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aggregator.v1.GetStatusResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .aggregator.v1.GetStatusResponse.Status status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // string last_computed_request_id = 2;
  if (!this->_internal_last_computed_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_computed_request_id().data(), static_cast<int>(this->_internal_last_computed_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aggregator.v1.GetStatusResponse.last_computed_request_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_last_computed_request_id(), target);
  }

  // uint64 last_computed_end_time = 3;
  if (this->_internal_last_computed_end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_last_computed_end_time(), target);
  }

  // string current_computing_request_id = 4;
  if (!this->_internal_current_computing_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_current_computing_request_id().data(), static_cast<int>(this->_internal_current_computing_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aggregator.v1.GetStatusResponse.current_computing_request_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_current_computing_request_id(), target);
  }

  // uint64 current_computing_start_time = 5;
  if (this->_internal_current_computing_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_current_computing_start_time(), target);
  }

  // string version_proto = 6;
  if (!this->_internal_version_proto().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_proto().data(), static_cast<int>(this->_internal_version_proto().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aggregator.v1.GetStatusResponse.version_proto");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_version_proto(), target);
  }

  // string version_server = 7;
  if (!this->_internal_version_server().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_server().data(), static_cast<int>(this->_internal_version_server().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aggregator.v1.GetStatusResponse.version_server");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_version_server(), target);
  }

  // repeated string pending_request_queue_ids = 8;
  for (int i = 0, n = this->_internal_pending_request_queue_ids_size(); i < n; i++) {
    const auto& s = this->_internal_pending_request_queue_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aggregator.v1.GetStatusResponse.pending_request_queue_ids");
    target = stream->WriteString(8, s, target);
  }

  // string prover_name = 9;
  if (!this->_internal_prover_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prover_name().data(), static_cast<int>(this->_internal_prover_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aggregator.v1.GetStatusResponse.prover_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_prover_name(), target);
  }

  // string prover_id = 10;
  if (!this->_internal_prover_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prover_id().data(), static_cast<int>(this->_internal_prover_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aggregator.v1.GetStatusResponse.prover_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_prover_id(), target);
  }

  // uint64 number_of_cores = 11;
  if (this->_internal_number_of_cores() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_number_of_cores(), target);
  }

  // uint64 total_memory = 12;
  if (this->_internal_total_memory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(12, this->_internal_total_memory(), target);
  }

  // uint64 free_memory = 13;
  if (this->_internal_free_memory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(13, this->_internal_free_memory(), target);
  }

  // uint64 fork_id = 14;
  if (this->_internal_fork_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(14, this->_internal_fork_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aggregator.v1.GetStatusResponse)
  return target;
}

size_t GetStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aggregator.v1.GetStatusResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string pending_request_queue_ids = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.pending_request_queue_ids_.size());
  for (int i = 0, n = _impl_.pending_request_queue_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.pending_request_queue_ids_.Get(i));
  }

  // string last_computed_request_id = 2;
  if (!this->_internal_last_computed_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_computed_request_id());
  }

  // string current_computing_request_id = 4;
  if (!this->_internal_current_computing_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_current_computing_request_id());
  }

  // string version_proto = 6;
  if (!this->_internal_version_proto().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_proto());
  }

  // string version_server = 7;
  if (!this->_internal_version_server().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_server());
  }

  // string prover_name = 9;
  if (!this->_internal_prover_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prover_name());
  }

  // string prover_id = 10;
  if (!this->_internal_prover_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prover_id());
  }

  // uint64 last_computed_end_time = 3;
  if (this->_internal_last_computed_end_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_last_computed_end_time());
  }

  // uint64 current_computing_start_time = 5;
  if (this->_internal_current_computing_start_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_current_computing_start_time());
  }

  // uint64 number_of_cores = 11;
  if (this->_internal_number_of_cores() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_number_of_cores());
  }

  // uint64 total_memory = 12;
  if (this->_internal_total_memory() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_total_memory());
  }

  // uint64 free_memory = 13;
  if (this->_internal_free_memory() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_free_memory());
  }

  // uint64 fork_id = 14;
  if (this->_internal_fork_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_fork_id());
  }

  // .aggregator.v1.GetStatusResponse.Status status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetStatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetStatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetStatusResponse::GetClassData() const { return &_class_data_; }


void GetStatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetStatusResponse*>(&to_msg);
  auto& from = static_cast<const GetStatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aggregator.v1.GetStatusResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pending_request_queue_ids_.MergeFrom(from._impl_.pending_request_queue_ids_);
  if (!from._internal_last_computed_request_id().empty()) {
    _this->_internal_set_last_computed_request_id(from._internal_last_computed_request_id());
  }
  if (!from._internal_current_computing_request_id().empty()) {
    _this->_internal_set_current_computing_request_id(from._internal_current_computing_request_id());
  }
  if (!from._internal_version_proto().empty()) {
    _this->_internal_set_version_proto(from._internal_version_proto());
  }
  if (!from._internal_version_server().empty()) {
    _this->_internal_set_version_server(from._internal_version_server());
  }
  if (!from._internal_prover_name().empty()) {
    _this->_internal_set_prover_name(from._internal_prover_name());
  }
  if (!from._internal_prover_id().empty()) {
    _this->_internal_set_prover_id(from._internal_prover_id());
  }
  if (from._internal_last_computed_end_time() != 0) {
    _this->_internal_set_last_computed_end_time(from._internal_last_computed_end_time());
  }
  if (from._internal_current_computing_start_time() != 0) {
    _this->_internal_set_current_computing_start_time(from._internal_current_computing_start_time());
  }
  if (from._internal_number_of_cores() != 0) {
    _this->_internal_set_number_of_cores(from._internal_number_of_cores());
  }
  if (from._internal_total_memory() != 0) {
    _this->_internal_set_total_memory(from._internal_total_memory());
  }
  if (from._internal_free_memory() != 0) {
    _this->_internal_set_free_memory(from._internal_free_memory());
  }
  if (from._internal_fork_id() != 0) {
    _this->_internal_set_fork_id(from._internal_fork_id());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetStatusResponse::CopyFrom(const GetStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aggregator.v1.GetStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatusResponse::IsInitialized() const {
  return true;
}

void GetStatusResponse::InternalSwap(GetStatusResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pending_request_queue_ids_.InternalSwap(&other->_impl_.pending_request_queue_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.last_computed_request_id_, lhs_arena,
      &other->_impl_.last_computed_request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.current_computing_request_id_, lhs_arena,
      &other->_impl_.current_computing_request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_proto_, lhs_arena,
      &other->_impl_.version_proto_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_server_, lhs_arena,
      &other->_impl_.version_server_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prover_name_, lhs_arena,
      &other->_impl_.prover_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prover_id_, lhs_arena,
      &other->_impl_.prover_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetStatusResponse, _impl_.status_)
      + sizeof(GetStatusResponse::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(GetStatusResponse, _impl_.last_computed_end_time_)>(
          reinterpret_cast<char*>(&_impl_.last_computed_end_time_),
          reinterpret_cast<char*>(&other->_impl_.last_computed_end_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aggregator_2eproto_getter, &descriptor_table_aggregator_2eproto_once,
      file_level_metadata_aggregator_2eproto[10]);
}

// ===================================================================

class GenBatchProofResponse::_Internal {
 public:
};

GenBatchProofResponse::GenBatchProofResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aggregator.v1.GenBatchProofResponse)
}
GenBatchProofResponse::GenBatchProofResponse(const GenBatchProofResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenBatchProofResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:aggregator.v1.GenBatchProofResponse)
}

inline void GenBatchProofResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.result_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GenBatchProofResponse::~GenBatchProofResponse() {
  // @@protoc_insertion_point(destructor:aggregator.v1.GenBatchProofResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenBatchProofResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void GenBatchProofResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenBatchProofResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aggregator.v1.GenBatchProofResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenBatchProofResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aggregator.v1.GenBatchProofResponse.id"));
        } else
          goto handle_unusual;
        continue;
      // .aggregator.v1.Result result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::aggregator::v1::Result>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GenBatchProofResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aggregator.v1.GenBatchProofResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aggregator.v1.GenBatchProofResponse.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .aggregator.v1.Result result = 2;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aggregator.v1.GenBatchProofResponse)
  return target;
}

size_t GenBatchProofResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aggregator.v1.GenBatchProofResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .aggregator.v1.Result result = 2;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenBatchProofResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenBatchProofResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenBatchProofResponse::GetClassData() const { return &_class_data_; }


void GenBatchProofResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenBatchProofResponse*>(&to_msg);
  auto& from = static_cast<const GenBatchProofResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aggregator.v1.GenBatchProofResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenBatchProofResponse::CopyFrom(const GenBatchProofResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aggregator.v1.GenBatchProofResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenBatchProofResponse::IsInitialized() const {
  return true;
}

void GenBatchProofResponse::InternalSwap(GenBatchProofResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenBatchProofResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aggregator_2eproto_getter, &descriptor_table_aggregator_2eproto_once,
      file_level_metadata_aggregator_2eproto[11]);
}

// ===================================================================

class GenAggregatedProofResponse::_Internal {
 public:
};

GenAggregatedProofResponse::GenAggregatedProofResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aggregator.v1.GenAggregatedProofResponse)
}
GenAggregatedProofResponse::GenAggregatedProofResponse(const GenAggregatedProofResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenAggregatedProofResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:aggregator.v1.GenAggregatedProofResponse)
}

inline void GenAggregatedProofResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.result_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GenAggregatedProofResponse::~GenAggregatedProofResponse() {
  // @@protoc_insertion_point(destructor:aggregator.v1.GenAggregatedProofResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenAggregatedProofResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void GenAggregatedProofResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenAggregatedProofResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aggregator.v1.GenAggregatedProofResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenAggregatedProofResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aggregator.v1.GenAggregatedProofResponse.id"));
        } else
          goto handle_unusual;
        continue;
      // .aggregator.v1.Result result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::aggregator::v1::Result>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GenAggregatedProofResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aggregator.v1.GenAggregatedProofResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aggregator.v1.GenAggregatedProofResponse.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .aggregator.v1.Result result = 2;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aggregator.v1.GenAggregatedProofResponse)
  return target;
}

size_t GenAggregatedProofResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aggregator.v1.GenAggregatedProofResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .aggregator.v1.Result result = 2;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenAggregatedProofResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenAggregatedProofResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenAggregatedProofResponse::GetClassData() const { return &_class_data_; }


void GenAggregatedProofResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenAggregatedProofResponse*>(&to_msg);
  auto& from = static_cast<const GenAggregatedProofResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aggregator.v1.GenAggregatedProofResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenAggregatedProofResponse::CopyFrom(const GenAggregatedProofResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aggregator.v1.GenAggregatedProofResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenAggregatedProofResponse::IsInitialized() const {
  return true;
}

void GenAggregatedProofResponse::InternalSwap(GenAggregatedProofResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenAggregatedProofResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aggregator_2eproto_getter, &descriptor_table_aggregator_2eproto_once,
      file_level_metadata_aggregator_2eproto[12]);
}

// ===================================================================

class GenFinalProofResponse::_Internal {
 public:
};

GenFinalProofResponse::GenFinalProofResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aggregator.v1.GenFinalProofResponse)
}
GenFinalProofResponse::GenFinalProofResponse(const GenFinalProofResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenFinalProofResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:aggregator.v1.GenFinalProofResponse)
}

inline void GenFinalProofResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.result_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GenFinalProofResponse::~GenFinalProofResponse() {
  // @@protoc_insertion_point(destructor:aggregator.v1.GenFinalProofResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenFinalProofResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void GenFinalProofResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenFinalProofResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aggregator.v1.GenFinalProofResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenFinalProofResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aggregator.v1.GenFinalProofResponse.id"));
        } else
          goto handle_unusual;
        continue;
      // .aggregator.v1.Result result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::aggregator::v1::Result>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GenFinalProofResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aggregator.v1.GenFinalProofResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aggregator.v1.GenFinalProofResponse.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .aggregator.v1.Result result = 2;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aggregator.v1.GenFinalProofResponse)
  return target;
}

size_t GenFinalProofResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aggregator.v1.GenFinalProofResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .aggregator.v1.Result result = 2;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenFinalProofResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenFinalProofResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenFinalProofResponse::GetClassData() const { return &_class_data_; }


void GenFinalProofResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenFinalProofResponse*>(&to_msg);
  auto& from = static_cast<const GenFinalProofResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aggregator.v1.GenFinalProofResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenFinalProofResponse::CopyFrom(const GenFinalProofResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aggregator.v1.GenFinalProofResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenFinalProofResponse::IsInitialized() const {
  return true;
}

void GenFinalProofResponse::InternalSwap(GenFinalProofResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenFinalProofResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aggregator_2eproto_getter, &descriptor_table_aggregator_2eproto_once,
      file_level_metadata_aggregator_2eproto[13]);
}

// ===================================================================

class CancelResponse::_Internal {
 public:
};

CancelResponse::CancelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aggregator.v1.CancelResponse)
}
CancelResponse::CancelResponse(const CancelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CancelResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:aggregator.v1.CancelResponse)
}

inline void CancelResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CancelResponse::~CancelResponse() {
  // @@protoc_insertion_point(destructor:aggregator.v1.CancelResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CancelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CancelResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CancelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aggregator.v1.CancelResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aggregator.v1.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::aggregator::v1::Result>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CancelResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aggregator.v1.CancelResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .aggregator.v1.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aggregator.v1.CancelResponse)
  return target;
}

size_t CancelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aggregator.v1.CancelResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .aggregator.v1.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CancelResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CancelResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CancelResponse::GetClassData() const { return &_class_data_; }


void CancelResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CancelResponse*>(&to_msg);
  auto& from = static_cast<const CancelResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aggregator.v1.CancelResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CancelResponse::CopyFrom(const CancelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aggregator.v1.CancelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelResponse::IsInitialized() const {
  return true;
}

void CancelResponse::InternalSwap(CancelResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aggregator_2eproto_getter, &descriptor_table_aggregator_2eproto_once,
      file_level_metadata_aggregator_2eproto[14]);
}

// ===================================================================

class GetProofResponse::_Internal {
 public:
  static const ::aggregator::v1::FinalProof& final_proof(const GetProofResponse* msg);
};

const ::aggregator::v1::FinalProof&
GetProofResponse::_Internal::final_proof(const GetProofResponse* msg) {
  return *msg->_impl_.proof_.final_proof_;
}
void GetProofResponse::set_allocated_final_proof(::aggregator::v1::FinalProof* final_proof) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_proof();
  if (final_proof) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(final_proof);
    if (message_arena != submessage_arena) {
      final_proof = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, final_proof, submessage_arena);
    }
    set_has_final_proof();
    _impl_.proof_.final_proof_ = final_proof;
  }
  // @@protoc_insertion_point(field_set_allocated:aggregator.v1.GetProofResponse.final_proof)
}
GetProofResponse::GetProofResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aggregator.v1.GetProofResponse)
}
GetProofResponse::GetProofResponse(const GetProofResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetProofResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.result_string_){}
    , decltype(_impl_.result_){}
    , decltype(_impl_.proof_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.result_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result_string().empty()) {
    _this->_impl_.result_string_.Set(from._internal_result_string(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.result_ = from._impl_.result_;
  clear_has_proof();
  switch (from.proof_case()) {
    case kFinalProof: {
      _this->_internal_mutable_final_proof()->::aggregator::v1::FinalProof::MergeFrom(
          from._internal_final_proof());
      break;
    }
    case kRecursiveProof: {
      _this->_internal_set_recursive_proof(from._internal_recursive_proof());
      break;
    }
    case PROOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aggregator.v1.GetProofResponse)
}

inline void GetProofResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.result_string_){}
    , decltype(_impl_.result_){0}
    , decltype(_impl_.proof_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.result_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_proof();
}

GetProofResponse::~GetProofResponse() {
  // @@protoc_insertion_point(destructor:aggregator.v1.GetProofResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetProofResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.result_string_.Destroy();
  if (has_proof()) {
    clear_proof();
  }
}

void GetProofResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetProofResponse::clear_proof() {
// @@protoc_insertion_point(one_of_clear_start:aggregator.v1.GetProofResponse)
  switch (proof_case()) {
    case kFinalProof: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.proof_.final_proof_;
      }
      break;
    }
    case kRecursiveProof: {
      _impl_.proof_.recursive_proof_.Destroy();
      break;
    }
    case PROOF_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PROOF_NOT_SET;
}


void GetProofResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:aggregator.v1.GetProofResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.result_string_.ClearToEmpty();
  _impl_.result_ = 0;
  clear_proof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetProofResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aggregator.v1.GetProofResponse.id"));
        } else
          goto handle_unusual;
        continue;
      // .aggregator.v1.FinalProof final_proof = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_final_proof(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string recursive_proof = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_recursive_proof();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aggregator.v1.GetProofResponse.recursive_proof"));
        } else
          goto handle_unusual;
        continue;
      // .aggregator.v1.GetProofResponse.Result result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::aggregator::v1::GetProofResponse_Result>(val));
        } else
          goto handle_unusual;
        continue;
      // string result_string = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_result_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aggregator.v1.GetProofResponse.result_string"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetProofResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aggregator.v1.GetProofResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aggregator.v1.GetProofResponse.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .aggregator.v1.FinalProof final_proof = 2;
  if (_internal_has_final_proof()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::final_proof(this),
        _Internal::final_proof(this).GetCachedSize(), target, stream);
  }

  // string recursive_proof = 3;
  if (_internal_has_recursive_proof()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recursive_proof().data(), static_cast<int>(this->_internal_recursive_proof().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aggregator.v1.GetProofResponse.recursive_proof");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_recursive_proof(), target);
  }

  // .aggregator.v1.GetProofResponse.Result result = 4;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_result(), target);
  }

  // string result_string = 5;
  if (!this->_internal_result_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_string().data(), static_cast<int>(this->_internal_result_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aggregator.v1.GetProofResponse.result_string");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_result_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aggregator.v1.GetProofResponse)
  return target;
}

size_t GetProofResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aggregator.v1.GetProofResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string result_string = 5;
  if (!this->_internal_result_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result_string());
  }

  // .aggregator.v1.GetProofResponse.Result result = 4;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  switch (proof_case()) {
    // .aggregator.v1.FinalProof final_proof = 2;
    case kFinalProof: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.proof_.final_proof_);
      break;
    }
    // string recursive_proof = 3;
    case kRecursiveProof: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_recursive_proof());
      break;
    }
    case PROOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetProofResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetProofResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetProofResponse::GetClassData() const { return &_class_data_; }


void GetProofResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetProofResponse*>(&to_msg);
  auto& from = static_cast<const GetProofResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aggregator.v1.GetProofResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_result_string().empty()) {
    _this->_internal_set_result_string(from._internal_result_string());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  switch (from.proof_case()) {
    case kFinalProof: {
      _this->_internal_mutable_final_proof()->::aggregator::v1::FinalProof::MergeFrom(
          from._internal_final_proof());
      break;
    }
    case kRecursiveProof: {
      _this->_internal_set_recursive_proof(from._internal_recursive_proof());
      break;
    }
    case PROOF_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetProofResponse::CopyFrom(const GetProofResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aggregator.v1.GetProofResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProofResponse::IsInitialized() const {
  return true;
}

void GetProofResponse::InternalSwap(GetProofResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.result_string_, lhs_arena,
      &other->_impl_.result_string_, rhs_arena
  );
  swap(_impl_.result_, other->_impl_.result_);
  swap(_impl_.proof_, other->_impl_.proof_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetProofResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aggregator_2eproto_getter, &descriptor_table_aggregator_2eproto_once,
      file_level_metadata_aggregator_2eproto[15]);
}

// ===================================================================

class FinalProof::_Internal {
 public:
  static const ::aggregator::v1::PublicInputsExtended& public_(const FinalProof* msg);
};

const ::aggregator::v1::PublicInputsExtended&
FinalProof::_Internal::public_(const FinalProof* msg) {
  return *msg->_impl_.public__;
}
FinalProof::FinalProof(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aggregator.v1.FinalProof)
}
FinalProof::FinalProof(const FinalProof& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FinalProof* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.proof_){}
    , decltype(_impl_.public__){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.proof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proof_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proof().empty()) {
    _this->_impl_.proof_.Set(from._internal_proof(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_public_()) {
    _this->_impl_.public__ = new ::aggregator::v1::PublicInputsExtended(*from._impl_.public__);
  }
  // @@protoc_insertion_point(copy_constructor:aggregator.v1.FinalProof)
}

inline void FinalProof::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.proof_){}
    , decltype(_impl_.public__){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.proof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proof_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FinalProof::~FinalProof() {
  // @@protoc_insertion_point(destructor:aggregator.v1.FinalProof)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FinalProof::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.proof_.Destroy();
  if (this != internal_default_instance()) delete _impl_.public__;
}

void FinalProof::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FinalProof::Clear() {
// @@protoc_insertion_point(message_clear_start:aggregator.v1.FinalProof)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.proof_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.public__ != nullptr) {
    delete _impl_.public__;
  }
  _impl_.public__ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FinalProof::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string proof = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_proof();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aggregator.v1.FinalProof.proof"));
        } else
          goto handle_unusual;
        continue;
      // .aggregator.v1.PublicInputsExtended public = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FinalProof::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aggregator.v1.FinalProof)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string proof = 1;
  if (!this->_internal_proof().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proof().data(), static_cast<int>(this->_internal_proof().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aggregator.v1.FinalProof.proof");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_proof(), target);
  }

  // .aggregator.v1.PublicInputsExtended public = 2;
  if (this->_internal_has_public_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::public_(this),
        _Internal::public_(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aggregator.v1.FinalProof)
  return target;
}

size_t FinalProof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aggregator.v1.FinalProof)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string proof = 1;
  if (!this->_internal_proof().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proof());
  }

  // .aggregator.v1.PublicInputsExtended public = 2;
  if (this->_internal_has_public_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.public__);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FinalProof::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FinalProof::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FinalProof::GetClassData() const { return &_class_data_; }


void FinalProof::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FinalProof*>(&to_msg);
  auto& from = static_cast<const FinalProof&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aggregator.v1.FinalProof)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_proof().empty()) {
    _this->_internal_set_proof(from._internal_proof());
  }
  if (from._internal_has_public_()) {
    _this->_internal_mutable_public_()->::aggregator::v1::PublicInputsExtended::MergeFrom(
        from._internal_public_());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FinalProof::CopyFrom(const FinalProof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aggregator.v1.FinalProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinalProof::IsInitialized() const {
  return true;
}

void FinalProof::InternalSwap(FinalProof* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.proof_, lhs_arena,
      &other->_impl_.proof_, rhs_arena
  );
  swap(_impl_.public__, other->_impl_.public__);
}

::PROTOBUF_NAMESPACE_ID::Metadata FinalProof::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aggregator_2eproto_getter, &descriptor_table_aggregator_2eproto_once,
      file_level_metadata_aggregator_2eproto[16]);
}

// ===================================================================

PublicInputs_L1InfoTreeDataEntry_DoNotUse::PublicInputs_L1InfoTreeDataEntry_DoNotUse() {}
PublicInputs_L1InfoTreeDataEntry_DoNotUse::PublicInputs_L1InfoTreeDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PublicInputs_L1InfoTreeDataEntry_DoNotUse::MergeFrom(const PublicInputs_L1InfoTreeDataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PublicInputs_L1InfoTreeDataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aggregator_2eproto_getter, &descriptor_table_aggregator_2eproto_once,
      file_level_metadata_aggregator_2eproto[17]);
}

// ===================================================================

class PublicInputs::_Internal {
 public:
};

PublicInputs::PublicInputs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &PublicInputs::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:aggregator.v1.PublicInputs)
}
PublicInputs::PublicInputs(const PublicInputs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PublicInputs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.l1_info_tree_data_)*/{}
    , decltype(_impl_.old_state_root_){}
    , decltype(_impl_.old_acc_input_hash_){}
    , decltype(_impl_.batch_l2_data_){}
    , decltype(_impl_.l1_info_root_){}
    , decltype(_impl_.sequencer_addr_){}
    , decltype(_impl_.forced_blockhash_l1_){}
    , decltype(_impl_.aggregator_addr_){}
    , decltype(_impl_.old_batch_num_){}
    , decltype(_impl_.chain_id_){}
    , decltype(_impl_.fork_id_){}
    , decltype(_impl_.timestamp_limit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.l1_info_tree_data_.MergeFrom(from._impl_.l1_info_tree_data_);
  _impl_.old_state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_old_state_root().empty()) {
    _this->_impl_.old_state_root_.Set(from._internal_old_state_root(), 
      _this->GetArenaForAllocation());
  }
  _impl_.old_acc_input_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_acc_input_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_old_acc_input_hash().empty()) {
    _this->_impl_.old_acc_input_hash_.Set(from._internal_old_acc_input_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.batch_l2_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.batch_l2_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_batch_l2_data().empty()) {
    _this->_impl_.batch_l2_data_.Set(from._internal_batch_l2_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.l1_info_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.l1_info_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_l1_info_root().empty()) {
    _this->_impl_.l1_info_root_.Set(from._internal_l1_info_root(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sequencer_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sequencer_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sequencer_addr().empty()) {
    _this->_impl_.sequencer_addr_.Set(from._internal_sequencer_addr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.forced_blockhash_l1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.forced_blockhash_l1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_forced_blockhash_l1().empty()) {
    _this->_impl_.forced_blockhash_l1_.Set(from._internal_forced_blockhash_l1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.aggregator_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aggregator_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_aggregator_addr().empty()) {
    _this->_impl_.aggregator_addr_.Set(from._internal_aggregator_addr(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.old_batch_num_, &from._impl_.old_batch_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_limit_) -
    reinterpret_cast<char*>(&_impl_.old_batch_num_)) + sizeof(_impl_.timestamp_limit_));
  // @@protoc_insertion_point(copy_constructor:aggregator.v1.PublicInputs)
}

inline void PublicInputs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.l1_info_tree_data_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.old_state_root_){}
    , decltype(_impl_.old_acc_input_hash_){}
    , decltype(_impl_.batch_l2_data_){}
    , decltype(_impl_.l1_info_root_){}
    , decltype(_impl_.sequencer_addr_){}
    , decltype(_impl_.forced_blockhash_l1_){}
    , decltype(_impl_.aggregator_addr_){}
    , decltype(_impl_.old_batch_num_){uint64_t{0u}}
    , decltype(_impl_.chain_id_){uint64_t{0u}}
    , decltype(_impl_.fork_id_){uint64_t{0u}}
    , decltype(_impl_.timestamp_limit_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.old_state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.old_acc_input_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_acc_input_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.batch_l2_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.batch_l2_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.l1_info_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.l1_info_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sequencer_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sequencer_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.forced_blockhash_l1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.forced_blockhash_l1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.aggregator_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aggregator_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PublicInputs::~PublicInputs() {
  // @@protoc_insertion_point(destructor:aggregator.v1.PublicInputs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void PublicInputs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.l1_info_tree_data_.Destruct();
  _impl_.l1_info_tree_data_.~MapField();
  _impl_.old_state_root_.Destroy();
  _impl_.old_acc_input_hash_.Destroy();
  _impl_.batch_l2_data_.Destroy();
  _impl_.l1_info_root_.Destroy();
  _impl_.sequencer_addr_.Destroy();
  _impl_.forced_blockhash_l1_.Destroy();
  _impl_.aggregator_addr_.Destroy();
}

void PublicInputs::ArenaDtor(void* object) {
  PublicInputs* _this = reinterpret_cast< PublicInputs* >(object);
  _this->_impl_.l1_info_tree_data_.Destruct();
}
void PublicInputs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublicInputs::Clear() {
// @@protoc_insertion_point(message_clear_start:aggregator.v1.PublicInputs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.l1_info_tree_data_.Clear();
  _impl_.old_state_root_.ClearToEmpty();
  _impl_.old_acc_input_hash_.ClearToEmpty();
  _impl_.batch_l2_data_.ClearToEmpty();
  _impl_.l1_info_root_.ClearToEmpty();
  _impl_.sequencer_addr_.ClearToEmpty();
  _impl_.forced_blockhash_l1_.ClearToEmpty();
  _impl_.aggregator_addr_.ClearToEmpty();
  ::memset(&_impl_.old_batch_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timestamp_limit_) -
      reinterpret_cast<char*>(&_impl_.old_batch_num_)) + sizeof(_impl_.timestamp_limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublicInputs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes old_state_root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_old_state_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes old_acc_input_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_old_acc_input_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 old_batch_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.old_batch_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 chain_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.chain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 fork_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.fork_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes batch_l2_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_batch_l2_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes l1_info_root = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_l1_info_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp_limit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.timestamp_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sequencer_addr = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_sequencer_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aggregator.v1.PublicInputs.sequencer_addr"));
        } else
          goto handle_unusual;
        continue;
      // bytes forced_blockhash_l1 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_forced_blockhash_l1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string aggregator_addr = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_aggregator_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aggregator.v1.PublicInputs.aggregator_addr"));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .aggregator.v1.L1Data> l1_info_tree_data = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.l1_info_tree_data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublicInputs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aggregator.v1.PublicInputs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes old_state_root = 1;
  if (!this->_internal_old_state_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_old_state_root(), target);
  }

  // bytes old_acc_input_hash = 2;
  if (!this->_internal_old_acc_input_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_old_acc_input_hash(), target);
  }

  // uint64 old_batch_num = 3;
  if (this->_internal_old_batch_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_old_batch_num(), target);
  }

  // uint64 chain_id = 4;
  if (this->_internal_chain_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_chain_id(), target);
  }

  // uint64 fork_id = 5;
  if (this->_internal_fork_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_fork_id(), target);
  }

  // bytes batch_l2_data = 6;
  if (!this->_internal_batch_l2_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_batch_l2_data(), target);
  }

  // bytes l1_info_root = 7;
  if (!this->_internal_l1_info_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_l1_info_root(), target);
  }

  // uint64 timestamp_limit = 8;
  if (this->_internal_timestamp_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_timestamp_limit(), target);
  }

  // string sequencer_addr = 9;
  if (!this->_internal_sequencer_addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sequencer_addr().data(), static_cast<int>(this->_internal_sequencer_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aggregator.v1.PublicInputs.sequencer_addr");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_sequencer_addr(), target);
  }

  // bytes forced_blockhash_l1 = 10;
  if (!this->_internal_forced_blockhash_l1().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_forced_blockhash_l1(), target);
  }

  // string aggregator_addr = 12;
  if (!this->_internal_aggregator_addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_aggregator_addr().data(), static_cast<int>(this->_internal_aggregator_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aggregator.v1.PublicInputs.aggregator_addr");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_aggregator_addr(), target);
  }

  // map<uint32, .aggregator.v1.L1Data> l1_info_tree_data = 16;
  if (!this->_internal_l1_info_tree_data().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::aggregator::v1::L1Data>;
    using WireHelper = PublicInputs_L1InfoTreeDataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_l1_info_tree_data();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(16, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(16, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aggregator.v1.PublicInputs)
  return target;
}

size_t PublicInputs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aggregator.v1.PublicInputs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .aggregator.v1.L1Data> l1_info_tree_data = 16;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_l1_info_tree_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::aggregator::v1::L1Data >::const_iterator
      it = this->_internal_l1_info_tree_data().begin();
      it != this->_internal_l1_info_tree_data().end(); ++it) {
    total_size += PublicInputs_L1InfoTreeDataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes old_state_root = 1;
  if (!this->_internal_old_state_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_old_state_root());
  }

  // bytes old_acc_input_hash = 2;
  if (!this->_internal_old_acc_input_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_old_acc_input_hash());
  }

  // bytes batch_l2_data = 6;
  if (!this->_internal_batch_l2_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_batch_l2_data());
  }

  // bytes l1_info_root = 7;
  if (!this->_internal_l1_info_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_l1_info_root());
  }

  // string sequencer_addr = 9;
  if (!this->_internal_sequencer_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sequencer_addr());
  }

  // bytes forced_blockhash_l1 = 10;
  if (!this->_internal_forced_blockhash_l1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_forced_blockhash_l1());
  }

  // string aggregator_addr = 12;
  if (!this->_internal_aggregator_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_aggregator_addr());
  }

  // uint64 old_batch_num = 3;
  if (this->_internal_old_batch_num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_old_batch_num());
  }

  // uint64 chain_id = 4;
  if (this->_internal_chain_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_chain_id());
  }

  // uint64 fork_id = 5;
  if (this->_internal_fork_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_fork_id());
  }

  // uint64 timestamp_limit = 8;
  if (this->_internal_timestamp_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublicInputs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublicInputs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublicInputs::GetClassData() const { return &_class_data_; }


void PublicInputs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PublicInputs*>(&to_msg);
  auto& from = static_cast<const PublicInputs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aggregator.v1.PublicInputs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.l1_info_tree_data_.MergeFrom(from._impl_.l1_info_tree_data_);
  if (!from._internal_old_state_root().empty()) {
    _this->_internal_set_old_state_root(from._internal_old_state_root());
  }
  if (!from._internal_old_acc_input_hash().empty()) {
    _this->_internal_set_old_acc_input_hash(from._internal_old_acc_input_hash());
  }
  if (!from._internal_batch_l2_data().empty()) {
    _this->_internal_set_batch_l2_data(from._internal_batch_l2_data());
  }
  if (!from._internal_l1_info_root().empty()) {
    _this->_internal_set_l1_info_root(from._internal_l1_info_root());
  }
  if (!from._internal_sequencer_addr().empty()) {
    _this->_internal_set_sequencer_addr(from._internal_sequencer_addr());
  }
  if (!from._internal_forced_blockhash_l1().empty()) {
    _this->_internal_set_forced_blockhash_l1(from._internal_forced_blockhash_l1());
  }
  if (!from._internal_aggregator_addr().empty()) {
    _this->_internal_set_aggregator_addr(from._internal_aggregator_addr());
  }
  if (from._internal_old_batch_num() != 0) {
    _this->_internal_set_old_batch_num(from._internal_old_batch_num());
  }
  if (from._internal_chain_id() != 0) {
    _this->_internal_set_chain_id(from._internal_chain_id());
  }
  if (from._internal_fork_id() != 0) {
    _this->_internal_set_fork_id(from._internal_fork_id());
  }
  if (from._internal_timestamp_limit() != 0) {
    _this->_internal_set_timestamp_limit(from._internal_timestamp_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublicInputs::CopyFrom(const PublicInputs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aggregator.v1.PublicInputs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicInputs::IsInitialized() const {
  return true;
}

void PublicInputs::InternalSwap(PublicInputs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.l1_info_tree_data_.InternalSwap(&other->_impl_.l1_info_tree_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.old_state_root_, lhs_arena,
      &other->_impl_.old_state_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.old_acc_input_hash_, lhs_arena,
      &other->_impl_.old_acc_input_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.batch_l2_data_, lhs_arena,
      &other->_impl_.batch_l2_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.l1_info_root_, lhs_arena,
      &other->_impl_.l1_info_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sequencer_addr_, lhs_arena,
      &other->_impl_.sequencer_addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.forced_blockhash_l1_, lhs_arena,
      &other->_impl_.forced_blockhash_l1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.aggregator_addr_, lhs_arena,
      &other->_impl_.aggregator_addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublicInputs, _impl_.timestamp_limit_)
      + sizeof(PublicInputs::_impl_.timestamp_limit_)
      - PROTOBUF_FIELD_OFFSET(PublicInputs, _impl_.old_batch_num_)>(
          reinterpret_cast<char*>(&_impl_.old_batch_num_),
          reinterpret_cast<char*>(&other->_impl_.old_batch_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublicInputs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aggregator_2eproto_getter, &descriptor_table_aggregator_2eproto_once,
      file_level_metadata_aggregator_2eproto[18]);
}

// ===================================================================

StatelessPublicInputs_L1InfoTreeDataEntry_DoNotUse::StatelessPublicInputs_L1InfoTreeDataEntry_DoNotUse() {}
StatelessPublicInputs_L1InfoTreeDataEntry_DoNotUse::StatelessPublicInputs_L1InfoTreeDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StatelessPublicInputs_L1InfoTreeDataEntry_DoNotUse::MergeFrom(const StatelessPublicInputs_L1InfoTreeDataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StatelessPublicInputs_L1InfoTreeDataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aggregator_2eproto_getter, &descriptor_table_aggregator_2eproto_once,
      file_level_metadata_aggregator_2eproto[19]);
}

// ===================================================================

class StatelessPublicInputs::_Internal {
 public:
};

StatelessPublicInputs::StatelessPublicInputs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &StatelessPublicInputs::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:aggregator.v1.StatelessPublicInputs)
}
StatelessPublicInputs::StatelessPublicInputs(const StatelessPublicInputs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatelessPublicInputs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.l1_info_tree_data_)*/{}
    , decltype(_impl_.witness_){}
    , decltype(_impl_.old_acc_input_hash_){}
    , decltype(_impl_.batch_l2_data_){}
    , decltype(_impl_.l1_info_root_){}
    , decltype(_impl_.sequencer_addr_){}
    , decltype(_impl_.forced_blockhash_l1_){}
    , decltype(_impl_.aggregator_addr_){}
    , decltype(_impl_.old_batch_num_){}
    , decltype(_impl_.chain_id_){}
    , decltype(_impl_.fork_id_){}
    , decltype(_impl_.timestamp_limit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.l1_info_tree_data_.MergeFrom(from._impl_.l1_info_tree_data_);
  _impl_.witness_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.witness_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_witness().empty()) {
    _this->_impl_.witness_.Set(from._internal_witness(), 
      _this->GetArenaForAllocation());
  }
  _impl_.old_acc_input_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_acc_input_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_old_acc_input_hash().empty()) {
    _this->_impl_.old_acc_input_hash_.Set(from._internal_old_acc_input_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.batch_l2_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.batch_l2_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_batch_l2_data().empty()) {
    _this->_impl_.batch_l2_data_.Set(from._internal_batch_l2_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.l1_info_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.l1_info_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_l1_info_root().empty()) {
    _this->_impl_.l1_info_root_.Set(from._internal_l1_info_root(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sequencer_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sequencer_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sequencer_addr().empty()) {
    _this->_impl_.sequencer_addr_.Set(from._internal_sequencer_addr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.forced_blockhash_l1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.forced_blockhash_l1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_forced_blockhash_l1().empty()) {
    _this->_impl_.forced_blockhash_l1_.Set(from._internal_forced_blockhash_l1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.aggregator_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aggregator_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_aggregator_addr().empty()) {
    _this->_impl_.aggregator_addr_.Set(from._internal_aggregator_addr(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.old_batch_num_, &from._impl_.old_batch_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_limit_) -
    reinterpret_cast<char*>(&_impl_.old_batch_num_)) + sizeof(_impl_.timestamp_limit_));
  // @@protoc_insertion_point(copy_constructor:aggregator.v1.StatelessPublicInputs)
}

inline void StatelessPublicInputs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.l1_info_tree_data_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.witness_){}
    , decltype(_impl_.old_acc_input_hash_){}
    , decltype(_impl_.batch_l2_data_){}
    , decltype(_impl_.l1_info_root_){}
    , decltype(_impl_.sequencer_addr_){}
    , decltype(_impl_.forced_blockhash_l1_){}
    , decltype(_impl_.aggregator_addr_){}
    , decltype(_impl_.old_batch_num_){uint64_t{0u}}
    , decltype(_impl_.chain_id_){uint64_t{0u}}
    , decltype(_impl_.fork_id_){uint64_t{0u}}
    , decltype(_impl_.timestamp_limit_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.witness_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.witness_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.old_acc_input_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_acc_input_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.batch_l2_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.batch_l2_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.l1_info_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.l1_info_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sequencer_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sequencer_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.forced_blockhash_l1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.forced_blockhash_l1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.aggregator_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aggregator_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StatelessPublicInputs::~StatelessPublicInputs() {
  // @@protoc_insertion_point(destructor:aggregator.v1.StatelessPublicInputs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void StatelessPublicInputs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.l1_info_tree_data_.Destruct();
  _impl_.l1_info_tree_data_.~MapField();
  _impl_.witness_.Destroy();
  _impl_.old_acc_input_hash_.Destroy();
  _impl_.batch_l2_data_.Destroy();
  _impl_.l1_info_root_.Destroy();
  _impl_.sequencer_addr_.Destroy();
  _impl_.forced_blockhash_l1_.Destroy();
  _impl_.aggregator_addr_.Destroy();
}

void StatelessPublicInputs::ArenaDtor(void* object) {
  StatelessPublicInputs* _this = reinterpret_cast< StatelessPublicInputs* >(object);
  _this->_impl_.l1_info_tree_data_.Destruct();
}
void StatelessPublicInputs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatelessPublicInputs::Clear() {
// @@protoc_insertion_point(message_clear_start:aggregator.v1.StatelessPublicInputs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.l1_info_tree_data_.Clear();
  _impl_.witness_.ClearToEmpty();
  _impl_.old_acc_input_hash_.ClearToEmpty();
  _impl_.batch_l2_data_.ClearToEmpty();
  _impl_.l1_info_root_.ClearToEmpty();
  _impl_.sequencer_addr_.ClearToEmpty();
  _impl_.forced_blockhash_l1_.ClearToEmpty();
  _impl_.aggregator_addr_.ClearToEmpty();
  ::memset(&_impl_.old_batch_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timestamp_limit_) -
      reinterpret_cast<char*>(&_impl_.old_batch_num_)) + sizeof(_impl_.timestamp_limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatelessPublicInputs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes witness = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_witness();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes old_acc_input_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_old_acc_input_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 old_batch_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.old_batch_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 chain_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.chain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 fork_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.fork_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes batch_l2_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_batch_l2_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes l1_info_root = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_l1_info_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp_limit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.timestamp_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sequencer_addr = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_sequencer_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aggregator.v1.StatelessPublicInputs.sequencer_addr"));
        } else
          goto handle_unusual;
        continue;
      // bytes forced_blockhash_l1 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_forced_blockhash_l1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string aggregator_addr = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_aggregator_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "aggregator.v1.StatelessPublicInputs.aggregator_addr"));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .aggregator.v1.L1Data> l1_info_tree_data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.l1_info_tree_data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatelessPublicInputs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aggregator.v1.StatelessPublicInputs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes witness = 1;
  if (!this->_internal_witness().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_witness(), target);
  }

  // bytes old_acc_input_hash = 2;
  if (!this->_internal_old_acc_input_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_old_acc_input_hash(), target);
  }

  // uint64 old_batch_num = 3;
  if (this->_internal_old_batch_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_old_batch_num(), target);
  }

  // uint64 chain_id = 4;
  if (this->_internal_chain_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_chain_id(), target);
  }

  // uint64 fork_id = 5;
  if (this->_internal_fork_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_fork_id(), target);
  }

  // bytes batch_l2_data = 6;
  if (!this->_internal_batch_l2_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_batch_l2_data(), target);
  }

  // bytes l1_info_root = 7;
  if (!this->_internal_l1_info_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_l1_info_root(), target);
  }

  // uint64 timestamp_limit = 8;
  if (this->_internal_timestamp_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_timestamp_limit(), target);
  }

  // string sequencer_addr = 9;
  if (!this->_internal_sequencer_addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sequencer_addr().data(), static_cast<int>(this->_internal_sequencer_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aggregator.v1.StatelessPublicInputs.sequencer_addr");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_sequencer_addr(), target);
  }

  // bytes forced_blockhash_l1 = 10;
  if (!this->_internal_forced_blockhash_l1().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_forced_blockhash_l1(), target);
  }

  // string aggregator_addr = 11;
  if (!this->_internal_aggregator_addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_aggregator_addr().data(), static_cast<int>(this->_internal_aggregator_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "aggregator.v1.StatelessPublicInputs.aggregator_addr");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_aggregator_addr(), target);
  }

  // map<uint32, .aggregator.v1.L1Data> l1_info_tree_data = 12;
  if (!this->_internal_l1_info_tree_data().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::aggregator::v1::L1Data>;
    using WireHelper = StatelessPublicInputs_L1InfoTreeDataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_l1_info_tree_data();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(12, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(12, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aggregator.v1.StatelessPublicInputs)
  return target;
}

size_t StatelessPublicInputs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aggregator.v1.StatelessPublicInputs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .aggregator.v1.L1Data> l1_info_tree_data = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_l1_info_tree_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::aggregator::v1::L1Data >::const_iterator
      it = this->_internal_l1_info_tree_data().begin();
      it != this->_internal_l1_info_tree_data().end(); ++it) {
    total_size += StatelessPublicInputs_L1InfoTreeDataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes witness = 1;
  if (!this->_internal_witness().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witness());
  }

  // bytes old_acc_input_hash = 2;
  if (!this->_internal_old_acc_input_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_old_acc_input_hash());
  }

  // bytes batch_l2_data = 6;
  if (!this->_internal_batch_l2_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_batch_l2_data());
  }

  // bytes l1_info_root = 7;
  if (!this->_internal_l1_info_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_l1_info_root());
  }

  // string sequencer_addr = 9;
  if (!this->_internal_sequencer_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sequencer_addr());
  }

  // bytes forced_blockhash_l1 = 10;
  if (!this->_internal_forced_blockhash_l1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_forced_blockhash_l1());
  }

  // string aggregator_addr = 11;
  if (!this->_internal_aggregator_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_aggregator_addr());
  }

  // uint64 old_batch_num = 3;
  if (this->_internal_old_batch_num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_old_batch_num());
  }

  // uint64 chain_id = 4;
  if (this->_internal_chain_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_chain_id());
  }

  // uint64 fork_id = 5;
  if (this->_internal_fork_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_fork_id());
  }

  // uint64 timestamp_limit = 8;
  if (this->_internal_timestamp_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatelessPublicInputs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatelessPublicInputs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatelessPublicInputs::GetClassData() const { return &_class_data_; }


void StatelessPublicInputs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatelessPublicInputs*>(&to_msg);
  auto& from = static_cast<const StatelessPublicInputs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aggregator.v1.StatelessPublicInputs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.l1_info_tree_data_.MergeFrom(from._impl_.l1_info_tree_data_);
  if (!from._internal_witness().empty()) {
    _this->_internal_set_witness(from._internal_witness());
  }
  if (!from._internal_old_acc_input_hash().empty()) {
    _this->_internal_set_old_acc_input_hash(from._internal_old_acc_input_hash());
  }
  if (!from._internal_batch_l2_data().empty()) {
    _this->_internal_set_batch_l2_data(from._internal_batch_l2_data());
  }
  if (!from._internal_l1_info_root().empty()) {
    _this->_internal_set_l1_info_root(from._internal_l1_info_root());
  }
  if (!from._internal_sequencer_addr().empty()) {
    _this->_internal_set_sequencer_addr(from._internal_sequencer_addr());
  }
  if (!from._internal_forced_blockhash_l1().empty()) {
    _this->_internal_set_forced_blockhash_l1(from._internal_forced_blockhash_l1());
  }
  if (!from._internal_aggregator_addr().empty()) {
    _this->_internal_set_aggregator_addr(from._internal_aggregator_addr());
  }
  if (from._internal_old_batch_num() != 0) {
    _this->_internal_set_old_batch_num(from._internal_old_batch_num());
  }
  if (from._internal_chain_id() != 0) {
    _this->_internal_set_chain_id(from._internal_chain_id());
  }
  if (from._internal_fork_id() != 0) {
    _this->_internal_set_fork_id(from._internal_fork_id());
  }
  if (from._internal_timestamp_limit() != 0) {
    _this->_internal_set_timestamp_limit(from._internal_timestamp_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatelessPublicInputs::CopyFrom(const StatelessPublicInputs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aggregator.v1.StatelessPublicInputs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatelessPublicInputs::IsInitialized() const {
  return true;
}

void StatelessPublicInputs::InternalSwap(StatelessPublicInputs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.l1_info_tree_data_.InternalSwap(&other->_impl_.l1_info_tree_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.witness_, lhs_arena,
      &other->_impl_.witness_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.old_acc_input_hash_, lhs_arena,
      &other->_impl_.old_acc_input_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.batch_l2_data_, lhs_arena,
      &other->_impl_.batch_l2_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.l1_info_root_, lhs_arena,
      &other->_impl_.l1_info_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sequencer_addr_, lhs_arena,
      &other->_impl_.sequencer_addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.forced_blockhash_l1_, lhs_arena,
      &other->_impl_.forced_blockhash_l1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.aggregator_addr_, lhs_arena,
      &other->_impl_.aggregator_addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatelessPublicInputs, _impl_.timestamp_limit_)
      + sizeof(StatelessPublicInputs::_impl_.timestamp_limit_)
      - PROTOBUF_FIELD_OFFSET(StatelessPublicInputs, _impl_.old_batch_num_)>(
          reinterpret_cast<char*>(&_impl_.old_batch_num_),
          reinterpret_cast<char*>(&other->_impl_.old_batch_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatelessPublicInputs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aggregator_2eproto_getter, &descriptor_table_aggregator_2eproto_once,
      file_level_metadata_aggregator_2eproto[20]);
}

// ===================================================================

class L1Data::_Internal {
 public:
};

L1Data::L1Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aggregator.v1.L1Data)
}
L1Data::L1Data(const L1Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  L1Data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.smt_proof_){from._impl_.smt_proof_}
    , decltype(_impl_.global_exit_root_){}
    , decltype(_impl_.blockhash_l1_){}
    , decltype(_impl_.min_timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.global_exit_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.global_exit_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_global_exit_root().empty()) {
    _this->_impl_.global_exit_root_.Set(from._internal_global_exit_root(), 
      _this->GetArenaForAllocation());
  }
  _impl_.blockhash_l1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blockhash_l1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_blockhash_l1().empty()) {
    _this->_impl_.blockhash_l1_.Set(from._internal_blockhash_l1(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.min_timestamp_ = from._impl_.min_timestamp_;
  // @@protoc_insertion_point(copy_constructor:aggregator.v1.L1Data)
}

inline void L1Data::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.smt_proof_){arena}
    , decltype(_impl_.global_exit_root_){}
    , decltype(_impl_.blockhash_l1_){}
    , decltype(_impl_.min_timestamp_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.global_exit_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.global_exit_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.blockhash_l1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blockhash_l1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

L1Data::~L1Data() {
  // @@protoc_insertion_point(destructor:aggregator.v1.L1Data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void L1Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.smt_proof_.~RepeatedPtrField();
  _impl_.global_exit_root_.Destroy();
  _impl_.blockhash_l1_.Destroy();
}

void L1Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void L1Data::Clear() {
// @@protoc_insertion_point(message_clear_start:aggregator.v1.L1Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.smt_proof_.Clear();
  _impl_.global_exit_root_.ClearToEmpty();
  _impl_.blockhash_l1_.ClearToEmpty();
  _impl_.min_timestamp_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* L1Data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes global_exit_root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_global_exit_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes blockhash_l1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_blockhash_l1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 min_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.min_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes smt_proof = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_smt_proof();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* L1Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aggregator.v1.L1Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes global_exit_root = 1;
  if (!this->_internal_global_exit_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_global_exit_root(), target);
  }

  // bytes blockhash_l1 = 2;
  if (!this->_internal_blockhash_l1().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_blockhash_l1(), target);
  }

  // uint32 min_timestamp = 3;
  if (this->_internal_min_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_min_timestamp(), target);
  }

  // repeated bytes smt_proof = 4;
  for (int i = 0, n = this->_internal_smt_proof_size(); i < n; i++) {
    const auto& s = this->_internal_smt_proof(i);
    target = stream->WriteBytes(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aggregator.v1.L1Data)
  return target;
}

size_t L1Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aggregator.v1.L1Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes smt_proof = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.smt_proof_.size());
  for (int i = 0, n = _impl_.smt_proof_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.smt_proof_.Get(i));
  }

  // bytes global_exit_root = 1;
  if (!this->_internal_global_exit_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_global_exit_root());
  }

  // bytes blockhash_l1 = 2;
  if (!this->_internal_blockhash_l1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blockhash_l1());
  }

  // uint32 min_timestamp = 3;
  if (this->_internal_min_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_min_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData L1Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    L1Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*L1Data::GetClassData() const { return &_class_data_; }


void L1Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<L1Data*>(&to_msg);
  auto& from = static_cast<const L1Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aggregator.v1.L1Data)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.smt_proof_.MergeFrom(from._impl_.smt_proof_);
  if (!from._internal_global_exit_root().empty()) {
    _this->_internal_set_global_exit_root(from._internal_global_exit_root());
  }
  if (!from._internal_blockhash_l1().empty()) {
    _this->_internal_set_blockhash_l1(from._internal_blockhash_l1());
  }
  if (from._internal_min_timestamp() != 0) {
    _this->_internal_set_min_timestamp(from._internal_min_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void L1Data::CopyFrom(const L1Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aggregator.v1.L1Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L1Data::IsInitialized() const {
  return true;
}

void L1Data::InternalSwap(L1Data* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.smt_proof_.InternalSwap(&other->_impl_.smt_proof_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.global_exit_root_, lhs_arena,
      &other->_impl_.global_exit_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.blockhash_l1_, lhs_arena,
      &other->_impl_.blockhash_l1_, rhs_arena
  );
  swap(_impl_.min_timestamp_, other->_impl_.min_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata L1Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aggregator_2eproto_getter, &descriptor_table_aggregator_2eproto_once,
      file_level_metadata_aggregator_2eproto[21]);
}

// ===================================================================

InputProver_DbEntry_DoNotUse::InputProver_DbEntry_DoNotUse() {}
InputProver_DbEntry_DoNotUse::InputProver_DbEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void InputProver_DbEntry_DoNotUse::MergeFrom(const InputProver_DbEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata InputProver_DbEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aggregator_2eproto_getter, &descriptor_table_aggregator_2eproto_once,
      file_level_metadata_aggregator_2eproto[22]);
}

// ===================================================================

InputProver_ContractsBytecodeEntry_DoNotUse::InputProver_ContractsBytecodeEntry_DoNotUse() {}
InputProver_ContractsBytecodeEntry_DoNotUse::InputProver_ContractsBytecodeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void InputProver_ContractsBytecodeEntry_DoNotUse::MergeFrom(const InputProver_ContractsBytecodeEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata InputProver_ContractsBytecodeEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aggregator_2eproto_getter, &descriptor_table_aggregator_2eproto_once,
      file_level_metadata_aggregator_2eproto[23]);
}

// ===================================================================

class InputProver::_Internal {
 public:
  static const ::aggregator::v1::PublicInputs& public_inputs(const InputProver* msg);
};

const ::aggregator::v1::PublicInputs&
InputProver::_Internal::public_inputs(const InputProver* msg) {
  return *msg->_impl_.public_inputs_;
}
InputProver::InputProver(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &InputProver::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:aggregator.v1.InputProver)
}
InputProver::InputProver(const InputProver& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InputProver* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.db_)*/{}
    , /*decltype(_impl_.contracts_bytecode_)*/{}
    , decltype(_impl_.public_inputs_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.db_.MergeFrom(from._impl_.db_);
  _this->_impl_.contracts_bytecode_.MergeFrom(from._impl_.contracts_bytecode_);
  if (from._internal_has_public_inputs()) {
    _this->_impl_.public_inputs_ = new ::aggregator::v1::PublicInputs(*from._impl_.public_inputs_);
  }
  // @@protoc_insertion_point(copy_constructor:aggregator.v1.InputProver)
}

inline void InputProver::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.db_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.contracts_bytecode_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.public_inputs_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InputProver::~InputProver() {
  // @@protoc_insertion_point(destructor:aggregator.v1.InputProver)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void InputProver::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_.Destruct();
  _impl_.db_.~MapField();
  _impl_.contracts_bytecode_.Destruct();
  _impl_.contracts_bytecode_.~MapField();
  if (this != internal_default_instance()) delete _impl_.public_inputs_;
}

void InputProver::ArenaDtor(void* object) {
  InputProver* _this = reinterpret_cast< InputProver* >(object);
  _this->_impl_.db_.Destruct();
  _this->_impl_.contracts_bytecode_.Destruct();
}
void InputProver::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InputProver::Clear() {
// @@protoc_insertion_point(message_clear_start:aggregator.v1.InputProver)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_.Clear();
  _impl_.contracts_bytecode_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.public_inputs_ != nullptr) {
    delete _impl_.public_inputs_;
  }
  _impl_.public_inputs_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputProver::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aggregator.v1.PublicInputs public_inputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_inputs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> db = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.db_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> contracts_bytecode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.contracts_bytecode_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InputProver::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aggregator.v1.InputProver)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .aggregator.v1.PublicInputs public_inputs = 1;
  if (this->_internal_has_public_inputs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::public_inputs(this),
        _Internal::public_inputs(this).GetCachedSize(), target, stream);
  }

  // map<string, string> db = 4;
  if (!this->_internal_db().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = InputProver_DbEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_db();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "aggregator.v1.InputProver.DbEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "aggregator.v1.InputProver.DbEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, string> contracts_bytecode = 5;
  if (!this->_internal_contracts_bytecode().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = InputProver_ContractsBytecodeEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_contracts_bytecode();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "aggregator.v1.InputProver.ContractsBytecodeEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "aggregator.v1.InputProver.ContractsBytecodeEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aggregator.v1.InputProver)
  return target;
}

size_t InputProver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aggregator.v1.InputProver)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> db = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_db_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_db().begin();
      it != this->_internal_db().end(); ++it) {
    total_size += InputProver_DbEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> contracts_bytecode = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_contracts_bytecode_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_contracts_bytecode().begin();
      it != this->_internal_contracts_bytecode().end(); ++it) {
    total_size += InputProver_ContractsBytecodeEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .aggregator.v1.PublicInputs public_inputs = 1;
  if (this->_internal_has_public_inputs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.public_inputs_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InputProver::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InputProver::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InputProver::GetClassData() const { return &_class_data_; }


void InputProver::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InputProver*>(&to_msg);
  auto& from = static_cast<const InputProver&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aggregator.v1.InputProver)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.db_.MergeFrom(from._impl_.db_);
  _this->_impl_.contracts_bytecode_.MergeFrom(from._impl_.contracts_bytecode_);
  if (from._internal_has_public_inputs()) {
    _this->_internal_mutable_public_inputs()->::aggregator::v1::PublicInputs::MergeFrom(
        from._internal_public_inputs());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InputProver::CopyFrom(const InputProver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aggregator.v1.InputProver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputProver::IsInitialized() const {
  return true;
}

void InputProver::InternalSwap(InputProver* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.db_.InternalSwap(&other->_impl_.db_);
  _impl_.contracts_bytecode_.InternalSwap(&other->_impl_.contracts_bytecode_);
  swap(_impl_.public_inputs_, other->_impl_.public_inputs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputProver::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aggregator_2eproto_getter, &descriptor_table_aggregator_2eproto_once,
      file_level_metadata_aggregator_2eproto[24]);
}

// ===================================================================

class StatelessInputProver::_Internal {
 public:
  static const ::aggregator::v1::StatelessPublicInputs& public_inputs(const StatelessInputProver* msg);
};

const ::aggregator::v1::StatelessPublicInputs&
StatelessInputProver::_Internal::public_inputs(const StatelessInputProver* msg) {
  return *msg->_impl_.public_inputs_;
}
StatelessInputProver::StatelessInputProver(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aggregator.v1.StatelessInputProver)
}
StatelessInputProver::StatelessInputProver(const StatelessInputProver& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatelessInputProver* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.public_inputs_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_public_inputs()) {
    _this->_impl_.public_inputs_ = new ::aggregator::v1::StatelessPublicInputs(*from._impl_.public_inputs_);
  }
  // @@protoc_insertion_point(copy_constructor:aggregator.v1.StatelessInputProver)
}

inline void StatelessInputProver::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.public_inputs_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StatelessInputProver::~StatelessInputProver() {
  // @@protoc_insertion_point(destructor:aggregator.v1.StatelessInputProver)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatelessInputProver::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.public_inputs_;
}

void StatelessInputProver::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatelessInputProver::Clear() {
// @@protoc_insertion_point(message_clear_start:aggregator.v1.StatelessInputProver)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.public_inputs_ != nullptr) {
    delete _impl_.public_inputs_;
  }
  _impl_.public_inputs_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatelessInputProver::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aggregator.v1.StatelessPublicInputs public_inputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_inputs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatelessInputProver::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aggregator.v1.StatelessInputProver)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .aggregator.v1.StatelessPublicInputs public_inputs = 1;
  if (this->_internal_has_public_inputs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::public_inputs(this),
        _Internal::public_inputs(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aggregator.v1.StatelessInputProver)
  return target;
}

size_t StatelessInputProver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aggregator.v1.StatelessInputProver)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .aggregator.v1.StatelessPublicInputs public_inputs = 1;
  if (this->_internal_has_public_inputs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.public_inputs_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatelessInputProver::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatelessInputProver::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatelessInputProver::GetClassData() const { return &_class_data_; }


void StatelessInputProver::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatelessInputProver*>(&to_msg);
  auto& from = static_cast<const StatelessInputProver&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aggregator.v1.StatelessInputProver)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_public_inputs()) {
    _this->_internal_mutable_public_inputs()->::aggregator::v1::StatelessPublicInputs::MergeFrom(
        from._internal_public_inputs());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatelessInputProver::CopyFrom(const StatelessInputProver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aggregator.v1.StatelessInputProver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatelessInputProver::IsInitialized() const {
  return true;
}

void StatelessInputProver::InternalSwap(StatelessInputProver* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.public_inputs_, other->_impl_.public_inputs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatelessInputProver::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aggregator_2eproto_getter, &descriptor_table_aggregator_2eproto_once,
      file_level_metadata_aggregator_2eproto[25]);
}

// ===================================================================

class PublicInputsExtended::_Internal {
 public:
  static const ::aggregator::v1::PublicInputs& public_inputs(const PublicInputsExtended* msg);
};

const ::aggregator::v1::PublicInputs&
PublicInputsExtended::_Internal::public_inputs(const PublicInputsExtended* msg) {
  return *msg->_impl_.public_inputs_;
}
PublicInputsExtended::PublicInputsExtended(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:aggregator.v1.PublicInputsExtended)
}
PublicInputsExtended::PublicInputsExtended(const PublicInputsExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PublicInputsExtended* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.new_state_root_){}
    , decltype(_impl_.new_acc_input_hash_){}
    , decltype(_impl_.new_local_exit_root_){}
    , decltype(_impl_.public_inputs_){nullptr}
    , decltype(_impl_.new_batch_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.new_state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_new_state_root().empty()) {
    _this->_impl_.new_state_root_.Set(from._internal_new_state_root(), 
      _this->GetArenaForAllocation());
  }
  _impl_.new_acc_input_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_acc_input_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_new_acc_input_hash().empty()) {
    _this->_impl_.new_acc_input_hash_.Set(from._internal_new_acc_input_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.new_local_exit_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_local_exit_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_new_local_exit_root().empty()) {
    _this->_impl_.new_local_exit_root_.Set(from._internal_new_local_exit_root(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_public_inputs()) {
    _this->_impl_.public_inputs_ = new ::aggregator::v1::PublicInputs(*from._impl_.public_inputs_);
  }
  _this->_impl_.new_batch_num_ = from._impl_.new_batch_num_;
  // @@protoc_insertion_point(copy_constructor:aggregator.v1.PublicInputsExtended)
}

inline void PublicInputsExtended::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.new_state_root_){}
    , decltype(_impl_.new_acc_input_hash_){}
    , decltype(_impl_.new_local_exit_root_){}
    , decltype(_impl_.public_inputs_){nullptr}
    , decltype(_impl_.new_batch_num_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.new_state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.new_acc_input_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_acc_input_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.new_local_exit_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_local_exit_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PublicInputsExtended::~PublicInputsExtended() {
  // @@protoc_insertion_point(destructor:aggregator.v1.PublicInputsExtended)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublicInputsExtended::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.new_state_root_.Destroy();
  _impl_.new_acc_input_hash_.Destroy();
  _impl_.new_local_exit_root_.Destroy();
  if (this != internal_default_instance()) delete _impl_.public_inputs_;
}

void PublicInputsExtended::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublicInputsExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:aggregator.v1.PublicInputsExtended)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.new_state_root_.ClearToEmpty();
  _impl_.new_acc_input_hash_.ClearToEmpty();
  _impl_.new_local_exit_root_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.public_inputs_ != nullptr) {
    delete _impl_.public_inputs_;
  }
  _impl_.public_inputs_ = nullptr;
  _impl_.new_batch_num_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublicInputsExtended::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .aggregator.v1.PublicInputs public_inputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_inputs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes new_state_root = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_new_state_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes new_acc_input_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_new_acc_input_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes new_local_exit_root = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_new_local_exit_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 new_batch_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.new_batch_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublicInputsExtended::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aggregator.v1.PublicInputsExtended)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .aggregator.v1.PublicInputs public_inputs = 1;
  if (this->_internal_has_public_inputs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::public_inputs(this),
        _Internal::public_inputs(this).GetCachedSize(), target, stream);
  }

  // bytes new_state_root = 2;
  if (!this->_internal_new_state_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_new_state_root(), target);
  }

  // bytes new_acc_input_hash = 3;
  if (!this->_internal_new_acc_input_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_new_acc_input_hash(), target);
  }

  // bytes new_local_exit_root = 4;
  if (!this->_internal_new_local_exit_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_new_local_exit_root(), target);
  }

  // uint64 new_batch_num = 5;
  if (this->_internal_new_batch_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_new_batch_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aggregator.v1.PublicInputsExtended)
  return target;
}

size_t PublicInputsExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aggregator.v1.PublicInputsExtended)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes new_state_root = 2;
  if (!this->_internal_new_state_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_new_state_root());
  }

  // bytes new_acc_input_hash = 3;
  if (!this->_internal_new_acc_input_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_new_acc_input_hash());
  }

  // bytes new_local_exit_root = 4;
  if (!this->_internal_new_local_exit_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_new_local_exit_root());
  }

  // .aggregator.v1.PublicInputs public_inputs = 1;
  if (this->_internal_has_public_inputs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.public_inputs_);
  }

  // uint64 new_batch_num = 5;
  if (this->_internal_new_batch_num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_new_batch_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublicInputsExtended::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublicInputsExtended::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublicInputsExtended::GetClassData() const { return &_class_data_; }


void PublicInputsExtended::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PublicInputsExtended*>(&to_msg);
  auto& from = static_cast<const PublicInputsExtended&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:aggregator.v1.PublicInputsExtended)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_new_state_root().empty()) {
    _this->_internal_set_new_state_root(from._internal_new_state_root());
  }
  if (!from._internal_new_acc_input_hash().empty()) {
    _this->_internal_set_new_acc_input_hash(from._internal_new_acc_input_hash());
  }
  if (!from._internal_new_local_exit_root().empty()) {
    _this->_internal_set_new_local_exit_root(from._internal_new_local_exit_root());
  }
  if (from._internal_has_public_inputs()) {
    _this->_internal_mutable_public_inputs()->::aggregator::v1::PublicInputs::MergeFrom(
        from._internal_public_inputs());
  }
  if (from._internal_new_batch_num() != 0) {
    _this->_internal_set_new_batch_num(from._internal_new_batch_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublicInputsExtended::CopyFrom(const PublicInputsExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aggregator.v1.PublicInputsExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicInputsExtended::IsInitialized() const {
  return true;
}

void PublicInputsExtended::InternalSwap(PublicInputsExtended* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.new_state_root_, lhs_arena,
      &other->_impl_.new_state_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.new_acc_input_hash_, lhs_arena,
      &other->_impl_.new_acc_input_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.new_local_exit_root_, lhs_arena,
      &other->_impl_.new_local_exit_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublicInputsExtended, _impl_.new_batch_num_)
      + sizeof(PublicInputsExtended::_impl_.new_batch_num_)
      - PROTOBUF_FIELD_OFFSET(PublicInputsExtended, _impl_.public_inputs_)>(
          reinterpret_cast<char*>(&_impl_.public_inputs_),
          reinterpret_cast<char*>(&other->_impl_.public_inputs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublicInputsExtended::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_aggregator_2eproto_getter, &descriptor_table_aggregator_2eproto_once,
      file_level_metadata_aggregator_2eproto[26]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace aggregator
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aggregator::v1::Version*
Arena::CreateMaybeMessage< ::aggregator::v1::Version >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aggregator::v1::Version >(arena);
}
template<> PROTOBUF_NOINLINE ::aggregator::v1::AggregatorMessage*
Arena::CreateMaybeMessage< ::aggregator::v1::AggregatorMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aggregator::v1::AggregatorMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::aggregator::v1::ProverMessage*
Arena::CreateMaybeMessage< ::aggregator::v1::ProverMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aggregator::v1::ProverMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::aggregator::v1::GetStatusRequest*
Arena::CreateMaybeMessage< ::aggregator::v1::GetStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aggregator::v1::GetStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aggregator::v1::GenBatchProofRequest*
Arena::CreateMaybeMessage< ::aggregator::v1::GenBatchProofRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aggregator::v1::GenBatchProofRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aggregator::v1::GenStatelessBatchProofRequest*
Arena::CreateMaybeMessage< ::aggregator::v1::GenStatelessBatchProofRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aggregator::v1::GenStatelessBatchProofRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aggregator::v1::GenAggregatedProofRequest*
Arena::CreateMaybeMessage< ::aggregator::v1::GenAggregatedProofRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aggregator::v1::GenAggregatedProofRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aggregator::v1::GenFinalProofRequest*
Arena::CreateMaybeMessage< ::aggregator::v1::GenFinalProofRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aggregator::v1::GenFinalProofRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aggregator::v1::CancelRequest*
Arena::CreateMaybeMessage< ::aggregator::v1::CancelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aggregator::v1::CancelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aggregator::v1::GetProofRequest*
Arena::CreateMaybeMessage< ::aggregator::v1::GetProofRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aggregator::v1::GetProofRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::aggregator::v1::GetStatusResponse*
Arena::CreateMaybeMessage< ::aggregator::v1::GetStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aggregator::v1::GetStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::aggregator::v1::GenBatchProofResponse*
Arena::CreateMaybeMessage< ::aggregator::v1::GenBatchProofResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aggregator::v1::GenBatchProofResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::aggregator::v1::GenAggregatedProofResponse*
Arena::CreateMaybeMessage< ::aggregator::v1::GenAggregatedProofResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aggregator::v1::GenAggregatedProofResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::aggregator::v1::GenFinalProofResponse*
Arena::CreateMaybeMessage< ::aggregator::v1::GenFinalProofResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aggregator::v1::GenFinalProofResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::aggregator::v1::CancelResponse*
Arena::CreateMaybeMessage< ::aggregator::v1::CancelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aggregator::v1::CancelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::aggregator::v1::GetProofResponse*
Arena::CreateMaybeMessage< ::aggregator::v1::GetProofResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aggregator::v1::GetProofResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::aggregator::v1::FinalProof*
Arena::CreateMaybeMessage< ::aggregator::v1::FinalProof >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aggregator::v1::FinalProof >(arena);
}
template<> PROTOBUF_NOINLINE ::aggregator::v1::PublicInputs_L1InfoTreeDataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::aggregator::v1::PublicInputs_L1InfoTreeDataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aggregator::v1::PublicInputs_L1InfoTreeDataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::aggregator::v1::PublicInputs*
Arena::CreateMaybeMessage< ::aggregator::v1::PublicInputs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aggregator::v1::PublicInputs >(arena);
}
template<> PROTOBUF_NOINLINE ::aggregator::v1::StatelessPublicInputs_L1InfoTreeDataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::aggregator::v1::StatelessPublicInputs_L1InfoTreeDataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aggregator::v1::StatelessPublicInputs_L1InfoTreeDataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::aggregator::v1::StatelessPublicInputs*
Arena::CreateMaybeMessage< ::aggregator::v1::StatelessPublicInputs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aggregator::v1::StatelessPublicInputs >(arena);
}
template<> PROTOBUF_NOINLINE ::aggregator::v1::L1Data*
Arena::CreateMaybeMessage< ::aggregator::v1::L1Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aggregator::v1::L1Data >(arena);
}
template<> PROTOBUF_NOINLINE ::aggregator::v1::InputProver_DbEntry_DoNotUse*
Arena::CreateMaybeMessage< ::aggregator::v1::InputProver_DbEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aggregator::v1::InputProver_DbEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::aggregator::v1::InputProver_ContractsBytecodeEntry_DoNotUse*
Arena::CreateMaybeMessage< ::aggregator::v1::InputProver_ContractsBytecodeEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aggregator::v1::InputProver_ContractsBytecodeEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::aggregator::v1::InputProver*
Arena::CreateMaybeMessage< ::aggregator::v1::InputProver >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aggregator::v1::InputProver >(arena);
}
template<> PROTOBUF_NOINLINE ::aggregator::v1::StatelessInputProver*
Arena::CreateMaybeMessage< ::aggregator::v1::StatelessInputProver >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aggregator::v1::StatelessInputProver >(arena);
}
template<> PROTOBUF_NOINLINE ::aggregator::v1::PublicInputsExtended*
Arena::CreateMaybeMessage< ::aggregator::v1::PublicInputsExtended >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aggregator::v1::PublicInputsExtended >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
