// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: executor.proto

#include "executor.pb.h"
#include "executor.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace executor {
namespace v1 {

static const char* ExecutorService_method_names[] = {
  "/executor.v1.ExecutorService/ProcessBatch",
  "/executor.v1.ExecutorService/ProcessBatchV2",
  "/executor.v1.ExecutorService/ProcessStatelessBatchV2",
  "/executor.v1.ExecutorService/GetFlushStatus",
};

std::unique_ptr< ExecutorService::Stub> ExecutorService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ExecutorService::Stub> stub(new ExecutorService::Stub(channel, options));
  return stub;
}

ExecutorService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ProcessBatch_(ExecutorService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ProcessBatchV2_(ExecutorService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ProcessStatelessBatchV2_(ExecutorService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFlushStatus_(ExecutorService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ExecutorService::Stub::ProcessBatch(::grpc::ClientContext* context, const ::executor::v1::ProcessBatchRequest& request, ::executor::v1::ProcessBatchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::executor::v1::ProcessBatchRequest, ::executor::v1::ProcessBatchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ProcessBatch_, context, request, response);
}

void ExecutorService::Stub::async::ProcessBatch(::grpc::ClientContext* context, const ::executor::v1::ProcessBatchRequest* request, ::executor::v1::ProcessBatchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::executor::v1::ProcessBatchRequest, ::executor::v1::ProcessBatchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProcessBatch_, context, request, response, std::move(f));
}

void ExecutorService::Stub::async::ProcessBatch(::grpc::ClientContext* context, const ::executor::v1::ProcessBatchRequest* request, ::executor::v1::ProcessBatchResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProcessBatch_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::executor::v1::ProcessBatchResponse>* ExecutorService::Stub::PrepareAsyncProcessBatchRaw(::grpc::ClientContext* context, const ::executor::v1::ProcessBatchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::executor::v1::ProcessBatchResponse, ::executor::v1::ProcessBatchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ProcessBatch_, context, request);
}

::grpc::ClientAsyncResponseReader< ::executor::v1::ProcessBatchResponse>* ExecutorService::Stub::AsyncProcessBatchRaw(::grpc::ClientContext* context, const ::executor::v1::ProcessBatchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProcessBatchRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ExecutorService::Stub::ProcessBatchV2(::grpc::ClientContext* context, const ::executor::v1::ProcessBatchRequestV2& request, ::executor::v1::ProcessBatchResponseV2* response) {
  return ::grpc::internal::BlockingUnaryCall< ::executor::v1::ProcessBatchRequestV2, ::executor::v1::ProcessBatchResponseV2, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ProcessBatchV2_, context, request, response);
}

void ExecutorService::Stub::async::ProcessBatchV2(::grpc::ClientContext* context, const ::executor::v1::ProcessBatchRequestV2* request, ::executor::v1::ProcessBatchResponseV2* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::executor::v1::ProcessBatchRequestV2, ::executor::v1::ProcessBatchResponseV2, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProcessBatchV2_, context, request, response, std::move(f));
}

void ExecutorService::Stub::async::ProcessBatchV2(::grpc::ClientContext* context, const ::executor::v1::ProcessBatchRequestV2* request, ::executor::v1::ProcessBatchResponseV2* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProcessBatchV2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::executor::v1::ProcessBatchResponseV2>* ExecutorService::Stub::PrepareAsyncProcessBatchV2Raw(::grpc::ClientContext* context, const ::executor::v1::ProcessBatchRequestV2& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::executor::v1::ProcessBatchResponseV2, ::executor::v1::ProcessBatchRequestV2, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ProcessBatchV2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::executor::v1::ProcessBatchResponseV2>* ExecutorService::Stub::AsyncProcessBatchV2Raw(::grpc::ClientContext* context, const ::executor::v1::ProcessBatchRequestV2& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProcessBatchV2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ExecutorService::Stub::ProcessStatelessBatchV2(::grpc::ClientContext* context, const ::executor::v1::ProcessStatelessBatchRequestV2& request, ::executor::v1::ProcessBatchResponseV2* response) {
  return ::grpc::internal::BlockingUnaryCall< ::executor::v1::ProcessStatelessBatchRequestV2, ::executor::v1::ProcessBatchResponseV2, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ProcessStatelessBatchV2_, context, request, response);
}

void ExecutorService::Stub::async::ProcessStatelessBatchV2(::grpc::ClientContext* context, const ::executor::v1::ProcessStatelessBatchRequestV2* request, ::executor::v1::ProcessBatchResponseV2* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::executor::v1::ProcessStatelessBatchRequestV2, ::executor::v1::ProcessBatchResponseV2, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProcessStatelessBatchV2_, context, request, response, std::move(f));
}

void ExecutorService::Stub::async::ProcessStatelessBatchV2(::grpc::ClientContext* context, const ::executor::v1::ProcessStatelessBatchRequestV2* request, ::executor::v1::ProcessBatchResponseV2* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProcessStatelessBatchV2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::executor::v1::ProcessBatchResponseV2>* ExecutorService::Stub::PrepareAsyncProcessStatelessBatchV2Raw(::grpc::ClientContext* context, const ::executor::v1::ProcessStatelessBatchRequestV2& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::executor::v1::ProcessBatchResponseV2, ::executor::v1::ProcessStatelessBatchRequestV2, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ProcessStatelessBatchV2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::executor::v1::ProcessBatchResponseV2>* ExecutorService::Stub::AsyncProcessStatelessBatchV2Raw(::grpc::ClientContext* context, const ::executor::v1::ProcessStatelessBatchRequestV2& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProcessStatelessBatchV2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ExecutorService::Stub::GetFlushStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::executor::v1::GetFlushStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::executor::v1::GetFlushStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFlushStatus_, context, request, response);
}

void ExecutorService::Stub::async::GetFlushStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::executor::v1::GetFlushStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::executor::v1::GetFlushStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFlushStatus_, context, request, response, std::move(f));
}

void ExecutorService::Stub::async::GetFlushStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::executor::v1::GetFlushStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFlushStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::executor::v1::GetFlushStatusResponse>* ExecutorService::Stub::PrepareAsyncGetFlushStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::executor::v1::GetFlushStatusResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFlushStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::executor::v1::GetFlushStatusResponse>* ExecutorService::Stub::AsyncGetFlushStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFlushStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

ExecutorService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ExecutorService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ExecutorService::Service, ::executor::v1::ProcessBatchRequest, ::executor::v1::ProcessBatchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ExecutorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::executor::v1::ProcessBatchRequest* req,
             ::executor::v1::ProcessBatchResponse* resp) {
               return service->ProcessBatch(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ExecutorService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ExecutorService::Service, ::executor::v1::ProcessBatchRequestV2, ::executor::v1::ProcessBatchResponseV2, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ExecutorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::executor::v1::ProcessBatchRequestV2* req,
             ::executor::v1::ProcessBatchResponseV2* resp) {
               return service->ProcessBatchV2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ExecutorService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ExecutorService::Service, ::executor::v1::ProcessStatelessBatchRequestV2, ::executor::v1::ProcessBatchResponseV2, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ExecutorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::executor::v1::ProcessStatelessBatchRequestV2* req,
             ::executor::v1::ProcessBatchResponseV2* resp) {
               return service->ProcessStatelessBatchV2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ExecutorService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ExecutorService::Service, ::google::protobuf::Empty, ::executor::v1::GetFlushStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ExecutorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::executor::v1::GetFlushStatusResponse* resp) {
               return service->GetFlushStatus(ctx, req, resp);
             }, this)));
}

ExecutorService::Service::~Service() {
}

::grpc::Status ExecutorService::Service::ProcessBatch(::grpc::ServerContext* context, const ::executor::v1::ProcessBatchRequest* request, ::executor::v1::ProcessBatchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ExecutorService::Service::ProcessBatchV2(::grpc::ServerContext* context, const ::executor::v1::ProcessBatchRequestV2* request, ::executor::v1::ProcessBatchResponseV2* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ExecutorService::Service::ProcessStatelessBatchV2(::grpc::ServerContext* context, const ::executor::v1::ProcessStatelessBatchRequestV2* request, ::executor::v1::ProcessBatchResponseV2* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ExecutorService::Service::GetFlushStatus(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::executor::v1::GetFlushStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace executor
}  // namespace v1

