// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: executor.proto

#include "executor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace executor {
namespace v1 {
PROTOBUF_CONSTEXPR ProcessBatchRequest_DbEntry_DoNotUse::ProcessBatchRequest_DbEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ProcessBatchRequest_DbEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessBatchRequest_DbEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessBatchRequest_DbEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ProcessBatchRequest_DbEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessBatchRequest_DbEntry_DoNotUseDefaultTypeInternal _ProcessBatchRequest_DbEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse::ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ProcessBatchRequest_ContractsBytecodeEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessBatchRequest_ContractsBytecodeEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessBatchRequest_ContractsBytecodeEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessBatchRequest_ContractsBytecodeEntry_DoNotUseDefaultTypeInternal _ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ProcessBatchRequest_StateOverrideEntry_DoNotUse::ProcessBatchRequest_StateOverrideEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ProcessBatchRequest_StateOverrideEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessBatchRequest_StateOverrideEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessBatchRequest_StateOverrideEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ProcessBatchRequest_StateOverrideEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessBatchRequest_StateOverrideEntry_DoNotUseDefaultTypeInternal _ProcessBatchRequest_StateOverrideEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ProcessBatchRequest::ProcessBatchRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.contracts_bytecode_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.state_override_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.old_state_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.old_acc_input_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.batch_l2_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.global_exit_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.coinbase_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.context_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.trace_config_)*/nullptr
  , /*decltype(_impl_.old_batch_num_)*/uint64_t{0u}
  , /*decltype(_impl_.chain_id_)*/uint64_t{0u}
  , /*decltype(_impl_.fork_id_)*/uint64_t{0u}
  , /*decltype(_impl_.eth_timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.no_counters_)*/uint64_t{0u}
  , /*decltype(_impl_.update_merkle_tree_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcessBatchRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessBatchRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessBatchRequestDefaultTypeInternal() {}
  union {
    ProcessBatchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessBatchRequestDefaultTypeInternal _ProcessBatchRequest_default_instance_;
PROTOBUF_CONSTEXPR ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse::ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUseDefaultTypeInternal _ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ProcessBatchResponse::ProcessBatchResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.responses_)*/{}
  , /*decltype(_impl_.read_write_addresses_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.new_state_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.new_acc_input_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.new_local_exit_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.prover_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.new_batch_num_)*/uint64_t{0u}
  , /*decltype(_impl_.cnt_keccak_hashes_)*/0u
  , /*decltype(_impl_.cnt_poseidon_hashes_)*/0u
  , /*decltype(_impl_.cnt_poseidon_paddings_)*/0u
  , /*decltype(_impl_.cnt_mem_aligns_)*/0u
  , /*decltype(_impl_.cnt_arithmetics_)*/0u
  , /*decltype(_impl_.cnt_binaries_)*/0u
  , /*decltype(_impl_.cumulative_gas_used_)*/uint64_t{0u}
  , /*decltype(_impl_.cnt_steps_)*/0u
  , /*decltype(_impl_.error_)*/0
  , /*decltype(_impl_.flush_id_)*/uint64_t{0u}
  , /*decltype(_impl_.stored_flush_id_)*/uint64_t{0u}
  , /*decltype(_impl_.fork_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcessBatchResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessBatchResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessBatchResponseDefaultTypeInternal() {}
  union {
    ProcessBatchResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessBatchResponseDefaultTypeInternal _ProcessBatchResponse_default_instance_;
PROTOBUF_CONSTEXPR GetFlushStatusResponse::GetFlushStatusResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.prover_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stored_flush_id_)*/uint64_t{0u}
  , /*decltype(_impl_.storing_flush_id_)*/uint64_t{0u}
  , /*decltype(_impl_.last_flush_id_)*/uint64_t{0u}
  , /*decltype(_impl_.pending_to_flush_nodes_)*/uint64_t{0u}
  , /*decltype(_impl_.pending_to_flush_program_)*/uint64_t{0u}
  , /*decltype(_impl_.storing_nodes_)*/uint64_t{0u}
  , /*decltype(_impl_.storing_program_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetFlushStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFlushStatusResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFlushStatusResponseDefaultTypeInternal() {}
  union {
    GetFlushStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFlushStatusResponseDefaultTypeInternal _GetFlushStatusResponse_default_instance_;
PROTOBUF_CONSTEXPR TraceConfig::TraceConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tx_hash_to_generate_full_trace_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.disable_storage_)*/0u
  , /*decltype(_impl_.disable_stack_)*/0u
  , /*decltype(_impl_.enable_memory_)*/0u
  , /*decltype(_impl_.enable_return_data_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TraceConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceConfigDefaultTypeInternal() {}
  union {
    TraceConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceConfigDefaultTypeInternal _TraceConfig_default_instance_;
PROTOBUF_CONSTEXPR OverrideAccount_StateEntry_DoNotUse::OverrideAccount_StateEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct OverrideAccount_StateEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OverrideAccount_StateEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OverrideAccount_StateEntry_DoNotUseDefaultTypeInternal() {}
  union {
    OverrideAccount_StateEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OverrideAccount_StateEntry_DoNotUseDefaultTypeInternal _OverrideAccount_StateEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR OverrideAccount_StateDiffEntry_DoNotUse::OverrideAccount_StateDiffEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct OverrideAccount_StateDiffEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OverrideAccount_StateDiffEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OverrideAccount_StateDiffEntry_DoNotUseDefaultTypeInternal() {}
  union {
    OverrideAccount_StateDiffEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OverrideAccount_StateDiffEntry_DoNotUseDefaultTypeInternal _OverrideAccount_StateDiffEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR OverrideAccount::OverrideAccount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.state_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.state_diff_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.balance_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nonce_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OverrideAccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OverrideAccountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OverrideAccountDefaultTypeInternal() {}
  union {
    OverrideAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OverrideAccountDefaultTypeInternal _OverrideAccount_default_instance_;
PROTOBUF_CONSTEXPR InfoReadWrite::InfoReadWrite(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nonce_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.balance_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InfoReadWriteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InfoReadWriteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InfoReadWriteDefaultTypeInternal() {}
  union {
    InfoReadWrite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InfoReadWriteDefaultTypeInternal _InfoReadWrite_default_instance_;
PROTOBUF_CONSTEXPR FullTrace::FullTrace(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.steps_)*/{}
  , /*decltype(_impl_.context_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FullTraceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FullTraceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FullTraceDefaultTypeInternal() {}
  union {
    FullTrace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FullTraceDefaultTypeInternal _FullTrace_default_instance_;
PROTOBUF_CONSTEXPR TransactionContext::TransactionContext(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.to_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.batch_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.output_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gas_price_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.old_state_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gas_)*/uint64_t{0u}
  , /*decltype(_impl_.gas_used_)*/uint64_t{0u}
  , /*decltype(_impl_.execution_time_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransactionContextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransactionContextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransactionContextDefaultTypeInternal() {}
  union {
    TransactionContext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransactionContextDefaultTypeInternal _TransactionContext_default_instance_;
PROTOBUF_CONSTEXPR TransactionStep_StorageEntry_DoNotUse::TransactionStep_StorageEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TransactionStep_StorageEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransactionStep_StorageEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransactionStep_StorageEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TransactionStep_StorageEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransactionStep_StorageEntry_DoNotUseDefaultTypeInternal _TransactionStep_StorageEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TransactionStep::TransactionStep(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stack_)*/{}
  , /*decltype(_impl_.storage_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.state_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.memory_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.return_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contract_)*/nullptr
  , /*decltype(_impl_.pc_)*/uint64_t{0u}
  , /*decltype(_impl_.gas_)*/uint64_t{0u}
  , /*decltype(_impl_.depth_)*/0u
  , /*decltype(_impl_.op_)*/0u
  , /*decltype(_impl_.gas_cost_)*/uint64_t{0u}
  , /*decltype(_impl_.gas_refund_)*/uint64_t{0u}
  , /*decltype(_impl_.memory_size_)*/0u
  , /*decltype(_impl_.memory_offset_)*/0u
  , /*decltype(_impl_.error_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransactionStepDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransactionStepDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransactionStepDefaultTypeInternal() {}
  union {
    TransactionStep _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransactionStepDefaultTypeInternal _TransactionStep_default_instance_;
PROTOBUF_CONSTEXPR Contract::Contract(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.caller_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gas_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ContractDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContractDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContractDefaultTypeInternal() {}
  union {
    Contract _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContractDefaultTypeInternal _Contract_default_instance_;
PROTOBUF_CONSTEXPR ProcessTransactionResponse::ProcessTransactionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.logs_)*/{}
  , /*decltype(_impl_.tx_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rlp_tx_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.return_value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.create_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.effective_gas_price_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.full_trace_)*/nullptr
  , /*decltype(_impl_.gas_left_)*/uint64_t{0u}
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.error_)*/0
  , /*decltype(_impl_.gas_used_)*/uint64_t{0u}
  , /*decltype(_impl_.gas_refunded_)*/uint64_t{0u}
  , /*decltype(_impl_.effective_percentage_)*/0u
  , /*decltype(_impl_.has_gasprice_opcode_)*/0u
  , /*decltype(_impl_.has_balance_opcode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcessTransactionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessTransactionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessTransactionResponseDefaultTypeInternal() {}
  union {
    ProcessTransactionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessTransactionResponseDefaultTypeInternal _ProcessTransactionResponse_default_instance_;
PROTOBUF_CONSTEXPR Log::Log(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.topics_)*/{}
  , /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tx_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.batch_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.batch_number_)*/uint64_t{0u}
  , /*decltype(_impl_.tx_index_)*/0u
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogDefaultTypeInternal() {}
  union {
    Log _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogDefaultTypeInternal _Log_default_instance_;
PROTOBUF_CONSTEXPR ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse::ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUseDefaultTypeInternal _ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ProcessBatchRequestV2_DbEntry_DoNotUse::ProcessBatchRequestV2_DbEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ProcessBatchRequestV2_DbEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessBatchRequestV2_DbEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessBatchRequestV2_DbEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ProcessBatchRequestV2_DbEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessBatchRequestV2_DbEntry_DoNotUseDefaultTypeInternal _ProcessBatchRequestV2_DbEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse::ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUseDefaultTypeInternal _ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ProcessBatchRequestV2_StateOverrideEntry_DoNotUse::ProcessBatchRequestV2_StateOverrideEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ProcessBatchRequestV2_StateOverrideEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessBatchRequestV2_StateOverrideEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessBatchRequestV2_StateOverrideEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ProcessBatchRequestV2_StateOverrideEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessBatchRequestV2_StateOverrideEntry_DoNotUseDefaultTypeInternal _ProcessBatchRequestV2_StateOverrideEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ProcessBatchRequestV2::ProcessBatchRequestV2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.l1_info_tree_data_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.db_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.contracts_bytecode_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.state_override_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.old_state_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.old_acc_input_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.batch_l2_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.l1_info_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.coinbase_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.forced_blockhash_l1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.context_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.trace_config_)*/nullptr
  , /*decltype(_impl_.debug_)*/nullptr
  , /*decltype(_impl_.old_batch_num_)*/uint64_t{0u}
  , /*decltype(_impl_.chain_id_)*/uint64_t{0u}
  , /*decltype(_impl_.fork_id_)*/uint64_t{0u}
  , /*decltype(_impl_.timestamp_limit_)*/uint64_t{0u}
  , /*decltype(_impl_.update_merkle_tree_)*/0u
  , /*decltype(_impl_.no_counters_)*/0u
  , /*decltype(_impl_.skip_verify_l1_info_root_)*/0u
  , /*decltype(_impl_.skip_first_change_l2_block_)*/0u
  , /*decltype(_impl_.skip_write_block_info_root_)*/0u
  , /*decltype(_impl_.get_keys_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcessBatchRequestV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessBatchRequestV2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessBatchRequestV2DefaultTypeInternal() {}
  union {
    ProcessBatchRequestV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessBatchRequestV2DefaultTypeInternal _ProcessBatchRequestV2_default_instance_;
PROTOBUF_CONSTEXPR ProcessStatelessBatchRequestV2_L1InfoTreeIndexMinTimestampEntry_DoNotUse::ProcessStatelessBatchRequestV2_L1InfoTreeIndexMinTimestampEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ProcessStatelessBatchRequestV2_L1InfoTreeIndexMinTimestampEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessStatelessBatchRequestV2_L1InfoTreeIndexMinTimestampEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessStatelessBatchRequestV2_L1InfoTreeIndexMinTimestampEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ProcessStatelessBatchRequestV2_L1InfoTreeIndexMinTimestampEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessStatelessBatchRequestV2_L1InfoTreeIndexMinTimestampEntry_DoNotUseDefaultTypeInternal _ProcessStatelessBatchRequestV2_L1InfoTreeIndexMinTimestampEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ProcessStatelessBatchRequestV2::ProcessStatelessBatchRequestV2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.l1_info_tree_index_min_timestamp_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.witness_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_stream_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.coinbase_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.old_acc_input_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.l1_info_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.forced_blockhash_l1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.context_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.trace_config_)*/nullptr
  , /*decltype(_impl_.timestamp_limit_)*/uint64_t{0u}
  , /*decltype(_impl_.no_counters_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcessStatelessBatchRequestV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessStatelessBatchRequestV2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessStatelessBatchRequestV2DefaultTypeInternal() {}
  union {
    ProcessStatelessBatchRequestV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessStatelessBatchRequestV2DefaultTypeInternal _ProcessStatelessBatchRequestV2_default_instance_;
PROTOBUF_CONSTEXPR L1DataV2::L1DataV2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.smt_proof_)*/{}
  , /*decltype(_impl_.global_exit_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.block_hash_l1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.min_timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct L1DataV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR L1DataV2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~L1DataV2DefaultTypeInternal() {}
  union {
    L1DataV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 L1DataV2DefaultTypeInternal _L1DataV2_default_instance_;
PROTOBUF_CONSTEXPR DebugV2::DebugV2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.new_state_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.new_acc_input_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.new_local_exit_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gas_limit_)*/uint64_t{0u}
  , /*decltype(_impl_.new_batch_num_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DebugV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugV2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugV2DefaultTypeInternal() {}
  union {
    DebugV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugV2DefaultTypeInternal _DebugV2_default_instance_;
PROTOBUF_CONSTEXPR ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse::ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUseDefaultTypeInternal _ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ProcessBatchResponseV2::ProcessBatchResponseV2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.block_responses_)*/{}
  , /*decltype(_impl_.read_write_addresses_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.smt_keys_)*/{}
  , /*decltype(_impl_.program_keys_)*/{}
  , /*decltype(_impl_.new_state_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.new_acc_input_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.new_local_exit_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.prover_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.old_state_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.debug_)*/nullptr
  , /*decltype(_impl_.new_batch_num_)*/uint64_t{0u}
  , /*decltype(_impl_.cnt_keccak_hashes_)*/0u
  , /*decltype(_impl_.cnt_poseidon_hashes_)*/0u
  , /*decltype(_impl_.cnt_poseidon_paddings_)*/0u
  , /*decltype(_impl_.cnt_mem_aligns_)*/0u
  , /*decltype(_impl_.cnt_arithmetics_)*/0u
  , /*decltype(_impl_.cnt_binaries_)*/0u
  , /*decltype(_impl_.cnt_steps_)*/0u
  , /*decltype(_impl_.cnt_sha256_hashes_)*/0u
  , /*decltype(_impl_.flush_id_)*/uint64_t{0u}
  , /*decltype(_impl_.stored_flush_id_)*/uint64_t{0u}
  , /*decltype(_impl_.error_)*/0
  , /*decltype(_impl_.invalid_batch_)*/0u
  , /*decltype(_impl_.gas_used_)*/uint64_t{0u}
  , /*decltype(_impl_.fork_id_)*/uint64_t{0u}
  , /*decltype(_impl_.error_rom_)*/0
  , /*decltype(_impl_.cnt_reserve_keccak_hashes_)*/0u
  , /*decltype(_impl_.cnt_reserve_poseidon_hashes_)*/0u
  , /*decltype(_impl_.cnt_reserve_poseidon_paddings_)*/0u
  , /*decltype(_impl_.cnt_reserve_mem_aligns_)*/0u
  , /*decltype(_impl_.cnt_reserve_arithmetics_)*/0u
  , /*decltype(_impl_.cnt_reserve_binaries_)*/0u
  , /*decltype(_impl_.cnt_reserve_steps_)*/0u
  , /*decltype(_impl_.cnt_reserve_sha256_hashes_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcessBatchResponseV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessBatchResponseV2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessBatchResponseV2DefaultTypeInternal() {}
  union {
    ProcessBatchResponseV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessBatchResponseV2DefaultTypeInternal _ProcessBatchResponseV2_default_instance_;
PROTOBUF_CONSTEXPR ResponseDebug::ResponseDebug(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_log_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseDebugDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseDebugDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseDebugDefaultTypeInternal() {}
  union {
    ResponseDebug _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseDebugDefaultTypeInternal _ResponseDebug_default_instance_;
PROTOBUF_CONSTEXPR TraceConfigV2::TraceConfigV2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tx_hash_to_generate_full_trace_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.disable_storage_)*/0u
  , /*decltype(_impl_.disable_stack_)*/0u
  , /*decltype(_impl_.enable_memory_)*/0u
  , /*decltype(_impl_.enable_return_data_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TraceConfigV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceConfigV2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceConfigV2DefaultTypeInternal() {}
  union {
    TraceConfigV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceConfigV2DefaultTypeInternal _TraceConfigV2_default_instance_;
PROTOBUF_CONSTEXPR OverrideAccountV2_StateEntry_DoNotUse::OverrideAccountV2_StateEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct OverrideAccountV2_StateEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OverrideAccountV2_StateEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OverrideAccountV2_StateEntry_DoNotUseDefaultTypeInternal() {}
  union {
    OverrideAccountV2_StateEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OverrideAccountV2_StateEntry_DoNotUseDefaultTypeInternal _OverrideAccountV2_StateEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR OverrideAccountV2_StateDiffEntry_DoNotUse::OverrideAccountV2_StateDiffEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct OverrideAccountV2_StateDiffEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OverrideAccountV2_StateDiffEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OverrideAccountV2_StateDiffEntry_DoNotUseDefaultTypeInternal() {}
  union {
    OverrideAccountV2_StateDiffEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OverrideAccountV2_StateDiffEntry_DoNotUseDefaultTypeInternal _OverrideAccountV2_StateDiffEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR OverrideAccountV2::OverrideAccountV2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.state_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.state_diff_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.balance_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nonce_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OverrideAccountV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR OverrideAccountV2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OverrideAccountV2DefaultTypeInternal() {}
  union {
    OverrideAccountV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OverrideAccountV2DefaultTypeInternal _OverrideAccountV2_default_instance_;
PROTOBUF_CONSTEXPR InfoReadWriteV2_ScStorageEntry_DoNotUse::InfoReadWriteV2_ScStorageEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct InfoReadWriteV2_ScStorageEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InfoReadWriteV2_ScStorageEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InfoReadWriteV2_ScStorageEntry_DoNotUseDefaultTypeInternal() {}
  union {
    InfoReadWriteV2_ScStorageEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InfoReadWriteV2_ScStorageEntry_DoNotUseDefaultTypeInternal _InfoReadWriteV2_ScStorageEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR InfoReadWriteV2::InfoReadWriteV2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sc_storage_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.nonce_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.balance_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sc_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sc_length_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InfoReadWriteV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR InfoReadWriteV2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InfoReadWriteV2DefaultTypeInternal() {}
  union {
    InfoReadWriteV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InfoReadWriteV2DefaultTypeInternal _InfoReadWriteV2_default_instance_;
PROTOBUF_CONSTEXPR FullTraceV2::FullTraceV2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.steps_)*/{}
  , /*decltype(_impl_.context_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FullTraceV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR FullTraceV2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FullTraceV2DefaultTypeInternal() {}
  union {
    FullTraceV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FullTraceV2DefaultTypeInternal _FullTraceV2_default_instance_;
PROTOBUF_CONSTEXPR TransactionContextV2::TransactionContextV2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.to_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.block_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.output_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gas_price_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.old_state_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gas_)*/uint64_t{0u}
  , /*decltype(_impl_.gas_used_)*/uint64_t{0u}
  , /*decltype(_impl_.nonce_)*/uint64_t{0u}
  , /*decltype(_impl_.tx_index_)*/uint64_t{0u}
  , /*decltype(_impl_.chain_id_)*/uint64_t{0u}
  , /*decltype(_impl_.execution_time_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransactionContextV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransactionContextV2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransactionContextV2DefaultTypeInternal() {}
  union {
    TransactionContextV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransactionContextV2DefaultTypeInternal _TransactionContextV2_default_instance_;
PROTOBUF_CONSTEXPR TransactionStepV2_StorageEntry_DoNotUse::TransactionStepV2_StorageEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TransactionStepV2_StorageEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransactionStepV2_StorageEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransactionStepV2_StorageEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TransactionStepV2_StorageEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransactionStepV2_StorageEntry_DoNotUseDefaultTypeInternal _TransactionStepV2_StorageEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TransactionStepV2::TransactionStepV2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stack_)*/{}
  , /*decltype(_impl_.storage_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.state_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.memory_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.return_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contract_)*/nullptr
  , /*decltype(_impl_.pc_)*/uint64_t{0u}
  , /*decltype(_impl_.gas_)*/uint64_t{0u}
  , /*decltype(_impl_.depth_)*/0u
  , /*decltype(_impl_.op_)*/0u
  , /*decltype(_impl_.gas_cost_)*/uint64_t{0u}
  , /*decltype(_impl_.gas_refund_)*/uint64_t{0u}
  , /*decltype(_impl_.memory_size_)*/0u
  , /*decltype(_impl_.memory_offset_)*/0u
  , /*decltype(_impl_.error_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransactionStepV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransactionStepV2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransactionStepV2DefaultTypeInternal() {}
  union {
    TransactionStepV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransactionStepV2DefaultTypeInternal _TransactionStepV2_default_instance_;
PROTOBUF_CONSTEXPR ContractV2::ContractV2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.caller_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gas_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ContractV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContractV2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContractV2DefaultTypeInternal() {}
  union {
    ContractV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContractV2DefaultTypeInternal _ContractV2_default_instance_;
PROTOBUF_CONSTEXPR ProcessBlockResponseV2::ProcessBlockResponseV2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.responses_)*/{}
  , /*decltype(_impl_.logs_)*/{}
  , /*decltype(_impl_.parent_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.coinbase_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ger_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.block_hash_l1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.block_info_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.block_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gas_limit_)*/uint64_t{0u}
  , /*decltype(_impl_.block_number_)*/uint64_t{0u}
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.gas_used_)*/uint64_t{0u}
  , /*decltype(_impl_.error_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcessBlockResponseV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessBlockResponseV2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessBlockResponseV2DefaultTypeInternal() {}
  union {
    ProcessBlockResponseV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessBlockResponseV2DefaultTypeInternal _ProcessBlockResponseV2_default_instance_;
PROTOBUF_CONSTEXPR ProcessTransactionResponseV2::ProcessTransactionResponseV2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.logs_)*/{}
  , /*decltype(_impl_.tx_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tx_hash_l2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rlp_tx_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.block_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.return_value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.create_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.effective_gas_price_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.full_trace_)*/nullptr
  , /*decltype(_impl_.block_number_)*/uint64_t{0u}
  , /*decltype(_impl_.gas_left_)*/uint64_t{0u}
  , /*decltype(_impl_.gas_used_)*/uint64_t{0u}
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.error_)*/0
  , /*decltype(_impl_.cumulative_gas_used_)*/uint64_t{0u}
  , /*decltype(_impl_.gas_refunded_)*/uint64_t{0u}
  , /*decltype(_impl_.effective_percentage_)*/0u
  , /*decltype(_impl_.has_gasprice_opcode_)*/0u
  , /*decltype(_impl_.has_balance_opcode_)*/0u
  , /*decltype(_impl_.status_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcessTransactionResponseV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessTransactionResponseV2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessTransactionResponseV2DefaultTypeInternal() {}
  union {
    ProcessTransactionResponseV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessTransactionResponseV2DefaultTypeInternal _ProcessTransactionResponseV2_default_instance_;
PROTOBUF_CONSTEXPR LogV2::LogV2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.topics_)*/{}
  , /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tx_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tx_hash_l2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.block_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.block_number_)*/uint64_t{0u}
  , /*decltype(_impl_.tx_index_)*/0u
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogV2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogV2DefaultTypeInternal() {}
  union {
    LogV2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogV2DefaultTypeInternal _LogV2_default_instance_;
}  // namespace v1
}  // namespace executor
static ::_pb::Metadata file_level_metadata_executor_2eproto[45];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_executor_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_executor_2eproto = nullptr;

const uint32_t TableStruct_executor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest_DbEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest_DbEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest_DbEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest_DbEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest_StateOverrideEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest_StateOverrideEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest_StateOverrideEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest_StateOverrideEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, _impl_.old_state_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, _impl_.old_acc_input_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, _impl_.old_batch_num_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, _impl_.chain_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, _impl_.fork_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, _impl_.batch_l2_data_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, _impl_.global_exit_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, _impl_.eth_timestamp_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, _impl_.coinbase_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, _impl_.update_merkle_tree_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, _impl_.no_counters_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, _impl_.db_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, _impl_.contracts_bytecode_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, _impl_.trace_config_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, _impl_.context_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, _impl_.state_override_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, _impl_.new_state_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, _impl_.new_acc_input_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, _impl_.new_local_exit_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, _impl_.new_batch_num_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, _impl_.cnt_keccak_hashes_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, _impl_.cnt_poseidon_hashes_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, _impl_.cnt_poseidon_paddings_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, _impl_.cnt_mem_aligns_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, _impl_.cnt_arithmetics_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, _impl_.cnt_binaries_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, _impl_.cnt_steps_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, _impl_.cumulative_gas_used_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, _impl_.responses_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, _impl_.read_write_addresses_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, _impl_.flush_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, _impl_.stored_flush_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, _impl_.prover_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, _impl_.fork_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::GetFlushStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::GetFlushStatusResponse, _impl_.stored_flush_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::GetFlushStatusResponse, _impl_.storing_flush_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::GetFlushStatusResponse, _impl_.last_flush_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::GetFlushStatusResponse, _impl_.pending_to_flush_nodes_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::GetFlushStatusResponse, _impl_.pending_to_flush_program_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::GetFlushStatusResponse, _impl_.storing_nodes_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::GetFlushStatusResponse, _impl_.storing_program_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::GetFlushStatusResponse, _impl_.prover_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::TraceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::TraceConfig, _impl_.disable_storage_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TraceConfig, _impl_.disable_stack_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TraceConfig, _impl_.enable_memory_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TraceConfig, _impl_.enable_return_data_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TraceConfig, _impl_.tx_hash_to_generate_full_trace_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccount_StateEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccount_StateEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccount_StateEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccount_StateEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccount_StateDiffEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccount_StateDiffEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccount_StateDiffEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccount_StateDiffEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccount, _impl_.balance_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccount, _impl_.nonce_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccount, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccount, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccount, _impl_.state_diff_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::InfoReadWrite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::InfoReadWrite, _impl_.nonce_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::InfoReadWrite, _impl_.balance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::FullTrace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::FullTrace, _impl_.context_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::FullTrace, _impl_.steps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, _impl_.to_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, _impl_.gas_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, _impl_.batch_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, _impl_.output_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, _impl_.gas_used_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, _impl_.gas_price_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, _impl_.execution_time_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, _impl_.old_state_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep_StorageEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep_StorageEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep_StorageEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep_StorageEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, _impl_.state_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, _impl_.depth_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, _impl_.pc_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, _impl_.gas_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, _impl_.gas_cost_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, _impl_.gas_refund_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, _impl_.op_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, _impl_.stack_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, _impl_.memory_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, _impl_.memory_size_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, _impl_.memory_offset_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, _impl_.return_data_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, _impl_.contract_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, _impl_.storage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::Contract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::Contract, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Contract, _impl_.caller_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Contract, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Contract, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Contract, _impl_.gas_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Contract, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, _impl_.tx_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, _impl_.rlp_tx_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, _impl_.return_value_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, _impl_.gas_left_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, _impl_.gas_used_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, _impl_.gas_refunded_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, _impl_.create_address_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, _impl_.state_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, _impl_.logs_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, _impl_.full_trace_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, _impl_.effective_gas_price_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, _impl_.effective_percentage_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, _impl_.has_gasprice_opcode_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, _impl_.has_balance_opcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::Log, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::Log, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Log, _impl_.topics_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Log, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Log, _impl_.batch_number_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Log, _impl_.tx_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Log, _impl_.tx_index_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Log, _impl_.batch_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Log, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2_DbEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2_DbEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2_DbEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2_DbEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2_StateOverrideEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2_StateOverrideEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2_StateOverrideEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2_StateOverrideEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, _impl_.old_state_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, _impl_.old_acc_input_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, _impl_.old_batch_num_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, _impl_.chain_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, _impl_.fork_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, _impl_.batch_l2_data_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, _impl_.l1_info_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, _impl_.timestamp_limit_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, _impl_.coinbase_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, _impl_.forced_blockhash_l1_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, _impl_.update_merkle_tree_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, _impl_.no_counters_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, _impl_.skip_verify_l1_info_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, _impl_.skip_first_change_l2_block_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, _impl_.skip_write_block_info_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, _impl_.l1_info_tree_data_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, _impl_.db_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, _impl_.contracts_bytecode_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, _impl_.trace_config_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, _impl_.context_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, _impl_.get_keys_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, _impl_.state_override_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, _impl_.debug_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessStatelessBatchRequestV2_L1InfoTreeIndexMinTimestampEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessStatelessBatchRequestV2_L1InfoTreeIndexMinTimestampEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessStatelessBatchRequestV2_L1InfoTreeIndexMinTimestampEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessStatelessBatchRequestV2_L1InfoTreeIndexMinTimestampEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessStatelessBatchRequestV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessStatelessBatchRequestV2, _impl_.witness_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessStatelessBatchRequestV2, _impl_.data_stream_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessStatelessBatchRequestV2, _impl_.coinbase_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessStatelessBatchRequestV2, _impl_.old_acc_input_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessStatelessBatchRequestV2, _impl_.l1_info_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessStatelessBatchRequestV2, _impl_.timestamp_limit_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessStatelessBatchRequestV2, _impl_.forced_blockhash_l1_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessStatelessBatchRequestV2, _impl_.context_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessStatelessBatchRequestV2, _impl_.trace_config_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessStatelessBatchRequestV2, _impl_.l1_info_tree_index_min_timestamp_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessStatelessBatchRequestV2, _impl_.no_counters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::L1DataV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::L1DataV2, _impl_.global_exit_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::L1DataV2, _impl_.block_hash_l1_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::L1DataV2, _impl_.min_timestamp_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::L1DataV2, _impl_.smt_proof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::DebugV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::DebugV2, _impl_.gas_limit_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::DebugV2, _impl_.new_state_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::DebugV2, _impl_.new_acc_input_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::DebugV2, _impl_.new_local_exit_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::DebugV2, _impl_.new_batch_num_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _impl_.new_state_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _impl_.new_acc_input_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _impl_.new_local_exit_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _impl_.new_batch_num_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _impl_.cnt_keccak_hashes_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _impl_.cnt_poseidon_hashes_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _impl_.cnt_poseidon_paddings_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _impl_.cnt_mem_aligns_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _impl_.cnt_arithmetics_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _impl_.cnt_binaries_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _impl_.cnt_steps_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _impl_.cnt_sha256_hashes_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _impl_.block_responses_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _impl_.read_write_addresses_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _impl_.flush_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _impl_.stored_flush_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _impl_.prover_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _impl_.gas_used_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _impl_.smt_keys_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _impl_.program_keys_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _impl_.fork_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _impl_.invalid_batch_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _impl_.error_rom_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _impl_.cnt_reserve_keccak_hashes_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _impl_.cnt_reserve_poseidon_hashes_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _impl_.cnt_reserve_poseidon_paddings_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _impl_.cnt_reserve_mem_aligns_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _impl_.cnt_reserve_arithmetics_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _impl_.cnt_reserve_binaries_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _impl_.cnt_reserve_steps_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _impl_.cnt_reserve_sha256_hashes_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _impl_.old_state_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _impl_.debug_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ResponseDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ResponseDebug, _impl_.error_log_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::TraceConfigV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::TraceConfigV2, _impl_.disable_storage_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TraceConfigV2, _impl_.disable_stack_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TraceConfigV2, _impl_.enable_memory_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TraceConfigV2, _impl_.enable_return_data_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TraceConfigV2, _impl_.tx_hash_to_generate_full_trace_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccountV2_StateEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccountV2_StateEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccountV2_StateEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccountV2_StateEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccountV2_StateDiffEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccountV2_StateDiffEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccountV2_StateDiffEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccountV2_StateDiffEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccountV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccountV2, _impl_.balance_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccountV2, _impl_.nonce_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccountV2, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccountV2, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccountV2, _impl_.state_diff_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::InfoReadWriteV2_ScStorageEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::InfoReadWriteV2_ScStorageEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::InfoReadWriteV2_ScStorageEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::InfoReadWriteV2_ScStorageEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::InfoReadWriteV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::InfoReadWriteV2, _impl_.nonce_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::InfoReadWriteV2, _impl_.balance_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::InfoReadWriteV2, _impl_.sc_code_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::InfoReadWriteV2, _impl_.sc_storage_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::InfoReadWriteV2, _impl_.sc_length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::FullTraceV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::FullTraceV2, _impl_.context_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::FullTraceV2, _impl_.steps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContextV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContextV2, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContextV2, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContextV2, _impl_.to_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContextV2, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContextV2, _impl_.gas_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContextV2, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContextV2, _impl_.block_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContextV2, _impl_.output_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContextV2, _impl_.gas_used_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContextV2, _impl_.gas_price_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContextV2, _impl_.execution_time_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContextV2, _impl_.old_state_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContextV2, _impl_.nonce_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContextV2, _impl_.tx_index_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContextV2, _impl_.chain_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2_StorageEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2_StorageEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2_StorageEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2_StorageEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2, _impl_.state_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2, _impl_.depth_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2, _impl_.pc_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2, _impl_.gas_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2, _impl_.gas_cost_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2, _impl_.gas_refund_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2, _impl_.op_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2, _impl_.stack_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2, _impl_.memory_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2, _impl_.memory_size_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2, _impl_.memory_offset_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2, _impl_.return_data_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2, _impl_.contract_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2, _impl_.storage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ContractV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ContractV2, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ContractV2, _impl_.caller_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ContractV2, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ContractV2, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ContractV2, _impl_.gas_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ContractV2, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBlockResponseV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBlockResponseV2, _impl_.parent_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBlockResponseV2, _impl_.coinbase_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBlockResponseV2, _impl_.gas_limit_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBlockResponseV2, _impl_.block_number_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBlockResponseV2, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBlockResponseV2, _impl_.ger_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBlockResponseV2, _impl_.block_hash_l1_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBlockResponseV2, _impl_.gas_used_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBlockResponseV2, _impl_.block_info_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBlockResponseV2, _impl_.block_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBlockResponseV2, _impl_.responses_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBlockResponseV2, _impl_.logs_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBlockResponseV2, _impl_.error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, _impl_.tx_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, _impl_.tx_hash_l2_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, _impl_.rlp_tx_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, _impl_.block_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, _impl_.block_number_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, _impl_.return_value_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, _impl_.gas_left_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, _impl_.gas_used_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, _impl_.cumulative_gas_used_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, _impl_.gas_refunded_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, _impl_.create_address_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, _impl_.state_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, _impl_.logs_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, _impl_.full_trace_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, _impl_.effective_gas_price_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, _impl_.effective_percentage_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, _impl_.has_gasprice_opcode_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, _impl_.has_balance_opcode_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::LogV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::executor::v1::LogV2, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::LogV2, _impl_.topics_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::LogV2, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::LogV2, _impl_.block_number_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::LogV2, _impl_.tx_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::LogV2, _impl_.tx_hash_l2_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::LogV2, _impl_.tx_index_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::LogV2, _impl_.block_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::LogV2, _impl_.index_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::executor::v1::ProcessBatchRequest_DbEntry_DoNotUse)},
  { 10, 18, -1, sizeof(::executor::v1::ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse)},
  { 20, 28, -1, sizeof(::executor::v1::ProcessBatchRequest_StateOverrideEntry_DoNotUse)},
  { 30, -1, -1, sizeof(::executor::v1::ProcessBatchRequest)},
  { 53, 61, -1, sizeof(::executor::v1::ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse)},
  { 63, -1, -1, sizeof(::executor::v1::ProcessBatchResponse)},
  { 88, -1, -1, sizeof(::executor::v1::GetFlushStatusResponse)},
  { 102, -1, -1, sizeof(::executor::v1::TraceConfig)},
  { 113, 121, -1, sizeof(::executor::v1::OverrideAccount_StateEntry_DoNotUse)},
  { 123, 131, -1, sizeof(::executor::v1::OverrideAccount_StateDiffEntry_DoNotUse)},
  { 133, -1, -1, sizeof(::executor::v1::OverrideAccount)},
  { 144, -1, -1, sizeof(::executor::v1::InfoReadWrite)},
  { 152, -1, -1, sizeof(::executor::v1::FullTrace)},
  { 160, -1, -1, sizeof(::executor::v1::TransactionContext)},
  { 178, 186, -1, sizeof(::executor::v1::TransactionStep_StorageEntry_DoNotUse)},
  { 188, -1, -1, sizeof(::executor::v1::TransactionStep)},
  { 209, -1, -1, sizeof(::executor::v1::Contract)},
  { 221, -1, -1, sizeof(::executor::v1::ProcessTransactionResponse)},
  { 243, -1, -1, sizeof(::executor::v1::Log)},
  { 257, 265, -1, sizeof(::executor::v1::ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse)},
  { 267, 275, -1, sizeof(::executor::v1::ProcessBatchRequestV2_DbEntry_DoNotUse)},
  { 277, 285, -1, sizeof(::executor::v1::ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse)},
  { 287, 295, -1, sizeof(::executor::v1::ProcessBatchRequestV2_StateOverrideEntry_DoNotUse)},
  { 297, -1, -1, sizeof(::executor::v1::ProcessBatchRequestV2)},
  { 327, 335, -1, sizeof(::executor::v1::ProcessStatelessBatchRequestV2_L1InfoTreeIndexMinTimestampEntry_DoNotUse)},
  { 337, -1, -1, sizeof(::executor::v1::ProcessStatelessBatchRequestV2)},
  { 354, -1, -1, sizeof(::executor::v1::L1DataV2)},
  { 364, -1, -1, sizeof(::executor::v1::DebugV2)},
  { 375, 383, -1, sizeof(::executor::v1::ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse)},
  { 385, -1, -1, sizeof(::executor::v1::ProcessBatchResponseV2)},
  { 425, -1, -1, sizeof(::executor::v1::ResponseDebug)},
  { 432, -1, -1, sizeof(::executor::v1::TraceConfigV2)},
  { 443, 451, -1, sizeof(::executor::v1::OverrideAccountV2_StateEntry_DoNotUse)},
  { 453, 461, -1, sizeof(::executor::v1::OverrideAccountV2_StateDiffEntry_DoNotUse)},
  { 463, -1, -1, sizeof(::executor::v1::OverrideAccountV2)},
  { 474, 482, -1, sizeof(::executor::v1::InfoReadWriteV2_ScStorageEntry_DoNotUse)},
  { 484, -1, -1, sizeof(::executor::v1::InfoReadWriteV2)},
  { 495, -1, -1, sizeof(::executor::v1::FullTraceV2)},
  { 503, -1, -1, sizeof(::executor::v1::TransactionContextV2)},
  { 524, 532, -1, sizeof(::executor::v1::TransactionStepV2_StorageEntry_DoNotUse)},
  { 534, -1, -1, sizeof(::executor::v1::TransactionStepV2)},
  { 555, -1, -1, sizeof(::executor::v1::ContractV2)},
  { 567, -1, -1, sizeof(::executor::v1::ProcessBlockResponseV2)},
  { 586, -1, -1, sizeof(::executor::v1::ProcessTransactionResponseV2)},
  { 613, -1, -1, sizeof(::executor::v1::LogV2)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::executor::v1::_ProcessBatchRequest_DbEntry_DoNotUse_default_instance_._instance,
  &::executor::v1::_ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse_default_instance_._instance,
  &::executor::v1::_ProcessBatchRequest_StateOverrideEntry_DoNotUse_default_instance_._instance,
  &::executor::v1::_ProcessBatchRequest_default_instance_._instance,
  &::executor::v1::_ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse_default_instance_._instance,
  &::executor::v1::_ProcessBatchResponse_default_instance_._instance,
  &::executor::v1::_GetFlushStatusResponse_default_instance_._instance,
  &::executor::v1::_TraceConfig_default_instance_._instance,
  &::executor::v1::_OverrideAccount_StateEntry_DoNotUse_default_instance_._instance,
  &::executor::v1::_OverrideAccount_StateDiffEntry_DoNotUse_default_instance_._instance,
  &::executor::v1::_OverrideAccount_default_instance_._instance,
  &::executor::v1::_InfoReadWrite_default_instance_._instance,
  &::executor::v1::_FullTrace_default_instance_._instance,
  &::executor::v1::_TransactionContext_default_instance_._instance,
  &::executor::v1::_TransactionStep_StorageEntry_DoNotUse_default_instance_._instance,
  &::executor::v1::_TransactionStep_default_instance_._instance,
  &::executor::v1::_Contract_default_instance_._instance,
  &::executor::v1::_ProcessTransactionResponse_default_instance_._instance,
  &::executor::v1::_Log_default_instance_._instance,
  &::executor::v1::_ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse_default_instance_._instance,
  &::executor::v1::_ProcessBatchRequestV2_DbEntry_DoNotUse_default_instance_._instance,
  &::executor::v1::_ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse_default_instance_._instance,
  &::executor::v1::_ProcessBatchRequestV2_StateOverrideEntry_DoNotUse_default_instance_._instance,
  &::executor::v1::_ProcessBatchRequestV2_default_instance_._instance,
  &::executor::v1::_ProcessStatelessBatchRequestV2_L1InfoTreeIndexMinTimestampEntry_DoNotUse_default_instance_._instance,
  &::executor::v1::_ProcessStatelessBatchRequestV2_default_instance_._instance,
  &::executor::v1::_L1DataV2_default_instance_._instance,
  &::executor::v1::_DebugV2_default_instance_._instance,
  &::executor::v1::_ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse_default_instance_._instance,
  &::executor::v1::_ProcessBatchResponseV2_default_instance_._instance,
  &::executor::v1::_ResponseDebug_default_instance_._instance,
  &::executor::v1::_TraceConfigV2_default_instance_._instance,
  &::executor::v1::_OverrideAccountV2_StateEntry_DoNotUse_default_instance_._instance,
  &::executor::v1::_OverrideAccountV2_StateDiffEntry_DoNotUse_default_instance_._instance,
  &::executor::v1::_OverrideAccountV2_default_instance_._instance,
  &::executor::v1::_InfoReadWriteV2_ScStorageEntry_DoNotUse_default_instance_._instance,
  &::executor::v1::_InfoReadWriteV2_default_instance_._instance,
  &::executor::v1::_FullTraceV2_default_instance_._instance,
  &::executor::v1::_TransactionContextV2_default_instance_._instance,
  &::executor::v1::_TransactionStepV2_StorageEntry_DoNotUse_default_instance_._instance,
  &::executor::v1::_TransactionStepV2_default_instance_._instance,
  &::executor::v1::_ContractV2_default_instance_._instance,
  &::executor::v1::_ProcessBlockResponseV2_default_instance_._instance,
  &::executor::v1::_ProcessTransactionResponseV2_default_instance_._instance,
  &::executor::v1::_LogV2_default_instance_._instance,
};

const char descriptor_table_protodef_executor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016executor.proto\022\013executor.v1\032\033google/pr"
  "otobuf/empty.proto\"\361\005\n\023ProcessBatchReque"
  "st\022\026\n\016old_state_root\030\001 \001(\014\022\032\n\022old_acc_in"
  "put_hash\030\002 \001(\014\022\025\n\rold_batch_num\030\003 \001(\004\022\020\n"
  "\010chain_id\030\004 \001(\004\022\017\n\007fork_id\030\005 \001(\004\022\025\n\rbatc"
  "h_l2_data\030\006 \001(\014\022\030\n\020global_exit_root\030\007 \001("
  "\014\022\025\n\reth_timestamp\030\010 \001(\004\022\020\n\010coinbase\030\t \001"
  "(\t\022\032\n\022update_merkle_tree\030\n \001(\r\022\023\n\013no_cou"
  "nters\030\013 \001(\004\022\014\n\004from\030\014 \001(\t\0224\n\002db\030\r \003(\0132(."
  "executor.v1.ProcessBatchRequest.DbEntry\022"
  "S\n\022contracts_bytecode\030\016 \003(\01327.executor.v"
  "1.ProcessBatchRequest.ContractsBytecodeE"
  "ntry\022.\n\014trace_config\030\017 \001(\0132\030.executor.v1"
  ".TraceConfig\022\022\n\ncontext_id\030\020 \001(\t\022K\n\016stat"
  "e_override\030\021 \003(\01323.executor.v1.ProcessBa"
  "tchRequest.StateOverrideEntry\032)\n\007DbEntry"
  "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\0328\n\026Cont"
  "ractsBytecodeEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\t:\0028\001\032R\n\022StateOverrideEntry\022\013\n\003key\030"
  "\001 \001(\t\022+\n\005value\030\002 \001(\0132\034.executor.v1.Overr"
  "ideAccount:\0028\001\"\262\005\n\024ProcessBatchResponse\022"
  "\026\n\016new_state_root\030\001 \001(\014\022\032\n\022new_acc_input"
  "_hash\030\002 \001(\014\022\033\n\023new_local_exit_root\030\003 \001(\014"
  "\022\025\n\rnew_batch_num\030\004 \001(\004\022\031\n\021cnt_keccak_ha"
  "shes\030\005 \001(\r\022\033\n\023cnt_poseidon_hashes\030\006 \001(\r\022"
  "\035\n\025cnt_poseidon_paddings\030\007 \001(\r\022\026\n\016cnt_me"
  "m_aligns\030\010 \001(\r\022\027\n\017cnt_arithmetics\030\t \001(\r\022"
  "\024\n\014cnt_binaries\030\n \001(\r\022\021\n\tcnt_steps\030\013 \001(\r"
  "\022\033\n\023cumulative_gas_used\030\014 \001(\004\022:\n\trespons"
  "es\030\r \003(\0132\'.executor.v1.ProcessTransactio"
  "nResponse\022)\n\005error\030\016 \001(\0162\032.executor.v1.E"
  "xecutorError\022W\n\024read_write_addresses\030\017 \003"
  "(\01329.executor.v1.ProcessBatchResponse.Re"
  "adWriteAddressesEntry\022\020\n\010flush_id\030\020 \001(\004\022"
  "\027\n\017stored_flush_id\030\021 \001(\004\022\021\n\tprover_id\030\022 "
  "\001(\t\022\017\n\007fork_id\030\023 \001(\004\032U\n\027ReadWriteAddress"
  "esEntry\022\013\n\003key\030\001 \001(\t\022)\n\005value\030\002 \001(\0132\032.ex"
  "ecutor.v1.InfoReadWrite:\0028\001\"\347\001\n\026GetFlush"
  "StatusResponse\022\027\n\017stored_flush_id\030\001 \001(\004\022"
  "\030\n\020storing_flush_id\030\002 \001(\004\022\025\n\rlast_flush_"
  "id\030\003 \001(\004\022\036\n\026pending_to_flush_nodes\030\004 \001(\004"
  "\022 \n\030pending_to_flush_program\030\005 \001(\004\022\025\n\rst"
  "oring_nodes\030\006 \001(\004\022\027\n\017storing_program\030\007 \001"
  "(\004\022\021\n\tprover_id\030\010 \001(\t\"\230\001\n\013TraceConfig\022\027\n"
  "\017disable_storage\030\001 \001(\r\022\025\n\rdisable_stack\030"
  "\002 \001(\r\022\025\n\renable_memory\030\003 \001(\r\022\032\n\022enable_r"
  "eturn_data\030\004 \001(\r\022&\n\036tx_hash_to_generate_"
  "full_trace\030\005 \001(\014\"\230\002\n\017OverrideAccount\022\017\n\007"
  "balance\030\001 \001(\014\022\r\n\005nonce\030\002 \001(\004\022\014\n\004code\030\003 \001"
  "(\014\0226\n\005state\030\004 \003(\0132\'.executor.v1.Override"
  "Account.StateEntry\022\?\n\nstate_diff\030\005 \003(\0132+"
  ".executor.v1.OverrideAccount.StateDiffEn"
  "try\032,\n\nStateEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030"
  "\002 \001(\t:\0028\001\0320\n\016StateDiffEntry\022\013\n\003key\030\001 \001(\t"
  "\022\r\n\005value\030\002 \001(\t:\0028\001\"/\n\rInfoReadWrite\022\r\n\005"
  "nonce\030\001 \001(\t\022\017\n\007balance\030\002 \001(\t\"j\n\tFullTrac"
  "e\0220\n\007context\030\001 \001(\0132\037.executor.v1.Transac"
  "tionContext\022+\n\005steps\030\002 \003(\0132\034.executor.v1"
  ".TransactionStep\"\332\001\n\022TransactionContext\022"
  "\014\n\004type\030\001 \001(\t\022\014\n\004from\030\002 \001(\t\022\n\n\002to\030\003 \001(\t\022"
  "\014\n\004data\030\004 \001(\014\022\013\n\003gas\030\005 \001(\004\022\r\n\005value\030\006 \001("
  "\t\022\r\n\005batch\030\007 \001(\014\022\016\n\006output\030\010 \001(\014\022\020\n\010gas_"
  "used\030\t \001(\004\022\021\n\tgas_price\030\n \001(\t\022\026\n\016executi"
  "on_time\030\013 \001(\r\022\026\n\016old_state_root\030\014 \001(\014\"\232\003"
  "\n\017TransactionStep\022\022\n\nstate_root\030\001 \001(\014\022\r\n"
  "\005depth\030\002 \001(\r\022\n\n\002pc\030\003 \001(\004\022\013\n\003gas\030\004 \001(\004\022\020\n"
  "\010gas_cost\030\005 \001(\004\022\022\n\ngas_refund\030\006 \001(\004\022\n\n\002o"
  "p\030\007 \001(\r\022\r\n\005stack\030\010 \003(\t\022\016\n\006memory\030\t \001(\014\022\023"
  "\n\013memory_size\030\n \001(\r\022\025\n\rmemory_offset\030\013 \001"
  "(\r\022\023\n\013return_data\030\014 \001(\014\022\'\n\010contract\030\r \001("
  "\0132\025.executor.v1.Contract\022$\n\005error\030\016 \001(\0162"
  "\025.executor.v1.RomError\022:\n\007storage\030\017 \003(\0132"
  ").executor.v1.TransactionStep.StorageEnt"
  "ry\032.\n\014StorageEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\t:\0028\001\"c\n\010Contract\022\017\n\007address\030\001 \001(\t\022"
  "\016\n\006caller\030\002 \001(\t\022\r\n\005value\030\003 \001(\t\022\014\n\004data\030\004"
  " \001(\014\022\013\n\003gas\030\005 \001(\004\022\014\n\004type\030\006 \001(\t\"\255\003\n\032Proc"
  "essTransactionResponse\022\017\n\007tx_hash\030\001 \001(\014\022"
  "\016\n\006rlp_tx\030\002 \001(\014\022\014\n\004type\030\003 \001(\r\022\024\n\014return_"
  "value\030\004 \001(\014\022\020\n\010gas_left\030\005 \001(\004\022\020\n\010gas_use"
  "d\030\006 \001(\004\022\024\n\014gas_refunded\030\007 \001(\004\022$\n\005error\030\010"
  " \001(\0162\025.executor.v1.RomError\022\026\n\016create_ad"
  "dress\030\t \001(\t\022\022\n\nstate_root\030\n \001(\014\022\036\n\004logs\030"
  "\013 \003(\0132\020.executor.v1.Log\022*\n\nfull_trace\030\016 "
  "\001(\0132\026.executor.v1.FullTrace\022\033\n\023effective"
  "_gas_price\030\017 \001(\t\022\034\n\024effective_percentage"
  "\030\020 \001(\r\022\033\n\023has_gasprice_opcode\030\021 \001(\r\022\032\n\022h"
  "as_balance_opcode\030\022 \001(\r\"\220\001\n\003Log\022\017\n\007addre"
  "ss\030\001 \001(\t\022\016\n\006topics\030\002 \003(\014\022\014\n\004data\030\003 \001(\014\022\024"
  "\n\014batch_number\030\004 \001(\004\022\017\n\007tx_hash\030\005 \001(\014\022\020\n"
  "\010tx_index\030\006 \001(\r\022\022\n\nbatch_hash\030\007 \001(\014\022\r\n\005i"
  "ndex\030\010 \001(\r\"\332\010\n\025ProcessBatchRequestV2\022\026\n\016"
  "old_state_root\030\001 \001(\014\022\032\n\022old_acc_input_ha"
  "sh\030\002 \001(\014\022\025\n\rold_batch_num\030\003 \001(\004\022\020\n\010chain"
  "_id\030\004 \001(\004\022\017\n\007fork_id\030\005 \001(\004\022\025\n\rbatch_l2_d"
  "ata\030\006 \001(\014\022\024\n\014l1_info_root\030\007 \001(\014\022\027\n\017times"
  "tamp_limit\030\010 \001(\004\022\020\n\010coinbase\030\t \001(\t\022\033\n\023fo"
  "rced_blockhash_l1\030\n \001(\014\022\032\n\022update_merkle"
  "_tree\030\013 \001(\r\022\023\n\013no_counters\030\014 \001(\r\022\014\n\004from"
  "\030\r \001(\t\022 \n\030skip_verify_l1_info_root\030\016 \001(\r"
  "\022\"\n\032skip_first_change_l2_block\030\017 \001(\r\022\"\n\032"
  "skip_write_block_info_root\030\020 \001(\r\022Q\n\021l1_i"
  "nfo_tree_data\030\021 \003(\01326.executor.v1.Proces"
  "sBatchRequestV2.L1InfoTreeDataEntry\0226\n\002d"
  "b\030\022 \003(\0132*.executor.v1.ProcessBatchReques"
  "tV2.DbEntry\022U\n\022contracts_bytecode\030\023 \003(\0132"
  "9.executor.v1.ProcessBatchRequestV2.Cont"
  "ractsBytecodeEntry\0220\n\014trace_config\030\024 \001(\013"
  "2\032.executor.v1.TraceConfigV2\022\022\n\ncontext_"
  "id\030\025 \001(\t\022\020\n\010get_keys\030\026 \001(\r\022M\n\016state_over"
  "ride\030\027 \003(\01325.executor.v1.ProcessBatchReq"
  "uestV2.StateOverrideEntry\022#\n\005debug\030\030 \001(\013"
  "2\024.executor.v1.DebugV2\032L\n\023L1InfoTreeData"
  "Entry\022\013\n\003key\030\001 \001(\r\022$\n\005value\030\002 \001(\0132\025.exec"
  "utor.v1.L1DataV2:\0028\001\032)\n\007DbEntry\022\013\n\003key\030\001"
  " \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\0328\n\026ContractsByte"
  "codeEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028"
  "\001\032T\n\022StateOverrideEntry\022\013\n\003key\030\001 \001(\t\022-\n\005"
  "value\030\002 \001(\0132\036.executor.v1.OverrideAccoun"
  "tV2:\0028\001\"\327\003\n\036ProcessStatelessBatchRequest"
  "V2\022\017\n\007witness\030\001 \001(\014\022\023\n\013data_stream\030\002 \001(\014"
  "\022\020\n\010coinbase\030\003 \001(\t\022\032\n\022old_acc_input_hash"
  "\030\004 \001(\014\022\024\n\014l1_info_root\030\005 \001(\014\022\027\n\017timestam"
  "p_limit\030\006 \001(\004\022\033\n\023forced_blockhash_l1\030\007 \001"
  "(\014\022\022\n\ncontext_id\030\010 \001(\t\0220\n\014trace_config\030\t"
  " \001(\0132\032.executor.v1.TraceConfigV2\022v\n l1_i"
  "nfo_tree_index_min_timestamp\030\n \003(\0132L.exe"
  "cutor.v1.ProcessStatelessBatchRequestV2."
  "L1InfoTreeIndexMinTimestampEntry\022\023\n\013no_c"
  "ounters\030\013 \001(\r\032B\n L1InfoTreeIndexMinTimes"
  "tampEntry\022\013\n\003key\030\001 \001(\004\022\r\n\005value\030\002 \001(\004:\0028"
  "\001\"e\n\010L1DataV2\022\030\n\020global_exit_root\030\001 \001(\014\022"
  "\025\n\rblock_hash_l1\030\002 \001(\014\022\025\n\rmin_timestamp\030"
  "\003 \001(\004\022\021\n\tsmt_proof\030\004 \003(\014\"\204\001\n\007DebugV2\022\021\n\t"
  "gas_limit\030\001 \001(\004\022\026\n\016new_state_root\030\002 \001(\014\022"
  "\032\n\022new_acc_input_hash\030\003 \001(\014\022\033\n\023new_local"
  "_exit_root\030\004 \001(\014\022\025\n\rnew_batch_num\030\005 \001(\004\""
  "\202\t\n\026ProcessBatchResponseV2\022\026\n\016new_state_"
  "root\030\001 \001(\014\022\032\n\022new_acc_input_hash\030\002 \001(\014\022\033"
  "\n\023new_local_exit_root\030\003 \001(\014\022\025\n\rnew_batch"
  "_num\030\004 \001(\004\022\031\n\021cnt_keccak_hashes\030\005 \001(\r\022\033\n"
  "\023cnt_poseidon_hashes\030\006 \001(\r\022\035\n\025cnt_poseid"
  "on_paddings\030\007 \001(\r\022\026\n\016cnt_mem_aligns\030\010 \001("
  "\r\022\027\n\017cnt_arithmetics\030\t \001(\r\022\024\n\014cnt_binari"
  "es\030\n \001(\r\022\021\n\tcnt_steps\030\013 \001(\r\022\031\n\021cnt_sha25"
  "6_hashes\030\014 \001(\r\022<\n\017block_responses\030\r \003(\0132"
  "#.executor.v1.ProcessBlockResponseV2\022)\n\005"
  "error\030\016 \001(\0162\032.executor.v1.ExecutorError\022"
  "Y\n\024read_write_addresses\030\017 \003(\0132;.executor"
  ".v1.ProcessBatchResponseV2.ReadWriteAddr"
  "essesEntry\022\020\n\010flush_id\030\020 \001(\004\022\027\n\017stored_f"
  "lush_id\030\021 \001(\004\022\021\n\tprover_id\030\022 \001(\t\022\020\n\010gas_"
  "used\030\023 \001(\004\022\020\n\010smt_keys\030\024 \003(\014\022\024\n\014program_"
  "keys\030\025 \003(\014\022\017\n\007fork_id\030\026 \001(\004\022\025\n\rinvalid_b"
  "atch\030\027 \001(\r\022(\n\terror_rom\030\030 \001(\0162\025.executor"
  ".v1.RomError\022!\n\031cnt_reserve_keccak_hashe"
  "s\030\031 \001(\r\022#\n\033cnt_reserve_poseidon_hashes\030\032"
  " \001(\r\022%\n\035cnt_reserve_poseidon_paddings\030\033 "
  "\001(\r\022\036\n\026cnt_reserve_mem_aligns\030\034 \001(\r\022\037\n\027c"
  "nt_reserve_arithmetics\030\035 \001(\r\022\034\n\024cnt_rese"
  "rve_binaries\030\036 \001(\r\022\031\n\021cnt_reserve_steps\030"
  "\037 \001(\r\022!\n\031cnt_reserve_sha256_hashes\030  \001(\r"
  "\022\026\n\016old_state_root\030! \001(\014\022)\n\005debug\030\" \001(\0132"
  "\032.executor.v1.ResponseDebug\032W\n\027ReadWrite"
  "AddressesEntry\022\013\n\003key\030\001 \001(\t\022+\n\005value\030\002 \001"
  "(\0132\034.executor.v1.InfoReadWriteV2:\0028\001\"\"\n\r"
  "ResponseDebug\022\021\n\terror_log\030\001 \001(\t\"\232\001\n\rTra"
  "ceConfigV2\022\027\n\017disable_storage\030\001 \001(\r\022\025\n\rd"
  "isable_stack\030\002 \001(\r\022\025\n\renable_memory\030\003 \001("
  "\r\022\032\n\022enable_return_data\030\004 \001(\r\022&\n\036tx_hash"
  "_to_generate_full_trace\030\005 \001(\014\"\236\002\n\021Overri"
  "deAccountV2\022\017\n\007balance\030\001 \001(\014\022\r\n\005nonce\030\002 "
  "\001(\004\022\014\n\004code\030\003 \001(\014\0228\n\005state\030\004 \003(\0132).execu"
  "tor.v1.OverrideAccountV2.StateEntry\022A\n\ns"
  "tate_diff\030\005 \003(\0132-.executor.v1.OverrideAc"
  "countV2.StateDiffEntry\032,\n\nStateEntry\022\013\n\003"
  "key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\0320\n\016StateDif"
  "fEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\310"
  "\001\n\017InfoReadWriteV2\022\r\n\005nonce\030\001 \001(\t\022\017\n\007bal"
  "ance\030\002 \001(\t\022\017\n\007sc_code\030\003 \001(\t\022\?\n\nsc_storag"
  "e\030\004 \003(\0132+.executor.v1.InfoReadWriteV2.Sc"
  "StorageEntry\022\021\n\tsc_length\030\005 \001(\t\0320\n\016ScSto"
  "rageEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028"
  "\001\"p\n\013FullTraceV2\0222\n\007context\030\001 \001(\0132!.exec"
  "utor.v1.TransactionContextV2\022-\n\005steps\030\002 "
  "\003(\0132\036.executor.v1.TransactionStepV2\"\224\002\n\024"
  "TransactionContextV2\022\014\n\004type\030\001 \001(\t\022\014\n\004fr"
  "om\030\002 \001(\t\022\n\n\002to\030\003 \001(\t\022\014\n\004data\030\004 \001(\014\022\013\n\003ga"
  "s\030\005 \001(\004\022\r\n\005value\030\006 \001(\t\022\022\n\nblock_hash\030\007 \001"
  "(\014\022\016\n\006output\030\010 \001(\014\022\020\n\010gas_used\030\t \001(\004\022\021\n\t"
  "gas_price\030\n \001(\t\022\026\n\016execution_time\030\013 \001(\r\022"
  "\026\n\016old_state_root\030\014 \001(\014\022\r\n\005nonce\030\r \001(\004\022\020"
  "\n\010tx_index\030\016 \001(\004\022\020\n\010chain_id\030\017 \001(\004\"\240\003\n\021T"
  "ransactionStepV2\022\022\n\nstate_root\030\001 \001(\014\022\r\n\005"
  "depth\030\002 \001(\r\022\n\n\002pc\030\003 \001(\004\022\013\n\003gas\030\004 \001(\004\022\020\n\010"
  "gas_cost\030\005 \001(\004\022\022\n\ngas_refund\030\006 \001(\004\022\n\n\002op"
  "\030\007 \001(\r\022\r\n\005stack\030\010 \003(\t\022\016\n\006memory\030\t \001(\014\022\023\n"
  "\013memory_size\030\n \001(\r\022\025\n\rmemory_offset\030\013 \001("
  "\r\022\023\n\013return_data\030\014 \001(\014\022)\n\010contract\030\r \001(\013"
  "2\027.executor.v1.ContractV2\022$\n\005error\030\016 \001(\016"
  "2\025.executor.v1.RomError\022<\n\007storage\030\017 \003(\013"
  "2+.executor.v1.TransactionStepV2.Storage"
  "Entry\032.\n\014StorageEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
  "lue\030\002 \001(\t:\0028\001\"e\n\nContractV2\022\017\n\007address\030\001"
  " \001(\t\022\016\n\006caller\030\002 \001(\t\022\r\n\005value\030\003 \001(\t\022\014\n\004d"
  "ata\030\004 \001(\014\022\013\n\003gas\030\005 \001(\004\022\014\n\004type\030\006 \001(\t\"\344\002\n"
  "\026ProcessBlockResponseV2\022\023\n\013parent_hash\030\001"
  " \001(\014\022\020\n\010coinbase\030\002 \001(\t\022\021\n\tgas_limit\030\003 \001("
  "\004\022\024\n\014block_number\030\004 \001(\004\022\021\n\ttimestamp\030\005 \001"
  "(\004\022\013\n\003ger\030\006 \001(\014\022\025\n\rblock_hash_l1\030\007 \001(\014\022\020"
  "\n\010gas_used\030\010 \001(\004\022\027\n\017block_info_root\030\t \001("
  "\014\022\022\n\nblock_hash\030\n \001(\014\022<\n\tresponses\030\013 \003(\013"
  "2).executor.v1.ProcessTransactionRespons"
  "eV2\022 \n\004logs\030\014 \003(\0132\022.executor.v1.LogV2\022$\n"
  "\005error\030\r \001(\0162\025.executor.v1.RomError\"\236\004\n\034"
  "ProcessTransactionResponseV2\022\017\n\007tx_hash\030"
  "\001 \001(\014\022\022\n\ntx_hash_l2\030\002 \001(\014\022\016\n\006rlp_tx\030\003 \001("
  "\014\022\022\n\nblock_hash\030\004 \001(\014\022\024\n\014block_number\030\005 "
  "\001(\004\022\014\n\004type\030\006 \001(\r\022\024\n\014return_value\030\007 \001(\014\022"
  "\020\n\010gas_left\030\010 \001(\004\022\020\n\010gas_used\030\t \001(\004\022\033\n\023c"
  "umulative_gas_used\030\n \001(\004\022\024\n\014gas_refunded"
  "\030\013 \001(\004\022$\n\005error\030\014 \001(\0162\025.executor.v1.RomE"
  "rror\022\026\n\016create_address\030\r \001(\t\022\022\n\nstate_ro"
  "ot\030\016 \001(\014\022 \n\004logs\030\017 \003(\0132\022.executor.v1.Log"
  "V2\022,\n\nfull_trace\030\020 \001(\0132\030.executor.v1.Ful"
  "lTraceV2\022\033\n\023effective_gas_price\030\021 \001(\t\022\034\n"
  "\024effective_percentage\030\022 \001(\r\022\033\n\023has_gaspr"
  "ice_opcode\030\023 \001(\r\022\032\n\022has_balance_opcode\030\024"
  " \001(\r\022\016\n\006status\030\025 \001(\r\"\246\001\n\005LogV2\022\017\n\007addres"
  "s\030\001 \001(\t\022\016\n\006topics\030\002 \003(\014\022\014\n\004data\030\003 \001(\014\022\024\n"
  "\014block_number\030\004 \001(\004\022\017\n\007tx_hash\030\005 \001(\014\022\022\n\n"
  "tx_hash_l2\030\006 \001(\014\022\020\n\010tx_index\030\007 \001(\r\022\022\n\nbl"
  "ock_hash\030\010 \001(\014\022\r\n\005index\030\t \001(\r*\347\n\n\010RomErr"
  "or\022\031\n\025ROM_ERROR_UNSPECIFIED\020\000\022\026\n\022ROM_ERR"
  "OR_NO_ERROR\020\001\022\030\n\024ROM_ERROR_OUT_OF_GAS\020\002\022"
  "\034\n\030ROM_ERROR_STACK_OVERFLOW\020\003\022\035\n\031ROM_ERR"
  "OR_STACK_UNDERFLOW\020\004\022$\n ROM_ERROR_MAX_CO"
  "DE_SIZE_EXCEEDED\020\005\022(\n$ROM_ERROR_CONTRACT"
  "_ADDRESS_COLLISION\020\006\022 \n\034ROM_ERROR_EXECUT"
  "ION_REVERTED\020\007\022\"\n\036ROM_ERROR_OUT_OF_COUNT"
  "ERS_STEP\020\010\022$\n ROM_ERROR_OUT_OF_COUNTERS_"
  "KECCAK\020\t\022$\n ROM_ERROR_OUT_OF_COUNTERS_BI"
  "NARY\020\n\022!\n\035ROM_ERROR_OUT_OF_COUNTERS_MEM\020"
  "\013\022#\n\037ROM_ERROR_OUT_OF_COUNTERS_ARITH\020\014\022%"
  "\n!ROM_ERROR_OUT_OF_COUNTERS_PADDING\020\r\022&\n"
  "\"ROM_ERROR_OUT_OF_COUNTERS_POSEIDON\020\016\022!\n"
  "\035ROM_ERROR_OUT_OF_COUNTERS_SHA\020\017\022\032\n\026ROM_"
  "ERROR_INVALID_JUMP\020\020\022\034\n\030ROM_ERROR_INVALI"
  "D_OPCODE\020\021\022\034\n\030ROM_ERROR_INVALID_STATIC\020\022"
  "\022(\n$ROM_ERROR_INVALID_BYTECODE_STARTS_EF"
  "\020\023\022)\n%ROM_ERROR_INTRINSIC_INVALID_SIGNAT"
  "URE\020\024\022(\n$ROM_ERROR_INTRINSIC_INVALID_CHA"
  "IN_ID\020\025\022%\n!ROM_ERROR_INTRINSIC_INVALID_N"
  "ONCE\020\026\022)\n%ROM_ERROR_INTRINSIC_INVALID_GA"
  "S_LIMIT\020\027\022\'\n#ROM_ERROR_INTRINSIC_INVALID"
  "_BALANCE\020\030\022/\n+ROM_ERROR_INTRINSIC_INVALI"
  "D_BATCH_GAS_LIMIT\020\031\022+\n\'ROM_ERROR_INTRINS"
  "IC_INVALID_SENDER_CODE\020\032\022\'\n#ROM_ERROR_IN"
  "TRINSIC_TX_GAS_OVERFLOW\020\033\022 \n\034ROM_ERROR_B"
  "ATCH_DATA_TOO_BIG\020\034\022!\n\035ROM_ERROR_UNSUPPO"
  "RTED_FORK_ID\020\035\022\031\n\025ROM_ERROR_INVALID_RLP\020"
  "\036\022,\n(ROM_ERROR_INVALID_DECODE_CHANGE_L2_"
  "BLOCK\020\037\0222\n.ROM_ERROR_INVALID_NOT_FIRST_T"
  "X_CHANGE_L2_BLOCK\020 \0228\n4ROM_ERROR_INVALID"
  "_TX_CHANGE_L2_BLOCK_LIMIT_TIMESTAMP\020!\0226\n"
  "2ROM_ERROR_INVALID_TX_CHANGE_L2_BLOCK_MI"
  "N_TIMESTAMP\020\"\022(\n$ROM_ERROR_INVALID_L1_IN"
  "FO_TREE_INDEX\020#*\355+\n\rExecutorError\022\036\n\032EXE"
  "CUTOR_ERROR_UNSPECIFIED\020\000\022\033\n\027EXECUTOR_ER"
  "ROR_NO_ERROR\020\001\022\033\n\027EXECUTOR_ERROR_DB_ERRO"
  "R\020\002\0222\n.EXECUTOR_ERROR_SM_MAIN_COUNTERS_O"
  "VERFLOW_STEPS\020\003\0223\n/EXECUTOR_ERROR_SM_MAI"
  "N_COUNTERS_OVERFLOW_KECCAK\020\004\0223\n/EXECUTOR"
  "_ERROR_SM_MAIN_COUNTERS_OVERFLOW_BINARY\020"
  "\005\0220\n,EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVE"
  "RFLOW_MEM\020\006\0222\n.EXECUTOR_ERROR_SM_MAIN_CO"
  "UNTERS_OVERFLOW_ARITH\020\007\0224\n0EXECUTOR_ERRO"
  "R_SM_MAIN_COUNTERS_OVERFLOW_PADDING\020\010\0225\n"
  "1EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLO"
  "W_POSEIDON\020\t\022&\n\"EXECUTOR_ERROR_UNSUPPORT"
  "ED_FORK_ID\020\n\022#\n\037EXECUTOR_ERROR_BALANCE_M"
  "ISMATCH\020\013\022\035\n\031EXECUTOR_ERROR_FEA2SCALAR\020\014"
  "\022\030\n\024EXECUTOR_ERROR_TOS32\020\r\022.\n*EXECUTOR_E"
  "RROR_SM_MAIN_INVALID_UNSIGNED_TX\020\016\022.\n*EX"
  "ECUTOR_ERROR_SM_MAIN_INVALID_NO_COUNTERS"
  "\020\017\0229\n5EXECUTOR_ERROR_SM_MAIN_ARITH_ECREC"
  "OVER_DIVIDE_BY_ZERO\020\020\022/\n+EXECUTOR_ERROR_"
  "SM_MAIN_ADDRESS_OUT_OF_RANGE\020\021\022+\n\'EXECUT"
  "OR_ERROR_SM_MAIN_ADDRESS_NEGATIVE\020\022\022.\n*E"
  "XECUTOR_ERROR_SM_MAIN_STORAGE_INVALID_KE"
  "Y\020\023\022 \n\034EXECUTOR_ERROR_SM_MAIN_HASHK\020\024\0222\n"
  ".EXECUTOR_ERROR_SM_MAIN_HASHK_SIZE_OUT_O"
  "F_RANGE\020\025\0222\n.EXECUTOR_ERROR_SM_MAIN_HASH"
  "K_POSITION_NEGATIVE\020\026\022@\n<EXECUTOR_ERROR_"
  "SM_MAIN_HASHK_POSITION_PLUS_SIZE_OUT_OF_"
  "RANGE\020\027\0228\n4EXECUTOR_ERROR_SM_MAIN_HASHKD"
  "IGEST_ADDRESS_NOT_FOUND\020\030\0224\n0EXECUTOR_ER"
  "ROR_SM_MAIN_HASHKDIGEST_NOT_COMPLETED\020\031\022"
  " \n\034EXECUTOR_ERROR_SM_MAIN_HASHP\020\032\0222\n.EXE"
  "CUTOR_ERROR_SM_MAIN_HASHP_SIZE_OUT_OF_RA"
  "NGE\020\033\0222\n.EXECUTOR_ERROR_SM_MAIN_HASHP_PO"
  "SITION_NEGATIVE\020\034\022@\n<EXECUTOR_ERROR_SM_M"
  "AIN_HASHP_POSITION_PLUS_SIZE_OUT_OF_RANG"
  "E\020\035\0228\n4EXECUTOR_ERROR_SM_MAIN_HASHPDIGES"
  "T_ADDRESS_NOT_FOUND\020\036\0224\n0EXECUTOR_ERROR_"
  "SM_MAIN_HASHPDIGEST_NOT_COMPLETED\020\037\0227\n3E"
  "XECUTOR_ERROR_SM_MAIN_MEMALIGN_OFFSET_OU"
  "T_OF_RANGE\020 \022*\n&EXECUTOR_ERROR_SM_MAIN_M"
  "ULTIPLE_FREEIN\020!\022!\n\035EXECUTOR_ERROR_SM_MA"
  "IN_ASSERT\020\"\022!\n\035EXECUTOR_ERROR_SM_MAIN_ME"
  "MORY\020#\0220\n,EXECUTOR_ERROR_SM_MAIN_STORAGE"
  "_READ_MISMATCH\020$\0221\n-EXECUTOR_ERROR_SM_MA"
  "IN_STORAGE_WRITE_MISMATCH\020%\022/\n+EXECUTOR_"
  "ERROR_SM_MAIN_HASHK_VALUE_MISMATCH\020&\0221\n-"
  "EXECUTOR_ERROR_SM_MAIN_HASHK_PADDING_MIS"
  "MATCH\020\'\022.\n*EXECUTOR_ERROR_SM_MAIN_HASHK_"
  "SIZE_MISMATCH\020(\0223\n/EXECUTOR_ERROR_SM_MAI"
  "N_HASHKLEN_LENGTH_MISMATCH\020)\0220\n,EXECUTOR"
  "_ERROR_SM_MAIN_HASHKLEN_CALLED_TWICE\020*\0220"
  "\n,EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_NOT"
  "_FOUND\020+\0226\n2EXECUTOR_ERROR_SM_MAIN_HASHK"
  "DIGEST_DIGEST_MISMATCH\020,\0223\n/EXECUTOR_ERR"
  "OR_SM_MAIN_HASHKDIGEST_CALLED_TWICE\020-\022/\n"
  "+EXECUTOR_ERROR_SM_MAIN_HASHP_VALUE_MISM"
  "ATCH\020.\0221\n-EXECUTOR_ERROR_SM_MAIN_HASHP_P"
  "ADDING_MISMATCH\020/\022.\n*EXECUTOR_ERROR_SM_M"
  "AIN_HASHP_SIZE_MISMATCH\0200\0223\n/EXECUTOR_ER"
  "ROR_SM_MAIN_HASHPLEN_LENGTH_MISMATCH\0201\0220"
  "\n,EXECUTOR_ERROR_SM_MAIN_HASHPLEN_CALLED"
  "_TWICE\0202\0226\n2EXECUTOR_ERROR_SM_MAIN_HASHP"
  "DIGEST_DIGEST_MISMATCH\0203\0223\n/EXECUTOR_ERR"
  "OR_SM_MAIN_HASHPDIGEST_CALLED_TWICE\0204\022)\n"
  "%EXECUTOR_ERROR_SM_MAIN_ARITH_MISMATCH\0205"
  "\0223\n/EXECUTOR_ERROR_SM_MAIN_ARITH_ECRECOV"
  "ER_MISMATCH\0206\022.\n*EXECUTOR_ERROR_SM_MAIN_"
  "BINARY_ADD_MISMATCH\0207\022.\n*EXECUTOR_ERROR_"
  "SM_MAIN_BINARY_SUB_MISMATCH\0208\022-\n)EXECUTO"
  "R_ERROR_SM_MAIN_BINARY_LT_MISMATCH\0209\022.\n*"
  "EXECUTOR_ERROR_SM_MAIN_BINARY_SLT_MISMAT"
  "CH\020:\022-\n)EXECUTOR_ERROR_SM_MAIN_BINARY_EQ"
  "_MISMATCH\020;\022.\n*EXECUTOR_ERROR_SM_MAIN_BI"
  "NARY_AND_MISMATCH\020<\022-\n)EXECUTOR_ERROR_SM"
  "_MAIN_BINARY_OR_MISMATCH\020=\022.\n*EXECUTOR_E"
  "RROR_SM_MAIN_BINARY_XOR_MISMATCH\020>\0222\n.EX"
  "ECUTOR_ERROR_SM_MAIN_MEMALIGN_WRITE_MISM"
  "ATCH\020\?\0223\n/EXECUTOR_ERROR_SM_MAIN_MEMALIG"
  "N_WRITE8_MISMATCH\020@\0221\n-EXECUTOR_ERROR_SM"
  "_MAIN_MEMALIGN_READ_MISMATCH\020A\022,\n(EXECUT"
  "OR_ERROR_SM_MAIN_JMPN_OUT_OF_RANGE\020B\0222\n."
  "EXECUTOR_ERROR_SM_MAIN_HASHK_READ_OUT_OF"
  "_RANGE\020C\0222\n.EXECUTOR_ERROR_SM_MAIN_HASHP"
  "_READ_OUT_OF_RANGE\020D\022)\n%EXECUTOR_ERROR_I"
  "NVALID_OLD_STATE_ROOT\020E\022-\n)EXECUTOR_ERRO"
  "R_INVALID_OLD_ACC_INPUT_HASH\020F\022#\n\037EXECUT"
  "OR_ERROR_INVALID_CHAIN_ID\020G\022(\n$EXECUTOR_"
  "ERROR_INVALID_BATCH_L2_DATA\020H\022+\n\'EXECUTO"
  "R_ERROR_INVALID_GLOBAL_EXIT_ROOT\020I\022#\n\037EX"
  "ECUTOR_ERROR_INVALID_COINBASE\020J\022\037\n\033EXECU"
  "TOR_ERROR_INVALID_FROM\020K\022!\n\035EXECUTOR_ERR"
  "OR_INVALID_DB_KEY\020L\022#\n\037EXECUTOR_ERROR_IN"
  "VALID_DB_VALUE\020M\0221\n-EXECUTOR_ERROR_INVAL"
  "ID_CONTRACTS_BYTECODE_KEY\020N\0223\n/EXECUTOR_"
  "ERROR_INVALID_CONTRACTS_BYTECODE_VALUE\020O"
  "\022\"\n\036EXECUTOR_ERROR_INVALID_GET_KEY\020P\0223\n/"
  "EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFLOW"
  "_SHA256\020Q\022 \n\034EXECUTOR_ERROR_SM_MAIN_HASH"
  "S\020R\0222\n.EXECUTOR_ERROR_SM_MAIN_HASHS_SIZE"
  "_OUT_OF_RANGE\020S\0222\n.EXECUTOR_ERROR_SM_MAI"
  "N_HASHS_POSITION_NEGATIVE\020T\022@\n<EXECUTOR_"
  "ERROR_SM_MAIN_HASHS_POSITION_PLUS_SIZE_O"
  "UT_OF_RANGE\020U\0228\n4EXECUTOR_ERROR_SM_MAIN_"
  "HASHSDIGEST_ADDRESS_NOT_FOUND\020V\0224\n0EXECU"
  "TOR_ERROR_SM_MAIN_HASHSDIGEST_NOT_COMPLE"
  "TED\020W\022/\n+EXECUTOR_ERROR_SM_MAIN_HASHS_VA"
  "LUE_MISMATCH\020X\0221\n-EXECUTOR_ERROR_SM_MAIN"
  "_HASHS_PADDING_MISMATCH\020Y\022.\n*EXECUTOR_ER"
  "ROR_SM_MAIN_HASHS_SIZE_MISMATCH\020Z\0223\n/EXE"
  "CUTOR_ERROR_SM_MAIN_HASHSLEN_LENGTH_MISM"
  "ATCH\020[\0220\n,EXECUTOR_ERROR_SM_MAIN_HASHSLE"
  "N_CALLED_TWICE\020\\\0220\n,EXECUTOR_ERROR_SM_MA"
  "IN_HASHSDIGEST_NOT_FOUND\020]\0226\n2EXECUTOR_E"
  "RROR_SM_MAIN_HASHSDIGEST_DIGEST_MISMATCH"
  "\020^\0223\n/EXECUTOR_ERROR_SM_MAIN_HASHSDIGEST"
  "_CALLED_TWICE\020_\0222\n.EXECUTOR_ERROR_SM_MAI"
  "N_HASHS_READ_OUT_OF_RANGE\020`\022\'\n#EXECUTOR_"
  "ERROR_INVALID_L1_INFO_ROOT\020a\022.\n*EXECUTOR"
  "_ERROR_INVALID_FORCED_BLOCKHASH_L1\020b\0226\n2"
  "EXECUTOR_ERROR_INVALID_L1_DATA_V2_GLOBAL"
  "_EXIT_ROOT\020c\0223\n/EXECUTOR_ERROR_INVALID_L"
  "1_DATA_V2_BLOCK_HASH_L1\020d\022\'\n#EXECUTOR_ER"
  "ROR_INVALID_L1_SMT_PROOF\020e\022\"\n\036EXECUTOR_E"
  "RROR_INVALID_BALANCE\020f\022.\n*EXECUTOR_ERROR"
  "_SM_MAIN_BINARY_LT4_MISMATCH\020g\022)\n%EXECUT"
  "OR_ERROR_INVALID_NEW_STATE_ROOT\020h\022-\n)EXE"
  "CUTOR_ERROR_INVALID_NEW_ACC_INPUT_HASH\020i"
  "\022.\n*EXECUTOR_ERROR_INVALID_NEW_LOCAL_EXI"
  "T_ROOT\020j\022#\n\037EXECUTOR_ERROR_DB_KEY_NOT_FO"
  "UND\020k\022(\n$EXECUTOR_ERROR_SMT_INVALID_DATA"
  "_SIZE\020l\022$\n EXECUTOR_ERROR_HASHDB_GRPC_ER"
  "ROR\020m\022 \n\034EXECUTOR_ERROR_STATE_MANAGER\020n\022"
  "-\n)EXECUTOR_ERROR_INVALID_L1_INFO_TREE_I"
  "NDEX\020o\0227\n3EXECUTOR_ERROR_INVALID_L1_INFO"
  "_TREE_SMT_PROOF_VALUE\020p\022\"\n\036EXECUTOR_ERRO"
  "R_INVALID_WITNESS\020q\022\037\n\033EXECUTOR_ERROR_IN"
  "VALID_CBOR\020r\022&\n\"EXECUTOR_ERROR_INVALID_D"
  "ATA_STREAM\020s\022-\n)EXECUTOR_ERROR_INVALID_U"
  "PDATE_MERKLE_TREE\020t\0222\n.EXECUTOR_ERROR_SM"
  "_MAIN_INVALID_TX_STATUS_ERROR\020u2\205\003\n\017Exec"
  "utorService\022U\n\014ProcessBatch\022 .executor.v"
  "1.ProcessBatchRequest\032!.executor.v1.Proc"
  "essBatchResponse\"\000\022[\n\016ProcessBatchV2\022\".e"
  "xecutor.v1.ProcessBatchRequestV2\032#.execu"
  "tor.v1.ProcessBatchResponseV2\"\000\022m\n\027Proce"
  "ssStatelessBatchV2\022+.executor.v1.Process"
  "StatelessBatchRequestV2\032#.executor.v1.Pr"
  "ocessBatchResponseV2\"\000\022O\n\016GetFlushStatus"
  "\022\026.google.protobuf.Empty\032#.executor.v1.G"
  "etFlushStatusResponse\"\000B>Z<github.com/0x"
  "PolygonHermez/zkevm-node/state/runtime/e"
  "xecutorb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_executor_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_executor_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_executor_2eproto = {
    false, false, 16775, descriptor_table_protodef_executor_2eproto,
    "executor.proto",
    &descriptor_table_executor_2eproto_once, descriptor_table_executor_2eproto_deps, 1, 45,
    schemas, file_default_instances, TableStruct_executor_2eproto::offsets,
    file_level_metadata_executor_2eproto, file_level_enum_descriptors_executor_2eproto,
    file_level_service_descriptors_executor_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_executor_2eproto_getter() {
  return &descriptor_table_executor_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_executor_2eproto(&descriptor_table_executor_2eproto);
namespace executor {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RomError_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_executor_2eproto);
  return file_level_enum_descriptors_executor_2eproto[0];
}
bool RomError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExecutorError_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_executor_2eproto);
  return file_level_enum_descriptors_executor_2eproto[1];
}
bool ExecutorError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
      return true;
    default:
      return false;
  }
}


// ===================================================================

ProcessBatchRequest_DbEntry_DoNotUse::ProcessBatchRequest_DbEntry_DoNotUse() {}
ProcessBatchRequest_DbEntry_DoNotUse::ProcessBatchRequest_DbEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProcessBatchRequest_DbEntry_DoNotUse::MergeFrom(const ProcessBatchRequest_DbEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProcessBatchRequest_DbEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[0]);
}

// ===================================================================

ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse::ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse() {}
ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse::ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse::MergeFrom(const ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[1]);
}

// ===================================================================

ProcessBatchRequest_StateOverrideEntry_DoNotUse::ProcessBatchRequest_StateOverrideEntry_DoNotUse() {}
ProcessBatchRequest_StateOverrideEntry_DoNotUse::ProcessBatchRequest_StateOverrideEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProcessBatchRequest_StateOverrideEntry_DoNotUse::MergeFrom(const ProcessBatchRequest_StateOverrideEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProcessBatchRequest_StateOverrideEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[2]);
}

// ===================================================================

class ProcessBatchRequest::_Internal {
 public:
  static const ::executor::v1::TraceConfig& trace_config(const ProcessBatchRequest* msg);
};

const ::executor::v1::TraceConfig&
ProcessBatchRequest::_Internal::trace_config(const ProcessBatchRequest* msg) {
  return *msg->_impl_.trace_config_;
}
ProcessBatchRequest::ProcessBatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &ProcessBatchRequest::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:executor.v1.ProcessBatchRequest)
}
ProcessBatchRequest::ProcessBatchRequest(const ProcessBatchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcessBatchRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.db_)*/{}
    , /*decltype(_impl_.contracts_bytecode_)*/{}
    , /*decltype(_impl_.state_override_)*/{}
    , decltype(_impl_.old_state_root_){}
    , decltype(_impl_.old_acc_input_hash_){}
    , decltype(_impl_.batch_l2_data_){}
    , decltype(_impl_.global_exit_root_){}
    , decltype(_impl_.coinbase_){}
    , decltype(_impl_.from_){}
    , decltype(_impl_.context_id_){}
    , decltype(_impl_.trace_config_){nullptr}
    , decltype(_impl_.old_batch_num_){}
    , decltype(_impl_.chain_id_){}
    , decltype(_impl_.fork_id_){}
    , decltype(_impl_.eth_timestamp_){}
    , decltype(_impl_.no_counters_){}
    , decltype(_impl_.update_merkle_tree_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.db_.MergeFrom(from._impl_.db_);
  _this->_impl_.contracts_bytecode_.MergeFrom(from._impl_.contracts_bytecode_);
  _this->_impl_.state_override_.MergeFrom(from._impl_.state_override_);
  _impl_.old_state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_old_state_root().empty()) {
    _this->_impl_.old_state_root_.Set(from._internal_old_state_root(), 
      _this->GetArenaForAllocation());
  }
  _impl_.old_acc_input_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_acc_input_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_old_acc_input_hash().empty()) {
    _this->_impl_.old_acc_input_hash_.Set(from._internal_old_acc_input_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.batch_l2_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.batch_l2_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_batch_l2_data().empty()) {
    _this->_impl_.batch_l2_data_.Set(from._internal_batch_l2_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.global_exit_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.global_exit_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_global_exit_root().empty()) {
    _this->_impl_.global_exit_root_.Set(from._internal_global_exit_root(), 
      _this->GetArenaForAllocation());
  }
  _impl_.coinbase_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.coinbase_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_coinbase().empty()) {
    _this->_impl_.coinbase_.Set(from._internal_coinbase(), 
      _this->GetArenaForAllocation());
  }
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_from().empty()) {
    _this->_impl_.from_.Set(from._internal_from(), 
      _this->GetArenaForAllocation());
  }
  _impl_.context_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.context_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_context_id().empty()) {
    _this->_impl_.context_id_.Set(from._internal_context_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_trace_config()) {
    _this->_impl_.trace_config_ = new ::executor::v1::TraceConfig(*from._impl_.trace_config_);
  }
  ::memcpy(&_impl_.old_batch_num_, &from._impl_.old_batch_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.update_merkle_tree_) -
    reinterpret_cast<char*>(&_impl_.old_batch_num_)) + sizeof(_impl_.update_merkle_tree_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.ProcessBatchRequest)
}

inline void ProcessBatchRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.db_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.contracts_bytecode_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.state_override_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.old_state_root_){}
    , decltype(_impl_.old_acc_input_hash_){}
    , decltype(_impl_.batch_l2_data_){}
    , decltype(_impl_.global_exit_root_){}
    , decltype(_impl_.coinbase_){}
    , decltype(_impl_.from_){}
    , decltype(_impl_.context_id_){}
    , decltype(_impl_.trace_config_){nullptr}
    , decltype(_impl_.old_batch_num_){uint64_t{0u}}
    , decltype(_impl_.chain_id_){uint64_t{0u}}
    , decltype(_impl_.fork_id_){uint64_t{0u}}
    , decltype(_impl_.eth_timestamp_){uint64_t{0u}}
    , decltype(_impl_.no_counters_){uint64_t{0u}}
    , decltype(_impl_.update_merkle_tree_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.old_state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.old_acc_input_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_acc_input_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.batch_l2_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.batch_l2_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.global_exit_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.global_exit_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.coinbase_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.coinbase_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.context_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.context_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProcessBatchRequest::~ProcessBatchRequest() {
  // @@protoc_insertion_point(destructor:executor.v1.ProcessBatchRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void ProcessBatchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_.Destruct();
  _impl_.db_.~MapField();
  _impl_.contracts_bytecode_.Destruct();
  _impl_.contracts_bytecode_.~MapField();
  _impl_.state_override_.Destruct();
  _impl_.state_override_.~MapField();
  _impl_.old_state_root_.Destroy();
  _impl_.old_acc_input_hash_.Destroy();
  _impl_.batch_l2_data_.Destroy();
  _impl_.global_exit_root_.Destroy();
  _impl_.coinbase_.Destroy();
  _impl_.from_.Destroy();
  _impl_.context_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.trace_config_;
}

void ProcessBatchRequest::ArenaDtor(void* object) {
  ProcessBatchRequest* _this = reinterpret_cast< ProcessBatchRequest* >(object);
  _this->_impl_.db_.Destruct();
  _this->_impl_.contracts_bytecode_.Destruct();
  _this->_impl_.state_override_.Destruct();
}
void ProcessBatchRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessBatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.ProcessBatchRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_.Clear();
  _impl_.contracts_bytecode_.Clear();
  _impl_.state_override_.Clear();
  _impl_.old_state_root_.ClearToEmpty();
  _impl_.old_acc_input_hash_.ClearToEmpty();
  _impl_.batch_l2_data_.ClearToEmpty();
  _impl_.global_exit_root_.ClearToEmpty();
  _impl_.coinbase_.ClearToEmpty();
  _impl_.from_.ClearToEmpty();
  _impl_.context_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.trace_config_ != nullptr) {
    delete _impl_.trace_config_;
  }
  _impl_.trace_config_ = nullptr;
  ::memset(&_impl_.old_batch_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.update_merkle_tree_) -
      reinterpret_cast<char*>(&_impl_.old_batch_num_)) + sizeof(_impl_.update_merkle_tree_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessBatchRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes old_state_root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_old_state_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes old_acc_input_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_old_acc_input_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 old_batch_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.old_batch_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 chain_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.chain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 fork_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.fork_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes batch_l2_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_batch_l2_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes global_exit_root = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_global_exit_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 eth_timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.eth_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string coinbase = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_coinbase();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.ProcessBatchRequest.coinbase"));
        } else
          goto handle_unusual;
        continue;
      // uint32 update_merkle_tree = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.update_merkle_tree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 no_counters = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.no_counters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string from = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_from();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.ProcessBatchRequest.from"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> db = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.db_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> contracts_bytecode = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.contracts_bytecode_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .executor.v1.TraceConfig trace_config = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_trace_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string context_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_context_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.ProcessBatchRequest.context_id"));
        } else
          goto handle_unusual;
        continue;
      // map<string, .executor.v1.OverrideAccount> state_override = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.state_override_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessBatchRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.ProcessBatchRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes old_state_root = 1;
  if (!this->_internal_old_state_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_old_state_root(), target);
  }

  // bytes old_acc_input_hash = 2;
  if (!this->_internal_old_acc_input_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_old_acc_input_hash(), target);
  }

  // uint64 old_batch_num = 3;
  if (this->_internal_old_batch_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_old_batch_num(), target);
  }

  // uint64 chain_id = 4;
  if (this->_internal_chain_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_chain_id(), target);
  }

  // uint64 fork_id = 5;
  if (this->_internal_fork_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_fork_id(), target);
  }

  // bytes batch_l2_data = 6;
  if (!this->_internal_batch_l2_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_batch_l2_data(), target);
  }

  // bytes global_exit_root = 7;
  if (!this->_internal_global_exit_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_global_exit_root(), target);
  }

  // uint64 eth_timestamp = 8;
  if (this->_internal_eth_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_eth_timestamp(), target);
  }

  // string coinbase = 9;
  if (!this->_internal_coinbase().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_coinbase().data(), static_cast<int>(this->_internal_coinbase().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessBatchRequest.coinbase");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_coinbase(), target);
  }

  // uint32 update_merkle_tree = 10;
  if (this->_internal_update_merkle_tree() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_update_merkle_tree(), target);
  }

  // uint64 no_counters = 11;
  if (this->_internal_no_counters() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_no_counters(), target);
  }

  // string from = 12;
  if (!this->_internal_from().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessBatchRequest.from");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_from(), target);
  }

  // map<string, string> db = 13;
  if (!this->_internal_db().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = ProcessBatchRequest_DbEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_db();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "executor.v1.ProcessBatchRequest.DbEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "executor.v1.ProcessBatchRequest.DbEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(13, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(13, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, string> contracts_bytecode = 14;
  if (!this->_internal_contracts_bytecode().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_contracts_bytecode();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "executor.v1.ProcessBatchRequest.ContractsBytecodeEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "executor.v1.ProcessBatchRequest.ContractsBytecodeEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(14, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(14, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .executor.v1.TraceConfig trace_config = 15;
  if (this->_internal_has_trace_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::trace_config(this),
        _Internal::trace_config(this).GetCachedSize(), target, stream);
  }

  // string context_id = 16;
  if (!this->_internal_context_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_context_id().data(), static_cast<int>(this->_internal_context_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessBatchRequest.context_id");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_context_id(), target);
  }

  // map<string, .executor.v1.OverrideAccount> state_override = 17;
  if (!this->_internal_state_override().empty()) {
    using MapType = ::_pb::Map<std::string, ::executor::v1::OverrideAccount>;
    using WireHelper = ProcessBatchRequest_StateOverrideEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_state_override();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "executor.v1.ProcessBatchRequest.StateOverrideEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(17, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(17, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.ProcessBatchRequest)
  return target;
}

size_t ProcessBatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.ProcessBatchRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> db = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_db_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_db().begin();
      it != this->_internal_db().end(); ++it) {
    total_size += ProcessBatchRequest_DbEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> contracts_bytecode = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_contracts_bytecode_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_contracts_bytecode().begin();
      it != this->_internal_contracts_bytecode().end(); ++it) {
    total_size += ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .executor.v1.OverrideAccount> state_override = 17;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_state_override_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::executor::v1::OverrideAccount >::const_iterator
      it = this->_internal_state_override().begin();
      it != this->_internal_state_override().end(); ++it) {
    total_size += ProcessBatchRequest_StateOverrideEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes old_state_root = 1;
  if (!this->_internal_old_state_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_old_state_root());
  }

  // bytes old_acc_input_hash = 2;
  if (!this->_internal_old_acc_input_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_old_acc_input_hash());
  }

  // bytes batch_l2_data = 6;
  if (!this->_internal_batch_l2_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_batch_l2_data());
  }

  // bytes global_exit_root = 7;
  if (!this->_internal_global_exit_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_global_exit_root());
  }

  // string coinbase = 9;
  if (!this->_internal_coinbase().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_coinbase());
  }

  // string from = 12;
  if (!this->_internal_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  // string context_id = 16;
  if (!this->_internal_context_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_context_id());
  }

  // .executor.v1.TraceConfig trace_config = 15;
  if (this->_internal_has_trace_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trace_config_);
  }

  // uint64 old_batch_num = 3;
  if (this->_internal_old_batch_num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_old_batch_num());
  }

  // uint64 chain_id = 4;
  if (this->_internal_chain_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_chain_id());
  }

  // uint64 fork_id = 5;
  if (this->_internal_fork_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_fork_id());
  }

  // uint64 eth_timestamp = 8;
  if (this->_internal_eth_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_eth_timestamp());
  }

  // uint64 no_counters = 11;
  if (this->_internal_no_counters() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_no_counters());
  }

  // uint32 update_merkle_tree = 10;
  if (this->_internal_update_merkle_tree() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_update_merkle_tree());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessBatchRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcessBatchRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessBatchRequest::GetClassData() const { return &_class_data_; }


void ProcessBatchRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcessBatchRequest*>(&to_msg);
  auto& from = static_cast<const ProcessBatchRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.ProcessBatchRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.db_.MergeFrom(from._impl_.db_);
  _this->_impl_.contracts_bytecode_.MergeFrom(from._impl_.contracts_bytecode_);
  _this->_impl_.state_override_.MergeFrom(from._impl_.state_override_);
  if (!from._internal_old_state_root().empty()) {
    _this->_internal_set_old_state_root(from._internal_old_state_root());
  }
  if (!from._internal_old_acc_input_hash().empty()) {
    _this->_internal_set_old_acc_input_hash(from._internal_old_acc_input_hash());
  }
  if (!from._internal_batch_l2_data().empty()) {
    _this->_internal_set_batch_l2_data(from._internal_batch_l2_data());
  }
  if (!from._internal_global_exit_root().empty()) {
    _this->_internal_set_global_exit_root(from._internal_global_exit_root());
  }
  if (!from._internal_coinbase().empty()) {
    _this->_internal_set_coinbase(from._internal_coinbase());
  }
  if (!from._internal_from().empty()) {
    _this->_internal_set_from(from._internal_from());
  }
  if (!from._internal_context_id().empty()) {
    _this->_internal_set_context_id(from._internal_context_id());
  }
  if (from._internal_has_trace_config()) {
    _this->_internal_mutable_trace_config()->::executor::v1::TraceConfig::MergeFrom(
        from._internal_trace_config());
  }
  if (from._internal_old_batch_num() != 0) {
    _this->_internal_set_old_batch_num(from._internal_old_batch_num());
  }
  if (from._internal_chain_id() != 0) {
    _this->_internal_set_chain_id(from._internal_chain_id());
  }
  if (from._internal_fork_id() != 0) {
    _this->_internal_set_fork_id(from._internal_fork_id());
  }
  if (from._internal_eth_timestamp() != 0) {
    _this->_internal_set_eth_timestamp(from._internal_eth_timestamp());
  }
  if (from._internal_no_counters() != 0) {
    _this->_internal_set_no_counters(from._internal_no_counters());
  }
  if (from._internal_update_merkle_tree() != 0) {
    _this->_internal_set_update_merkle_tree(from._internal_update_merkle_tree());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessBatchRequest::CopyFrom(const ProcessBatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.ProcessBatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessBatchRequest::IsInitialized() const {
  return true;
}

void ProcessBatchRequest::InternalSwap(ProcessBatchRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.db_.InternalSwap(&other->_impl_.db_);
  _impl_.contracts_bytecode_.InternalSwap(&other->_impl_.contracts_bytecode_);
  _impl_.state_override_.InternalSwap(&other->_impl_.state_override_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.old_state_root_, lhs_arena,
      &other->_impl_.old_state_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.old_acc_input_hash_, lhs_arena,
      &other->_impl_.old_acc_input_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.batch_l2_data_, lhs_arena,
      &other->_impl_.batch_l2_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.global_exit_root_, lhs_arena,
      &other->_impl_.global_exit_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.coinbase_, lhs_arena,
      &other->_impl_.coinbase_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.from_, lhs_arena,
      &other->_impl_.from_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.context_id_, lhs_arena,
      &other->_impl_.context_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessBatchRequest, _impl_.update_merkle_tree_)
      + sizeof(ProcessBatchRequest::_impl_.update_merkle_tree_)
      - PROTOBUF_FIELD_OFFSET(ProcessBatchRequest, _impl_.trace_config_)>(
          reinterpret_cast<char*>(&_impl_.trace_config_),
          reinterpret_cast<char*>(&other->_impl_.trace_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessBatchRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[3]);
}

// ===================================================================

ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse::ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse() {}
ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse::ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse::MergeFrom(const ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[4]);
}

// ===================================================================

class ProcessBatchResponse::_Internal {
 public:
};

ProcessBatchResponse::ProcessBatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &ProcessBatchResponse::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:executor.v1.ProcessBatchResponse)
}
ProcessBatchResponse::ProcessBatchResponse(const ProcessBatchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcessBatchResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.responses_){from._impl_.responses_}
    , /*decltype(_impl_.read_write_addresses_)*/{}
    , decltype(_impl_.new_state_root_){}
    , decltype(_impl_.new_acc_input_hash_){}
    , decltype(_impl_.new_local_exit_root_){}
    , decltype(_impl_.prover_id_){}
    , decltype(_impl_.new_batch_num_){}
    , decltype(_impl_.cnt_keccak_hashes_){}
    , decltype(_impl_.cnt_poseidon_hashes_){}
    , decltype(_impl_.cnt_poseidon_paddings_){}
    , decltype(_impl_.cnt_mem_aligns_){}
    , decltype(_impl_.cnt_arithmetics_){}
    , decltype(_impl_.cnt_binaries_){}
    , decltype(_impl_.cumulative_gas_used_){}
    , decltype(_impl_.cnt_steps_){}
    , decltype(_impl_.error_){}
    , decltype(_impl_.flush_id_){}
    , decltype(_impl_.stored_flush_id_){}
    , decltype(_impl_.fork_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.read_write_addresses_.MergeFrom(from._impl_.read_write_addresses_);
  _impl_.new_state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_new_state_root().empty()) {
    _this->_impl_.new_state_root_.Set(from._internal_new_state_root(), 
      _this->GetArenaForAllocation());
  }
  _impl_.new_acc_input_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_acc_input_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_new_acc_input_hash().empty()) {
    _this->_impl_.new_acc_input_hash_.Set(from._internal_new_acc_input_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.new_local_exit_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_local_exit_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_new_local_exit_root().empty()) {
    _this->_impl_.new_local_exit_root_.Set(from._internal_new_local_exit_root(), 
      _this->GetArenaForAllocation());
  }
  _impl_.prover_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prover_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prover_id().empty()) {
    _this->_impl_.prover_id_.Set(from._internal_prover_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.new_batch_num_, &from._impl_.new_batch_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fork_id_) -
    reinterpret_cast<char*>(&_impl_.new_batch_num_)) + sizeof(_impl_.fork_id_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.ProcessBatchResponse)
}

inline void ProcessBatchResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.responses_){arena}
    , /*decltype(_impl_.read_write_addresses_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.new_state_root_){}
    , decltype(_impl_.new_acc_input_hash_){}
    , decltype(_impl_.new_local_exit_root_){}
    , decltype(_impl_.prover_id_){}
    , decltype(_impl_.new_batch_num_){uint64_t{0u}}
    , decltype(_impl_.cnt_keccak_hashes_){0u}
    , decltype(_impl_.cnt_poseidon_hashes_){0u}
    , decltype(_impl_.cnt_poseidon_paddings_){0u}
    , decltype(_impl_.cnt_mem_aligns_){0u}
    , decltype(_impl_.cnt_arithmetics_){0u}
    , decltype(_impl_.cnt_binaries_){0u}
    , decltype(_impl_.cumulative_gas_used_){uint64_t{0u}}
    , decltype(_impl_.cnt_steps_){0u}
    , decltype(_impl_.error_){0}
    , decltype(_impl_.flush_id_){uint64_t{0u}}
    , decltype(_impl_.stored_flush_id_){uint64_t{0u}}
    , decltype(_impl_.fork_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.new_state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.new_acc_input_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_acc_input_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.new_local_exit_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_local_exit_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.prover_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prover_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProcessBatchResponse::~ProcessBatchResponse() {
  // @@protoc_insertion_point(destructor:executor.v1.ProcessBatchResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void ProcessBatchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.responses_.~RepeatedPtrField();
  _impl_.read_write_addresses_.Destruct();
  _impl_.read_write_addresses_.~MapField();
  _impl_.new_state_root_.Destroy();
  _impl_.new_acc_input_hash_.Destroy();
  _impl_.new_local_exit_root_.Destroy();
  _impl_.prover_id_.Destroy();
}

void ProcessBatchResponse::ArenaDtor(void* object) {
  ProcessBatchResponse* _this = reinterpret_cast< ProcessBatchResponse* >(object);
  _this->_impl_.read_write_addresses_.Destruct();
}
void ProcessBatchResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessBatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.ProcessBatchResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.responses_.Clear();
  _impl_.read_write_addresses_.Clear();
  _impl_.new_state_root_.ClearToEmpty();
  _impl_.new_acc_input_hash_.ClearToEmpty();
  _impl_.new_local_exit_root_.ClearToEmpty();
  _impl_.prover_id_.ClearToEmpty();
  ::memset(&_impl_.new_batch_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.fork_id_) -
      reinterpret_cast<char*>(&_impl_.new_batch_num_)) + sizeof(_impl_.fork_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessBatchResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes new_state_root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_new_state_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes new_acc_input_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_new_acc_input_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes new_local_exit_root = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_new_local_exit_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 new_batch_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.new_batch_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cnt_keccak_hashes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.cnt_keccak_hashes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cnt_poseidon_hashes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.cnt_poseidon_hashes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cnt_poseidon_paddings = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.cnt_poseidon_paddings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cnt_mem_aligns = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.cnt_mem_aligns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cnt_arithmetics = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.cnt_arithmetics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cnt_binaries = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.cnt_binaries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cnt_steps = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.cnt_steps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 cumulative_gas_used = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.cumulative_gas_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .executor.v1.ProcessTransactionResponse responses = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .executor.v1.ExecutorError error = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::executor::v1::ExecutorError>(val));
        } else
          goto handle_unusual;
        continue;
      // map<string, .executor.v1.InfoReadWrite> read_write_addresses = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.read_write_addresses_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 flush_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.flush_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 stored_flush_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.stored_flush_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string prover_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_prover_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.ProcessBatchResponse.prover_id"));
        } else
          goto handle_unusual;
        continue;
      // uint64 fork_id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.fork_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessBatchResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.ProcessBatchResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes new_state_root = 1;
  if (!this->_internal_new_state_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_new_state_root(), target);
  }

  // bytes new_acc_input_hash = 2;
  if (!this->_internal_new_acc_input_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_new_acc_input_hash(), target);
  }

  // bytes new_local_exit_root = 3;
  if (!this->_internal_new_local_exit_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_new_local_exit_root(), target);
  }

  // uint64 new_batch_num = 4;
  if (this->_internal_new_batch_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_new_batch_num(), target);
  }

  // uint32 cnt_keccak_hashes = 5;
  if (this->_internal_cnt_keccak_hashes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_cnt_keccak_hashes(), target);
  }

  // uint32 cnt_poseidon_hashes = 6;
  if (this->_internal_cnt_poseidon_hashes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_cnt_poseidon_hashes(), target);
  }

  // uint32 cnt_poseidon_paddings = 7;
  if (this->_internal_cnt_poseidon_paddings() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_cnt_poseidon_paddings(), target);
  }

  // uint32 cnt_mem_aligns = 8;
  if (this->_internal_cnt_mem_aligns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_cnt_mem_aligns(), target);
  }

  // uint32 cnt_arithmetics = 9;
  if (this->_internal_cnt_arithmetics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_cnt_arithmetics(), target);
  }

  // uint32 cnt_binaries = 10;
  if (this->_internal_cnt_binaries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_cnt_binaries(), target);
  }

  // uint32 cnt_steps = 11;
  if (this->_internal_cnt_steps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_cnt_steps(), target);
  }

  // uint64 cumulative_gas_used = 12;
  if (this->_internal_cumulative_gas_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(12, this->_internal_cumulative_gas_used(), target);
  }

  // repeated .executor.v1.ProcessTransactionResponse responses = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_responses_size()); i < n; i++) {
    const auto& repfield = this->_internal_responses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .executor.v1.ExecutorError error = 14;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_error(), target);
  }

  // map<string, .executor.v1.InfoReadWrite> read_write_addresses = 15;
  if (!this->_internal_read_write_addresses().empty()) {
    using MapType = ::_pb::Map<std::string, ::executor::v1::InfoReadWrite>;
    using WireHelper = ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_read_write_addresses();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "executor.v1.ProcessBatchResponse.ReadWriteAddressesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(15, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(15, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // uint64 flush_id = 16;
  if (this->_internal_flush_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(16, this->_internal_flush_id(), target);
  }

  // uint64 stored_flush_id = 17;
  if (this->_internal_stored_flush_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(17, this->_internal_stored_flush_id(), target);
  }

  // string prover_id = 18;
  if (!this->_internal_prover_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prover_id().data(), static_cast<int>(this->_internal_prover_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessBatchResponse.prover_id");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_prover_id(), target);
  }

  // uint64 fork_id = 19;
  if (this->_internal_fork_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(19, this->_internal_fork_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.ProcessBatchResponse)
  return target;
}

size_t ProcessBatchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.ProcessBatchResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .executor.v1.ProcessTransactionResponse responses = 13;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->_impl_.responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .executor.v1.InfoReadWrite> read_write_addresses = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_read_write_addresses_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::executor::v1::InfoReadWrite >::const_iterator
      it = this->_internal_read_write_addresses().begin();
      it != this->_internal_read_write_addresses().end(); ++it) {
    total_size += ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes new_state_root = 1;
  if (!this->_internal_new_state_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_new_state_root());
  }

  // bytes new_acc_input_hash = 2;
  if (!this->_internal_new_acc_input_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_new_acc_input_hash());
  }

  // bytes new_local_exit_root = 3;
  if (!this->_internal_new_local_exit_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_new_local_exit_root());
  }

  // string prover_id = 18;
  if (!this->_internal_prover_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prover_id());
  }

  // uint64 new_batch_num = 4;
  if (this->_internal_new_batch_num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_new_batch_num());
  }

  // uint32 cnt_keccak_hashes = 5;
  if (this->_internal_cnt_keccak_hashes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cnt_keccak_hashes());
  }

  // uint32 cnt_poseidon_hashes = 6;
  if (this->_internal_cnt_poseidon_hashes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cnt_poseidon_hashes());
  }

  // uint32 cnt_poseidon_paddings = 7;
  if (this->_internal_cnt_poseidon_paddings() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cnt_poseidon_paddings());
  }

  // uint32 cnt_mem_aligns = 8;
  if (this->_internal_cnt_mem_aligns() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cnt_mem_aligns());
  }

  // uint32 cnt_arithmetics = 9;
  if (this->_internal_cnt_arithmetics() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cnt_arithmetics());
  }

  // uint32 cnt_binaries = 10;
  if (this->_internal_cnt_binaries() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cnt_binaries());
  }

  // uint64 cumulative_gas_used = 12;
  if (this->_internal_cumulative_gas_used() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_cumulative_gas_used());
  }

  // uint32 cnt_steps = 11;
  if (this->_internal_cnt_steps() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cnt_steps());
  }

  // .executor.v1.ExecutorError error = 14;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
  }

  // uint64 flush_id = 16;
  if (this->_internal_flush_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_flush_id());
  }

  // uint64 stored_flush_id = 17;
  if (this->_internal_stored_flush_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_stored_flush_id());
  }

  // uint64 fork_id = 19;
  if (this->_internal_fork_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_fork_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessBatchResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcessBatchResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessBatchResponse::GetClassData() const { return &_class_data_; }


void ProcessBatchResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcessBatchResponse*>(&to_msg);
  auto& from = static_cast<const ProcessBatchResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.ProcessBatchResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.responses_.MergeFrom(from._impl_.responses_);
  _this->_impl_.read_write_addresses_.MergeFrom(from._impl_.read_write_addresses_);
  if (!from._internal_new_state_root().empty()) {
    _this->_internal_set_new_state_root(from._internal_new_state_root());
  }
  if (!from._internal_new_acc_input_hash().empty()) {
    _this->_internal_set_new_acc_input_hash(from._internal_new_acc_input_hash());
  }
  if (!from._internal_new_local_exit_root().empty()) {
    _this->_internal_set_new_local_exit_root(from._internal_new_local_exit_root());
  }
  if (!from._internal_prover_id().empty()) {
    _this->_internal_set_prover_id(from._internal_prover_id());
  }
  if (from._internal_new_batch_num() != 0) {
    _this->_internal_set_new_batch_num(from._internal_new_batch_num());
  }
  if (from._internal_cnt_keccak_hashes() != 0) {
    _this->_internal_set_cnt_keccak_hashes(from._internal_cnt_keccak_hashes());
  }
  if (from._internal_cnt_poseidon_hashes() != 0) {
    _this->_internal_set_cnt_poseidon_hashes(from._internal_cnt_poseidon_hashes());
  }
  if (from._internal_cnt_poseidon_paddings() != 0) {
    _this->_internal_set_cnt_poseidon_paddings(from._internal_cnt_poseidon_paddings());
  }
  if (from._internal_cnt_mem_aligns() != 0) {
    _this->_internal_set_cnt_mem_aligns(from._internal_cnt_mem_aligns());
  }
  if (from._internal_cnt_arithmetics() != 0) {
    _this->_internal_set_cnt_arithmetics(from._internal_cnt_arithmetics());
  }
  if (from._internal_cnt_binaries() != 0) {
    _this->_internal_set_cnt_binaries(from._internal_cnt_binaries());
  }
  if (from._internal_cumulative_gas_used() != 0) {
    _this->_internal_set_cumulative_gas_used(from._internal_cumulative_gas_used());
  }
  if (from._internal_cnt_steps() != 0) {
    _this->_internal_set_cnt_steps(from._internal_cnt_steps());
  }
  if (from._internal_error() != 0) {
    _this->_internal_set_error(from._internal_error());
  }
  if (from._internal_flush_id() != 0) {
    _this->_internal_set_flush_id(from._internal_flush_id());
  }
  if (from._internal_stored_flush_id() != 0) {
    _this->_internal_set_stored_flush_id(from._internal_stored_flush_id());
  }
  if (from._internal_fork_id() != 0) {
    _this->_internal_set_fork_id(from._internal_fork_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessBatchResponse::CopyFrom(const ProcessBatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.ProcessBatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessBatchResponse::IsInitialized() const {
  return true;
}

void ProcessBatchResponse::InternalSwap(ProcessBatchResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.responses_.InternalSwap(&other->_impl_.responses_);
  _impl_.read_write_addresses_.InternalSwap(&other->_impl_.read_write_addresses_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.new_state_root_, lhs_arena,
      &other->_impl_.new_state_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.new_acc_input_hash_, lhs_arena,
      &other->_impl_.new_acc_input_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.new_local_exit_root_, lhs_arena,
      &other->_impl_.new_local_exit_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prover_id_, lhs_arena,
      &other->_impl_.prover_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessBatchResponse, _impl_.fork_id_)
      + sizeof(ProcessBatchResponse::_impl_.fork_id_)
      - PROTOBUF_FIELD_OFFSET(ProcessBatchResponse, _impl_.new_batch_num_)>(
          reinterpret_cast<char*>(&_impl_.new_batch_num_),
          reinterpret_cast<char*>(&other->_impl_.new_batch_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessBatchResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[5]);
}

// ===================================================================

class GetFlushStatusResponse::_Internal {
 public:
};

GetFlushStatusResponse::GetFlushStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:executor.v1.GetFlushStatusResponse)
}
GetFlushStatusResponse::GetFlushStatusResponse(const GetFlushStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetFlushStatusResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.prover_id_){}
    , decltype(_impl_.stored_flush_id_){}
    , decltype(_impl_.storing_flush_id_){}
    , decltype(_impl_.last_flush_id_){}
    , decltype(_impl_.pending_to_flush_nodes_){}
    , decltype(_impl_.pending_to_flush_program_){}
    , decltype(_impl_.storing_nodes_){}
    , decltype(_impl_.storing_program_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.prover_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prover_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prover_id().empty()) {
    _this->_impl_.prover_id_.Set(from._internal_prover_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.stored_flush_id_, &from._impl_.stored_flush_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.storing_program_) -
    reinterpret_cast<char*>(&_impl_.stored_flush_id_)) + sizeof(_impl_.storing_program_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.GetFlushStatusResponse)
}

inline void GetFlushStatusResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.prover_id_){}
    , decltype(_impl_.stored_flush_id_){uint64_t{0u}}
    , decltype(_impl_.storing_flush_id_){uint64_t{0u}}
    , decltype(_impl_.last_flush_id_){uint64_t{0u}}
    , decltype(_impl_.pending_to_flush_nodes_){uint64_t{0u}}
    , decltype(_impl_.pending_to_flush_program_){uint64_t{0u}}
    , decltype(_impl_.storing_nodes_){uint64_t{0u}}
    , decltype(_impl_.storing_program_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.prover_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prover_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetFlushStatusResponse::~GetFlushStatusResponse() {
  // @@protoc_insertion_point(destructor:executor.v1.GetFlushStatusResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetFlushStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.prover_id_.Destroy();
}

void GetFlushStatusResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetFlushStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.GetFlushStatusResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.prover_id_.ClearToEmpty();
  ::memset(&_impl_.stored_flush_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.storing_program_) -
      reinterpret_cast<char*>(&_impl_.stored_flush_id_)) + sizeof(_impl_.storing_program_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFlushStatusResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 stored_flush_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.stored_flush_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 storing_flush_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.storing_flush_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 last_flush_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.last_flush_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 pending_to_flush_nodes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.pending_to_flush_nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 pending_to_flush_program = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.pending_to_flush_program_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 storing_nodes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.storing_nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 storing_program = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.storing_program_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string prover_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_prover_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.GetFlushStatusResponse.prover_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetFlushStatusResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.GetFlushStatusResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 stored_flush_id = 1;
  if (this->_internal_stored_flush_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_stored_flush_id(), target);
  }

  // uint64 storing_flush_id = 2;
  if (this->_internal_storing_flush_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_storing_flush_id(), target);
  }

  // uint64 last_flush_id = 3;
  if (this->_internal_last_flush_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_last_flush_id(), target);
  }

  // uint64 pending_to_flush_nodes = 4;
  if (this->_internal_pending_to_flush_nodes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_pending_to_flush_nodes(), target);
  }

  // uint64 pending_to_flush_program = 5;
  if (this->_internal_pending_to_flush_program() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_pending_to_flush_program(), target);
  }

  // uint64 storing_nodes = 6;
  if (this->_internal_storing_nodes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_storing_nodes(), target);
  }

  // uint64 storing_program = 7;
  if (this->_internal_storing_program() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_storing_program(), target);
  }

  // string prover_id = 8;
  if (!this->_internal_prover_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prover_id().data(), static_cast<int>(this->_internal_prover_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.GetFlushStatusResponse.prover_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_prover_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.GetFlushStatusResponse)
  return target;
}

size_t GetFlushStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.GetFlushStatusResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string prover_id = 8;
  if (!this->_internal_prover_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prover_id());
  }

  // uint64 stored_flush_id = 1;
  if (this->_internal_stored_flush_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_stored_flush_id());
  }

  // uint64 storing_flush_id = 2;
  if (this->_internal_storing_flush_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_storing_flush_id());
  }

  // uint64 last_flush_id = 3;
  if (this->_internal_last_flush_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_last_flush_id());
  }

  // uint64 pending_to_flush_nodes = 4;
  if (this->_internal_pending_to_flush_nodes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pending_to_flush_nodes());
  }

  // uint64 pending_to_flush_program = 5;
  if (this->_internal_pending_to_flush_program() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pending_to_flush_program());
  }

  // uint64 storing_nodes = 6;
  if (this->_internal_storing_nodes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_storing_nodes());
  }

  // uint64 storing_program = 7;
  if (this->_internal_storing_program() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_storing_program());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFlushStatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetFlushStatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFlushStatusResponse::GetClassData() const { return &_class_data_; }


void GetFlushStatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetFlushStatusResponse*>(&to_msg);
  auto& from = static_cast<const GetFlushStatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.GetFlushStatusResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_prover_id().empty()) {
    _this->_internal_set_prover_id(from._internal_prover_id());
  }
  if (from._internal_stored_flush_id() != 0) {
    _this->_internal_set_stored_flush_id(from._internal_stored_flush_id());
  }
  if (from._internal_storing_flush_id() != 0) {
    _this->_internal_set_storing_flush_id(from._internal_storing_flush_id());
  }
  if (from._internal_last_flush_id() != 0) {
    _this->_internal_set_last_flush_id(from._internal_last_flush_id());
  }
  if (from._internal_pending_to_flush_nodes() != 0) {
    _this->_internal_set_pending_to_flush_nodes(from._internal_pending_to_flush_nodes());
  }
  if (from._internal_pending_to_flush_program() != 0) {
    _this->_internal_set_pending_to_flush_program(from._internal_pending_to_flush_program());
  }
  if (from._internal_storing_nodes() != 0) {
    _this->_internal_set_storing_nodes(from._internal_storing_nodes());
  }
  if (from._internal_storing_program() != 0) {
    _this->_internal_set_storing_program(from._internal_storing_program());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFlushStatusResponse::CopyFrom(const GetFlushStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.GetFlushStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFlushStatusResponse::IsInitialized() const {
  return true;
}

void GetFlushStatusResponse::InternalSwap(GetFlushStatusResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prover_id_, lhs_arena,
      &other->_impl_.prover_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetFlushStatusResponse, _impl_.storing_program_)
      + sizeof(GetFlushStatusResponse::_impl_.storing_program_)
      - PROTOBUF_FIELD_OFFSET(GetFlushStatusResponse, _impl_.stored_flush_id_)>(
          reinterpret_cast<char*>(&_impl_.stored_flush_id_),
          reinterpret_cast<char*>(&other->_impl_.stored_flush_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFlushStatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[6]);
}

// ===================================================================

class TraceConfig::_Internal {
 public:
};

TraceConfig::TraceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:executor.v1.TraceConfig)
}
TraceConfig::TraceConfig(const TraceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TraceConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_hash_to_generate_full_trace_){}
    , decltype(_impl_.disable_storage_){}
    , decltype(_impl_.disable_stack_){}
    , decltype(_impl_.enable_memory_){}
    , decltype(_impl_.enable_return_data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tx_hash_to_generate_full_trace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_hash_to_generate_full_trace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx_hash_to_generate_full_trace().empty()) {
    _this->_impl_.tx_hash_to_generate_full_trace_.Set(from._internal_tx_hash_to_generate_full_trace(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.disable_storage_, &from._impl_.disable_storage_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.enable_return_data_) -
    reinterpret_cast<char*>(&_impl_.disable_storage_)) + sizeof(_impl_.enable_return_data_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.TraceConfig)
}

inline void TraceConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_hash_to_generate_full_trace_){}
    , decltype(_impl_.disable_storage_){0u}
    , decltype(_impl_.disable_stack_){0u}
    , decltype(_impl_.enable_memory_){0u}
    , decltype(_impl_.enable_return_data_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tx_hash_to_generate_full_trace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_hash_to_generate_full_trace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TraceConfig::~TraceConfig() {
  // @@protoc_insertion_point(destructor:executor.v1.TraceConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tx_hash_to_generate_full_trace_.Destroy();
}

void TraceConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.TraceConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tx_hash_to_generate_full_trace_.ClearToEmpty();
  ::memset(&_impl_.disable_storage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.enable_return_data_) -
      reinterpret_cast<char*>(&_impl_.disable_storage_)) + sizeof(_impl_.enable_return_data_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 disable_storage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.disable_storage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 disable_stack = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.disable_stack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 enable_memory = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.enable_memory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 enable_return_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.enable_return_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes tx_hash_to_generate_full_trace = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_tx_hash_to_generate_full_trace();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TraceConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.TraceConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 disable_storage = 1;
  if (this->_internal_disable_storage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_disable_storage(), target);
  }

  // uint32 disable_stack = 2;
  if (this->_internal_disable_stack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_disable_stack(), target);
  }

  // uint32 enable_memory = 3;
  if (this->_internal_enable_memory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_enable_memory(), target);
  }

  // uint32 enable_return_data = 4;
  if (this->_internal_enable_return_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_enable_return_data(), target);
  }

  // bytes tx_hash_to_generate_full_trace = 5;
  if (!this->_internal_tx_hash_to_generate_full_trace().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_tx_hash_to_generate_full_trace(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.TraceConfig)
  return target;
}

size_t TraceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.TraceConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes tx_hash_to_generate_full_trace = 5;
  if (!this->_internal_tx_hash_to_generate_full_trace().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx_hash_to_generate_full_trace());
  }

  // uint32 disable_storage = 1;
  if (this->_internal_disable_storage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_disable_storage());
  }

  // uint32 disable_stack = 2;
  if (this->_internal_disable_stack() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_disable_stack());
  }

  // uint32 enable_memory = 3;
  if (this->_internal_enable_memory() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_enable_memory());
  }

  // uint32 enable_return_data = 4;
  if (this->_internal_enable_return_data() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_enable_return_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TraceConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TraceConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TraceConfig::GetClassData() const { return &_class_data_; }


void TraceConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TraceConfig*>(&to_msg);
  auto& from = static_cast<const TraceConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.TraceConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tx_hash_to_generate_full_trace().empty()) {
    _this->_internal_set_tx_hash_to_generate_full_trace(from._internal_tx_hash_to_generate_full_trace());
  }
  if (from._internal_disable_storage() != 0) {
    _this->_internal_set_disable_storage(from._internal_disable_storage());
  }
  if (from._internal_disable_stack() != 0) {
    _this->_internal_set_disable_stack(from._internal_disable_stack());
  }
  if (from._internal_enable_memory() != 0) {
    _this->_internal_set_enable_memory(from._internal_enable_memory());
  }
  if (from._internal_enable_return_data() != 0) {
    _this->_internal_set_enable_return_data(from._internal_enable_return_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TraceConfig::CopyFrom(const TraceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.TraceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig::IsInitialized() const {
  return true;
}

void TraceConfig::InternalSwap(TraceConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tx_hash_to_generate_full_trace_, lhs_arena,
      &other->_impl_.tx_hash_to_generate_full_trace_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceConfig, _impl_.enable_return_data_)
      + sizeof(TraceConfig::_impl_.enable_return_data_)
      - PROTOBUF_FIELD_OFFSET(TraceConfig, _impl_.disable_storage_)>(
          reinterpret_cast<char*>(&_impl_.disable_storage_),
          reinterpret_cast<char*>(&other->_impl_.disable_storage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[7]);
}

// ===================================================================

OverrideAccount_StateEntry_DoNotUse::OverrideAccount_StateEntry_DoNotUse() {}
OverrideAccount_StateEntry_DoNotUse::OverrideAccount_StateEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void OverrideAccount_StateEntry_DoNotUse::MergeFrom(const OverrideAccount_StateEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata OverrideAccount_StateEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[8]);
}

// ===================================================================

OverrideAccount_StateDiffEntry_DoNotUse::OverrideAccount_StateDiffEntry_DoNotUse() {}
OverrideAccount_StateDiffEntry_DoNotUse::OverrideAccount_StateDiffEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void OverrideAccount_StateDiffEntry_DoNotUse::MergeFrom(const OverrideAccount_StateDiffEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata OverrideAccount_StateDiffEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[9]);
}

// ===================================================================

class OverrideAccount::_Internal {
 public:
};

OverrideAccount::OverrideAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &OverrideAccount::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:executor.v1.OverrideAccount)
}
OverrideAccount::OverrideAccount(const OverrideAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OverrideAccount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.state_)*/{}
    , /*decltype(_impl_.state_diff_)*/{}
    , decltype(_impl_.balance_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.nonce_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.state_.MergeFrom(from._impl_.state_);
  _this->_impl_.state_diff_.MergeFrom(from._impl_.state_diff_);
  _impl_.balance_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.balance_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_balance().empty()) {
    _this->_impl_.balance_.Set(from._internal_balance(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.nonce_ = from._impl_.nonce_;
  // @@protoc_insertion_point(copy_constructor:executor.v1.OverrideAccount)
}

inline void OverrideAccount::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.state_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.state_diff_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.balance_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.nonce_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.balance_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.balance_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OverrideAccount::~OverrideAccount() {
  // @@protoc_insertion_point(destructor:executor.v1.OverrideAccount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void OverrideAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.state_.Destruct();
  _impl_.state_.~MapField();
  _impl_.state_diff_.Destruct();
  _impl_.state_diff_.~MapField();
  _impl_.balance_.Destroy();
  _impl_.code_.Destroy();
}

void OverrideAccount::ArenaDtor(void* object) {
  OverrideAccount* _this = reinterpret_cast< OverrideAccount* >(object);
  _this->_impl_.state_.Destruct();
  _this->_impl_.state_diff_.Destruct();
}
void OverrideAccount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OverrideAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.OverrideAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.state_.Clear();
  _impl_.state_diff_.Clear();
  _impl_.balance_.ClearToEmpty();
  _impl_.code_.ClearToEmpty();
  _impl_.nonce_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OverrideAccount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes balance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_balance();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 nonce = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.state_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> state_diff = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.state_diff_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OverrideAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.OverrideAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes balance = 1;
  if (!this->_internal_balance().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_balance(), target);
  }

  // uint64 nonce = 2;
  if (this->_internal_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_nonce(), target);
  }

  // bytes code = 3;
  if (!this->_internal_code().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_code(), target);
  }

  // map<string, string> state = 4;
  if (!this->_internal_state().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = OverrideAccount_StateEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_state();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "executor.v1.OverrideAccount.StateEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "executor.v1.OverrideAccount.StateEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, string> state_diff = 5;
  if (!this->_internal_state_diff().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = OverrideAccount_StateDiffEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_state_diff();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "executor.v1.OverrideAccount.StateDiffEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "executor.v1.OverrideAccount.StateDiffEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.OverrideAccount)
  return target;
}

size_t OverrideAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.OverrideAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> state = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_state_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_state().begin();
      it != this->_internal_state().end(); ++it) {
    total_size += OverrideAccount_StateEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> state_diff = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_state_diff_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_state_diff().begin();
      it != this->_internal_state_diff().end(); ++it) {
    total_size += OverrideAccount_StateDiffEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes balance = 1;
  if (!this->_internal_balance().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_balance());
  }

  // bytes code = 3;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_code());
  }

  // uint64 nonce = 2;
  if (this->_internal_nonce() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_nonce());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OverrideAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OverrideAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OverrideAccount::GetClassData() const { return &_class_data_; }


void OverrideAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OverrideAccount*>(&to_msg);
  auto& from = static_cast<const OverrideAccount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.OverrideAccount)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.state_.MergeFrom(from._impl_.state_);
  _this->_impl_.state_diff_.MergeFrom(from._impl_.state_diff_);
  if (!from._internal_balance().empty()) {
    _this->_internal_set_balance(from._internal_balance());
  }
  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (from._internal_nonce() != 0) {
    _this->_internal_set_nonce(from._internal_nonce());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OverrideAccount::CopyFrom(const OverrideAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.OverrideAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OverrideAccount::IsInitialized() const {
  return true;
}

void OverrideAccount::InternalSwap(OverrideAccount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.state_.InternalSwap(&other->_impl_.state_);
  _impl_.state_diff_.InternalSwap(&other->_impl_.state_diff_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.balance_, lhs_arena,
      &other->_impl_.balance_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  swap(_impl_.nonce_, other->_impl_.nonce_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OverrideAccount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[10]);
}

// ===================================================================

class InfoReadWrite::_Internal {
 public:
};

InfoReadWrite::InfoReadWrite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:executor.v1.InfoReadWrite)
}
InfoReadWrite::InfoReadWrite(const InfoReadWrite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InfoReadWrite* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nonce_){}
    , decltype(_impl_.balance_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nonce_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nonce_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nonce().empty()) {
    _this->_impl_.nonce_.Set(from._internal_nonce(), 
      _this->GetArenaForAllocation());
  }
  _impl_.balance_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.balance_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_balance().empty()) {
    _this->_impl_.balance_.Set(from._internal_balance(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:executor.v1.InfoReadWrite)
}

inline void InfoReadWrite::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nonce_){}
    , decltype(_impl_.balance_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nonce_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nonce_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.balance_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.balance_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InfoReadWrite::~InfoReadWrite() {
  // @@protoc_insertion_point(destructor:executor.v1.InfoReadWrite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InfoReadWrite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nonce_.Destroy();
  _impl_.balance_.Destroy();
}

void InfoReadWrite::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InfoReadWrite::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.InfoReadWrite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nonce_.ClearToEmpty();
  _impl_.balance_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InfoReadWrite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string nonce = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nonce();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.InfoReadWrite.nonce"));
        } else
          goto handle_unusual;
        continue;
      // string balance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_balance();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.InfoReadWrite.balance"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InfoReadWrite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.InfoReadWrite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string nonce = 1;
  if (!this->_internal_nonce().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nonce().data(), static_cast<int>(this->_internal_nonce().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.InfoReadWrite.nonce");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nonce(), target);
  }

  // string balance = 2;
  if (!this->_internal_balance().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_balance().data(), static_cast<int>(this->_internal_balance().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.InfoReadWrite.balance");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.InfoReadWrite)
  return target;
}

size_t InfoReadWrite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.InfoReadWrite)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nonce = 1;
  if (!this->_internal_nonce().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nonce());
  }

  // string balance = 2;
  if (!this->_internal_balance().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_balance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InfoReadWrite::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InfoReadWrite::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InfoReadWrite::GetClassData() const { return &_class_data_; }


void InfoReadWrite::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InfoReadWrite*>(&to_msg);
  auto& from = static_cast<const InfoReadWrite&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.InfoReadWrite)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nonce().empty()) {
    _this->_internal_set_nonce(from._internal_nonce());
  }
  if (!from._internal_balance().empty()) {
    _this->_internal_set_balance(from._internal_balance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InfoReadWrite::CopyFrom(const InfoReadWrite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.InfoReadWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoReadWrite::IsInitialized() const {
  return true;
}

void InfoReadWrite::InternalSwap(InfoReadWrite* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nonce_, lhs_arena,
      &other->_impl_.nonce_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.balance_, lhs_arena,
      &other->_impl_.balance_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InfoReadWrite::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[11]);
}

// ===================================================================

class FullTrace::_Internal {
 public:
  static const ::executor::v1::TransactionContext& context(const FullTrace* msg);
};

const ::executor::v1::TransactionContext&
FullTrace::_Internal::context(const FullTrace* msg) {
  return *msg->_impl_.context_;
}
FullTrace::FullTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:executor.v1.FullTrace)
}
FullTrace::FullTrace(const FullTrace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FullTrace* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.steps_){from._impl_.steps_}
    , decltype(_impl_.context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_context()) {
    _this->_impl_.context_ = new ::executor::v1::TransactionContext(*from._impl_.context_);
  }
  // @@protoc_insertion_point(copy_constructor:executor.v1.FullTrace)
}

inline void FullTrace::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.steps_){arena}
    , decltype(_impl_.context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FullTrace::~FullTrace() {
  // @@protoc_insertion_point(destructor:executor.v1.FullTrace)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FullTrace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.steps_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.context_;
}

void FullTrace::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FullTrace::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.FullTrace)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.steps_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.context_ != nullptr) {
    delete _impl_.context_;
  }
  _impl_.context_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FullTrace::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .executor.v1.TransactionContext context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .executor.v1.TransactionStep steps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_steps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FullTrace::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.FullTrace)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .executor.v1.TransactionContext context = 1;
  if (this->_internal_has_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::context(this),
        _Internal::context(this).GetCachedSize(), target, stream);
  }

  // repeated .executor.v1.TransactionStep steps = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_steps_size()); i < n; i++) {
    const auto& repfield = this->_internal_steps(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.FullTrace)
  return target;
}

size_t FullTrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.FullTrace)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .executor.v1.TransactionStep steps = 2;
  total_size += 1UL * this->_internal_steps_size();
  for (const auto& msg : this->_impl_.steps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .executor.v1.TransactionContext context = 1;
  if (this->_internal_has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.context_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FullTrace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FullTrace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FullTrace::GetClassData() const { return &_class_data_; }


void FullTrace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FullTrace*>(&to_msg);
  auto& from = static_cast<const FullTrace&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.FullTrace)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.steps_.MergeFrom(from._impl_.steps_);
  if (from._internal_has_context()) {
    _this->_internal_mutable_context()->::executor::v1::TransactionContext::MergeFrom(
        from._internal_context());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FullTrace::CopyFrom(const FullTrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.FullTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullTrace::IsInitialized() const {
  return true;
}

void FullTrace::InternalSwap(FullTrace* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.steps_.InternalSwap(&other->_impl_.steps_);
  swap(_impl_.context_, other->_impl_.context_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FullTrace::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[12]);
}

// ===================================================================

class TransactionContext::_Internal {
 public:
};

TransactionContext::TransactionContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:executor.v1.TransactionContext)
}
TransactionContext::TransactionContext(const TransactionContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransactionContext* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.from_){}
    , decltype(_impl_.to_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.batch_){}
    , decltype(_impl_.output_){}
    , decltype(_impl_.gas_price_){}
    , decltype(_impl_.old_state_root_){}
    , decltype(_impl_.gas_){}
    , decltype(_impl_.gas_used_){}
    , decltype(_impl_.execution_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_from().empty()) {
    _this->_impl_.from_.Set(from._internal_from(), 
      _this->GetArenaForAllocation());
  }
  _impl_.to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to().empty()) {
    _this->_impl_.to_.Set(from._internal_to(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  _impl_.batch_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.batch_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_batch().empty()) {
    _this->_impl_.batch_.Set(from._internal_batch(), 
      _this->GetArenaForAllocation());
  }
  _impl_.output_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_output().empty()) {
    _this->_impl_.output_.Set(from._internal_output(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gas_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gas_price_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gas_price().empty()) {
    _this->_impl_.gas_price_.Set(from._internal_gas_price(), 
      _this->GetArenaForAllocation());
  }
  _impl_.old_state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_old_state_root().empty()) {
    _this->_impl_.old_state_root_.Set(from._internal_old_state_root(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.gas_, &from._impl_.gas_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.execution_time_) -
    reinterpret_cast<char*>(&_impl_.gas_)) + sizeof(_impl_.execution_time_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.TransactionContext)
}

inline void TransactionContext::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.from_){}
    , decltype(_impl_.to_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.batch_){}
    , decltype(_impl_.output_){}
    , decltype(_impl_.gas_price_){}
    , decltype(_impl_.old_state_root_){}
    , decltype(_impl_.gas_){uint64_t{0u}}
    , decltype(_impl_.gas_used_){uint64_t{0u}}
    , decltype(_impl_.execution_time_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.batch_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.batch_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.output_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gas_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gas_price_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.old_state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransactionContext::~TransactionContext() {
  // @@protoc_insertion_point(destructor:executor.v1.TransactionContext)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransactionContext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  _impl_.from_.Destroy();
  _impl_.to_.Destroy();
  _impl_.data_.Destroy();
  _impl_.value_.Destroy();
  _impl_.batch_.Destroy();
  _impl_.output_.Destroy();
  _impl_.gas_price_.Destroy();
  _impl_.old_state_root_.Destroy();
}

void TransactionContext::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransactionContext::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.TransactionContext)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  _impl_.from_.ClearToEmpty();
  _impl_.to_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _impl_.batch_.ClearToEmpty();
  _impl_.output_.ClearToEmpty();
  _impl_.gas_price_.ClearToEmpty();
  _impl_.old_state_root_.ClearToEmpty();
  ::memset(&_impl_.gas_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.execution_time_) -
      reinterpret_cast<char*>(&_impl_.gas_)) + sizeof(_impl_.execution_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionContext::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.TransactionContext.type"));
        } else
          goto handle_unusual;
        continue;
      // string from = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_from();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.TransactionContext.from"));
        } else
          goto handle_unusual;
        continue;
      // string to = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_to();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.TransactionContext.to"));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gas = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.TransactionContext.value"));
        } else
          goto handle_unusual;
        continue;
      // bytes batch = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_batch();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes output = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_output();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gas_used = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.gas_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string gas_price = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_gas_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.TransactionContext.gas_price"));
        } else
          goto handle_unusual;
        continue;
      // uint32 execution_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.execution_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes old_state_root = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_old_state_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionContext::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.TransactionContext)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.TransactionContext.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // string from = 2;
  if (!this->_internal_from().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.TransactionContext.from");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_from(), target);
  }

  // string to = 3;
  if (!this->_internal_to().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.TransactionContext.to");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_to(), target);
  }

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  // uint64 gas = 5;
  if (this->_internal_gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_gas(), target);
  }

  // string value = 6;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.TransactionContext.value");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_value(), target);
  }

  // bytes batch = 7;
  if (!this->_internal_batch().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_batch(), target);
  }

  // bytes output = 8;
  if (!this->_internal_output().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_output(), target);
  }

  // uint64 gas_used = 9;
  if (this->_internal_gas_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_gas_used(), target);
  }

  // string gas_price = 10;
  if (!this->_internal_gas_price().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gas_price().data(), static_cast<int>(this->_internal_gas_price().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.TransactionContext.gas_price");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_gas_price(), target);
  }

  // uint32 execution_time = 11;
  if (this->_internal_execution_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_execution_time(), target);
  }

  // bytes old_state_root = 12;
  if (!this->_internal_old_state_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_old_state_root(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.TransactionContext)
  return target;
}

size_t TransactionContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.TransactionContext)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string from = 2;
  if (!this->_internal_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  // string to = 3;
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string value = 6;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // bytes batch = 7;
  if (!this->_internal_batch().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_batch());
  }

  // bytes output = 8;
  if (!this->_internal_output().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_output());
  }

  // string gas_price = 10;
  if (!this->_internal_gas_price().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gas_price());
  }

  // bytes old_state_root = 12;
  if (!this->_internal_old_state_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_old_state_root());
  }

  // uint64 gas = 5;
  if (this->_internal_gas() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gas());
  }

  // uint64 gas_used = 9;
  if (this->_internal_gas_used() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gas_used());
  }

  // uint32 execution_time = 11;
  if (this->_internal_execution_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_execution_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionContext::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransactionContext::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionContext::GetClassData() const { return &_class_data_; }


void TransactionContext::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransactionContext*>(&to_msg);
  auto& from = static_cast<const TransactionContext&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.TransactionContext)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_from().empty()) {
    _this->_internal_set_from(from._internal_from());
  }
  if (!from._internal_to().empty()) {
    _this->_internal_set_to(from._internal_to());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (!from._internal_batch().empty()) {
    _this->_internal_set_batch(from._internal_batch());
  }
  if (!from._internal_output().empty()) {
    _this->_internal_set_output(from._internal_output());
  }
  if (!from._internal_gas_price().empty()) {
    _this->_internal_set_gas_price(from._internal_gas_price());
  }
  if (!from._internal_old_state_root().empty()) {
    _this->_internal_set_old_state_root(from._internal_old_state_root());
  }
  if (from._internal_gas() != 0) {
    _this->_internal_set_gas(from._internal_gas());
  }
  if (from._internal_gas_used() != 0) {
    _this->_internal_set_gas_used(from._internal_gas_used());
  }
  if (from._internal_execution_time() != 0) {
    _this->_internal_set_execution_time(from._internal_execution_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionContext::CopyFrom(const TransactionContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.TransactionContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionContext::IsInitialized() const {
  return true;
}

void TransactionContext::InternalSwap(TransactionContext* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.from_, lhs_arena,
      &other->_impl_.from_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.to_, lhs_arena,
      &other->_impl_.to_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.batch_, lhs_arena,
      &other->_impl_.batch_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.output_, lhs_arena,
      &other->_impl_.output_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gas_price_, lhs_arena,
      &other->_impl_.gas_price_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.old_state_root_, lhs_arena,
      &other->_impl_.old_state_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionContext, _impl_.execution_time_)
      + sizeof(TransactionContext::_impl_.execution_time_)
      - PROTOBUF_FIELD_OFFSET(TransactionContext, _impl_.gas_)>(
          reinterpret_cast<char*>(&_impl_.gas_),
          reinterpret_cast<char*>(&other->_impl_.gas_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionContext::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[13]);
}

// ===================================================================

TransactionStep_StorageEntry_DoNotUse::TransactionStep_StorageEntry_DoNotUse() {}
TransactionStep_StorageEntry_DoNotUse::TransactionStep_StorageEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TransactionStep_StorageEntry_DoNotUse::MergeFrom(const TransactionStep_StorageEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TransactionStep_StorageEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[14]);
}

// ===================================================================

class TransactionStep::_Internal {
 public:
  static const ::executor::v1::Contract& contract(const TransactionStep* msg);
};

const ::executor::v1::Contract&
TransactionStep::_Internal::contract(const TransactionStep* msg) {
  return *msg->_impl_.contract_;
}
TransactionStep::TransactionStep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &TransactionStep::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:executor.v1.TransactionStep)
}
TransactionStep::TransactionStep(const TransactionStep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransactionStep* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stack_){from._impl_.stack_}
    , /*decltype(_impl_.storage_)*/{}
    , decltype(_impl_.state_root_){}
    , decltype(_impl_.memory_){}
    , decltype(_impl_.return_data_){}
    , decltype(_impl_.contract_){nullptr}
    , decltype(_impl_.pc_){}
    , decltype(_impl_.gas_){}
    , decltype(_impl_.depth_){}
    , decltype(_impl_.op_){}
    , decltype(_impl_.gas_cost_){}
    , decltype(_impl_.gas_refund_){}
    , decltype(_impl_.memory_size_){}
    , decltype(_impl_.memory_offset_){}
    , decltype(_impl_.error_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.storage_.MergeFrom(from._impl_.storage_);
  _impl_.state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_state_root().empty()) {
    _this->_impl_.state_root_.Set(from._internal_state_root(), 
      _this->GetArenaForAllocation());
  }
  _impl_.memory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_memory().empty()) {
    _this->_impl_.memory_.Set(from._internal_memory(), 
      _this->GetArenaForAllocation());
  }
  _impl_.return_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.return_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_return_data().empty()) {
    _this->_impl_.return_data_.Set(from._internal_return_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contract()) {
    _this->_impl_.contract_ = new ::executor::v1::Contract(*from._impl_.contract_);
  }
  ::memcpy(&_impl_.pc_, &from._impl_.pc_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.error_) -
    reinterpret_cast<char*>(&_impl_.pc_)) + sizeof(_impl_.error_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.TransactionStep)
}

inline void TransactionStep::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stack_){arena}
    , /*decltype(_impl_.storage_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.state_root_){}
    , decltype(_impl_.memory_){}
    , decltype(_impl_.return_data_){}
    , decltype(_impl_.contract_){nullptr}
    , decltype(_impl_.pc_){uint64_t{0u}}
    , decltype(_impl_.gas_){uint64_t{0u}}
    , decltype(_impl_.depth_){0u}
    , decltype(_impl_.op_){0u}
    , decltype(_impl_.gas_cost_){uint64_t{0u}}
    , decltype(_impl_.gas_refund_){uint64_t{0u}}
    , decltype(_impl_.memory_size_){0u}
    , decltype(_impl_.memory_offset_){0u}
    , decltype(_impl_.error_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.memory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.return_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.return_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransactionStep::~TransactionStep() {
  // @@protoc_insertion_point(destructor:executor.v1.TransactionStep)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void TransactionStep::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stack_.~RepeatedPtrField();
  _impl_.storage_.Destruct();
  _impl_.storage_.~MapField();
  _impl_.state_root_.Destroy();
  _impl_.memory_.Destroy();
  _impl_.return_data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contract_;
}

void TransactionStep::ArenaDtor(void* object) {
  TransactionStep* _this = reinterpret_cast< TransactionStep* >(object);
  _this->_impl_.storage_.Destruct();
}
void TransactionStep::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransactionStep::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.TransactionStep)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stack_.Clear();
  _impl_.storage_.Clear();
  _impl_.state_root_.ClearToEmpty();
  _impl_.memory_.ClearToEmpty();
  _impl_.return_data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.contract_ != nullptr) {
    delete _impl_.contract_;
  }
  _impl_.contract_ = nullptr;
  ::memset(&_impl_.pc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.error_) -
      reinterpret_cast<char*>(&_impl_.pc_)) + sizeof(_impl_.error_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionStep::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes state_root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_state_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 depth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 pc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.pc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gas = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gas_cost = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.gas_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gas_refund = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.gas_refund_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 op = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.op_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string stack = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_stack();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "executor.v1.TransactionStep.stack"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes memory = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_memory();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 memory_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.memory_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 memory_offset = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.memory_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes return_data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_return_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .executor.v1.Contract contract = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_contract(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .executor.v1.RomError error = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::executor::v1::RomError>(val));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> storage = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.storage_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionStep::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.TransactionStep)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes state_root = 1;
  if (!this->_internal_state_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_state_root(), target);
  }

  // uint32 depth = 2;
  if (this->_internal_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_depth(), target);
  }

  // uint64 pc = 3;
  if (this->_internal_pc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_pc(), target);
  }

  // uint64 gas = 4;
  if (this->_internal_gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_gas(), target);
  }

  // uint64 gas_cost = 5;
  if (this->_internal_gas_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_gas_cost(), target);
  }

  // uint64 gas_refund = 6;
  if (this->_internal_gas_refund() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_gas_refund(), target);
  }

  // uint32 op = 7;
  if (this->_internal_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_op(), target);
  }

  // repeated string stack = 8;
  for (int i = 0, n = this->_internal_stack_size(); i < n; i++) {
    const auto& s = this->_internal_stack(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.TransactionStep.stack");
    target = stream->WriteString(8, s, target);
  }

  // bytes memory = 9;
  if (!this->_internal_memory().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_memory(), target);
  }

  // uint32 memory_size = 10;
  if (this->_internal_memory_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_memory_size(), target);
  }

  // uint32 memory_offset = 11;
  if (this->_internal_memory_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_memory_offset(), target);
  }

  // bytes return_data = 12;
  if (!this->_internal_return_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_return_data(), target);
  }

  // .executor.v1.Contract contract = 13;
  if (this->_internal_has_contract()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::contract(this),
        _Internal::contract(this).GetCachedSize(), target, stream);
  }

  // .executor.v1.RomError error = 14;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_error(), target);
  }

  // map<string, string> storage = 15;
  if (!this->_internal_storage().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = TransactionStep_StorageEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_storage();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "executor.v1.TransactionStep.StorageEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "executor.v1.TransactionStep.StorageEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(15, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(15, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.TransactionStep)
  return target;
}

size_t TransactionStep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.TransactionStep)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string stack = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.stack_.size());
  for (int i = 0, n = _impl_.stack_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.stack_.Get(i));
  }

  // map<string, string> storage = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_storage_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_storage().begin();
      it != this->_internal_storage().end(); ++it) {
    total_size += TransactionStep_StorageEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes state_root = 1;
  if (!this->_internal_state_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_state_root());
  }

  // bytes memory = 9;
  if (!this->_internal_memory().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_memory());
  }

  // bytes return_data = 12;
  if (!this->_internal_return_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_return_data());
  }

  // .executor.v1.Contract contract = 13;
  if (this->_internal_has_contract()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.contract_);
  }

  // uint64 pc = 3;
  if (this->_internal_pc() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pc());
  }

  // uint64 gas = 4;
  if (this->_internal_gas() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gas());
  }

  // uint32 depth = 2;
  if (this->_internal_depth() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_depth());
  }

  // uint32 op = 7;
  if (this->_internal_op() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_op());
  }

  // uint64 gas_cost = 5;
  if (this->_internal_gas_cost() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gas_cost());
  }

  // uint64 gas_refund = 6;
  if (this->_internal_gas_refund() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gas_refund());
  }

  // uint32 memory_size = 10;
  if (this->_internal_memory_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_memory_size());
  }

  // uint32 memory_offset = 11;
  if (this->_internal_memory_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_memory_offset());
  }

  // .executor.v1.RomError error = 14;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionStep::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransactionStep::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionStep::GetClassData() const { return &_class_data_; }


void TransactionStep::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransactionStep*>(&to_msg);
  auto& from = static_cast<const TransactionStep&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.TransactionStep)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stack_.MergeFrom(from._impl_.stack_);
  _this->_impl_.storage_.MergeFrom(from._impl_.storage_);
  if (!from._internal_state_root().empty()) {
    _this->_internal_set_state_root(from._internal_state_root());
  }
  if (!from._internal_memory().empty()) {
    _this->_internal_set_memory(from._internal_memory());
  }
  if (!from._internal_return_data().empty()) {
    _this->_internal_set_return_data(from._internal_return_data());
  }
  if (from._internal_has_contract()) {
    _this->_internal_mutable_contract()->::executor::v1::Contract::MergeFrom(
        from._internal_contract());
  }
  if (from._internal_pc() != 0) {
    _this->_internal_set_pc(from._internal_pc());
  }
  if (from._internal_gas() != 0) {
    _this->_internal_set_gas(from._internal_gas());
  }
  if (from._internal_depth() != 0) {
    _this->_internal_set_depth(from._internal_depth());
  }
  if (from._internal_op() != 0) {
    _this->_internal_set_op(from._internal_op());
  }
  if (from._internal_gas_cost() != 0) {
    _this->_internal_set_gas_cost(from._internal_gas_cost());
  }
  if (from._internal_gas_refund() != 0) {
    _this->_internal_set_gas_refund(from._internal_gas_refund());
  }
  if (from._internal_memory_size() != 0) {
    _this->_internal_set_memory_size(from._internal_memory_size());
  }
  if (from._internal_memory_offset() != 0) {
    _this->_internal_set_memory_offset(from._internal_memory_offset());
  }
  if (from._internal_error() != 0) {
    _this->_internal_set_error(from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionStep::CopyFrom(const TransactionStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.TransactionStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionStep::IsInitialized() const {
  return true;
}

void TransactionStep::InternalSwap(TransactionStep* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stack_.InternalSwap(&other->_impl_.stack_);
  _impl_.storage_.InternalSwap(&other->_impl_.storage_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.state_root_, lhs_arena,
      &other->_impl_.state_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.memory_, lhs_arena,
      &other->_impl_.memory_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.return_data_, lhs_arena,
      &other->_impl_.return_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionStep, _impl_.error_)
      + sizeof(TransactionStep::_impl_.error_)
      - PROTOBUF_FIELD_OFFSET(TransactionStep, _impl_.contract_)>(
          reinterpret_cast<char*>(&_impl_.contract_),
          reinterpret_cast<char*>(&other->_impl_.contract_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionStep::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[15]);
}

// ===================================================================

class Contract::_Internal {
 public:
};

Contract::Contract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:executor.v1.Contract)
}
Contract::Contract(const Contract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Contract* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.caller_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.gas_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.caller_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caller_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_caller().empty()) {
    _this->_impl_.caller_.Set(from._internal_caller(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.gas_ = from._impl_.gas_;
  // @@protoc_insertion_point(copy_constructor:executor.v1.Contract)
}

inline void Contract::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.caller_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.gas_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.caller_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caller_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Contract::~Contract() {
  // @@protoc_insertion_point(destructor:executor.v1.Contract)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Contract::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
  _impl_.caller_.Destroy();
  _impl_.value_.Destroy();
  _impl_.data_.Destroy();
  _impl_.type_.Destroy();
}

void Contract::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Contract::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.Contract)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _impl_.caller_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  _impl_.gas_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Contract::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.Contract.address"));
        } else
          goto handle_unusual;
        continue;
      // string caller = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_caller();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.Contract.caller"));
        } else
          goto handle_unusual;
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.Contract.value"));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gas = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.Contract.type"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Contract::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.Contract)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.Contract.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // string caller = 2;
  if (!this->_internal_caller().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_caller().data(), static_cast<int>(this->_internal_caller().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.Contract.caller");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_caller(), target);
  }

  // string value = 3;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.Contract.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  // uint64 gas = 5;
  if (this->_internal_gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_gas(), target);
  }

  // string type = 6;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.Contract.type");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.Contract)
  return target;
}

size_t Contract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.Contract)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string caller = 2;
  if (!this->_internal_caller().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_caller());
  }

  // string value = 3;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string type = 6;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // uint64 gas = 5;
  if (this->_internal_gas() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gas());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Contract::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Contract::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Contract::GetClassData() const { return &_class_data_; }


void Contract::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Contract*>(&to_msg);
  auto& from = static_cast<const Contract&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.Contract)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_caller().empty()) {
    _this->_internal_set_caller(from._internal_caller());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_gas() != 0) {
    _this->_internal_set_gas(from._internal_gas());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Contract::CopyFrom(const Contract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.Contract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Contract::IsInitialized() const {
  return true;
}

void Contract::InternalSwap(Contract* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.caller_, lhs_arena,
      &other->_impl_.caller_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  swap(_impl_.gas_, other->_impl_.gas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Contract::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[16]);
}

// ===================================================================

class ProcessTransactionResponse::_Internal {
 public:
  static const ::executor::v1::FullTrace& full_trace(const ProcessTransactionResponse* msg);
};

const ::executor::v1::FullTrace&
ProcessTransactionResponse::_Internal::full_trace(const ProcessTransactionResponse* msg) {
  return *msg->_impl_.full_trace_;
}
ProcessTransactionResponse::ProcessTransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:executor.v1.ProcessTransactionResponse)
}
ProcessTransactionResponse::ProcessTransactionResponse(const ProcessTransactionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcessTransactionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.logs_){from._impl_.logs_}
    , decltype(_impl_.tx_hash_){}
    , decltype(_impl_.rlp_tx_){}
    , decltype(_impl_.return_value_){}
    , decltype(_impl_.create_address_){}
    , decltype(_impl_.state_root_){}
    , decltype(_impl_.effective_gas_price_){}
    , decltype(_impl_.full_trace_){nullptr}
    , decltype(_impl_.gas_left_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.error_){}
    , decltype(_impl_.gas_used_){}
    , decltype(_impl_.gas_refunded_){}
    , decltype(_impl_.effective_percentage_){}
    , decltype(_impl_.has_gasprice_opcode_){}
    , decltype(_impl_.has_balance_opcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tx_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx_hash().empty()) {
    _this->_impl_.tx_hash_.Set(from._internal_tx_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rlp_tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rlp_tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rlp_tx().empty()) {
    _this->_impl_.rlp_tx_.Set(from._internal_rlp_tx(), 
      _this->GetArenaForAllocation());
  }
  _impl_.return_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.return_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_return_value().empty()) {
    _this->_impl_.return_value_.Set(from._internal_return_value(), 
      _this->GetArenaForAllocation());
  }
  _impl_.create_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.create_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_create_address().empty()) {
    _this->_impl_.create_address_.Set(from._internal_create_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_state_root().empty()) {
    _this->_impl_.state_root_.Set(from._internal_state_root(), 
      _this->GetArenaForAllocation());
  }
  _impl_.effective_gas_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.effective_gas_price_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_effective_gas_price().empty()) {
    _this->_impl_.effective_gas_price_.Set(from._internal_effective_gas_price(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_full_trace()) {
    _this->_impl_.full_trace_ = new ::executor::v1::FullTrace(*from._impl_.full_trace_);
  }
  ::memcpy(&_impl_.gas_left_, &from._impl_.gas_left_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.has_balance_opcode_) -
    reinterpret_cast<char*>(&_impl_.gas_left_)) + sizeof(_impl_.has_balance_opcode_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.ProcessTransactionResponse)
}

inline void ProcessTransactionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.logs_){arena}
    , decltype(_impl_.tx_hash_){}
    , decltype(_impl_.rlp_tx_){}
    , decltype(_impl_.return_value_){}
    , decltype(_impl_.create_address_){}
    , decltype(_impl_.state_root_){}
    , decltype(_impl_.effective_gas_price_){}
    , decltype(_impl_.full_trace_){nullptr}
    , decltype(_impl_.gas_left_){uint64_t{0u}}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.error_){0}
    , decltype(_impl_.gas_used_){uint64_t{0u}}
    , decltype(_impl_.gas_refunded_){uint64_t{0u}}
    , decltype(_impl_.effective_percentage_){0u}
    , decltype(_impl_.has_gasprice_opcode_){0u}
    , decltype(_impl_.has_balance_opcode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tx_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rlp_tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rlp_tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.return_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.return_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.create_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.create_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.effective_gas_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.effective_gas_price_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProcessTransactionResponse::~ProcessTransactionResponse() {
  // @@protoc_insertion_point(destructor:executor.v1.ProcessTransactionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcessTransactionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.logs_.~RepeatedPtrField();
  _impl_.tx_hash_.Destroy();
  _impl_.rlp_tx_.Destroy();
  _impl_.return_value_.Destroy();
  _impl_.create_address_.Destroy();
  _impl_.state_root_.Destroy();
  _impl_.effective_gas_price_.Destroy();
  if (this != internal_default_instance()) delete _impl_.full_trace_;
}

void ProcessTransactionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessTransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.ProcessTransactionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.logs_.Clear();
  _impl_.tx_hash_.ClearToEmpty();
  _impl_.rlp_tx_.ClearToEmpty();
  _impl_.return_value_.ClearToEmpty();
  _impl_.create_address_.ClearToEmpty();
  _impl_.state_root_.ClearToEmpty();
  _impl_.effective_gas_price_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.full_trace_ != nullptr) {
    delete _impl_.full_trace_;
  }
  _impl_.full_trace_ = nullptr;
  ::memset(&_impl_.gas_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.has_balance_opcode_) -
      reinterpret_cast<char*>(&_impl_.gas_left_)) + sizeof(_impl_.has_balance_opcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessTransactionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes tx_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tx_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes rlp_tx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_rlp_tx();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes return_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_return_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gas_left = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.gas_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gas_used = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.gas_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gas_refunded = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.gas_refunded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .executor.v1.RomError error = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::executor::v1::RomError>(val));
        } else
          goto handle_unusual;
        continue;
      // string create_address = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_create_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.ProcessTransactionResponse.create_address"));
        } else
          goto handle_unusual;
        continue;
      // bytes state_root = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_state_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .executor.v1.Log logs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .executor.v1.FullTrace full_trace = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_full_trace(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string effective_gas_price = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_effective_gas_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.ProcessTransactionResponse.effective_gas_price"));
        } else
          goto handle_unusual;
        continue;
      // uint32 effective_percentage = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.effective_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 has_gasprice_opcode = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.has_gasprice_opcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 has_balance_opcode = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.has_balance_opcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessTransactionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.ProcessTransactionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes tx_hash = 1;
  if (!this->_internal_tx_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_tx_hash(), target);
  }

  // bytes rlp_tx = 2;
  if (!this->_internal_rlp_tx().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_rlp_tx(), target);
  }

  // uint32 type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_type(), target);
  }

  // bytes return_value = 4;
  if (!this->_internal_return_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_return_value(), target);
  }

  // uint64 gas_left = 5;
  if (this->_internal_gas_left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_gas_left(), target);
  }

  // uint64 gas_used = 6;
  if (this->_internal_gas_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_gas_used(), target);
  }

  // uint64 gas_refunded = 7;
  if (this->_internal_gas_refunded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_gas_refunded(), target);
  }

  // .executor.v1.RomError error = 8;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_error(), target);
  }

  // string create_address = 9;
  if (!this->_internal_create_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_address().data(), static_cast<int>(this->_internal_create_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessTransactionResponse.create_address");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_create_address(), target);
  }

  // bytes state_root = 10;
  if (!this->_internal_state_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_state_root(), target);
  }

  // repeated .executor.v1.Log logs = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_logs_size()); i < n; i++) {
    const auto& repfield = this->_internal_logs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .executor.v1.FullTrace full_trace = 14;
  if (this->_internal_has_full_trace()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::full_trace(this),
        _Internal::full_trace(this).GetCachedSize(), target, stream);
  }

  // string effective_gas_price = 15;
  if (!this->_internal_effective_gas_price().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_effective_gas_price().data(), static_cast<int>(this->_internal_effective_gas_price().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessTransactionResponse.effective_gas_price");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_effective_gas_price(), target);
  }

  // uint32 effective_percentage = 16;
  if (this->_internal_effective_percentage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_effective_percentage(), target);
  }

  // uint32 has_gasprice_opcode = 17;
  if (this->_internal_has_gasprice_opcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_has_gasprice_opcode(), target);
  }

  // uint32 has_balance_opcode = 18;
  if (this->_internal_has_balance_opcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_has_balance_opcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.ProcessTransactionResponse)
  return target;
}

size_t ProcessTransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.ProcessTransactionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .executor.v1.Log logs = 11;
  total_size += 1UL * this->_internal_logs_size();
  for (const auto& msg : this->_impl_.logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes tx_hash = 1;
  if (!this->_internal_tx_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx_hash());
  }

  // bytes rlp_tx = 2;
  if (!this->_internal_rlp_tx().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rlp_tx());
  }

  // bytes return_value = 4;
  if (!this->_internal_return_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_return_value());
  }

  // string create_address = 9;
  if (!this->_internal_create_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_address());
  }

  // bytes state_root = 10;
  if (!this->_internal_state_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_state_root());
  }

  // string effective_gas_price = 15;
  if (!this->_internal_effective_gas_price().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_effective_gas_price());
  }

  // .executor.v1.FullTrace full_trace = 14;
  if (this->_internal_has_full_trace()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.full_trace_);
  }

  // uint64 gas_left = 5;
  if (this->_internal_gas_left() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gas_left());
  }

  // uint32 type = 3;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // .executor.v1.RomError error = 8;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
  }

  // uint64 gas_used = 6;
  if (this->_internal_gas_used() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gas_used());
  }

  // uint64 gas_refunded = 7;
  if (this->_internal_gas_refunded() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gas_refunded());
  }

  // uint32 effective_percentage = 16;
  if (this->_internal_effective_percentage() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_effective_percentage());
  }

  // uint32 has_gasprice_opcode = 17;
  if (this->_internal_has_gasprice_opcode() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_has_gasprice_opcode());
  }

  // uint32 has_balance_opcode = 18;
  if (this->_internal_has_balance_opcode() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_has_balance_opcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessTransactionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcessTransactionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessTransactionResponse::GetClassData() const { return &_class_data_; }


void ProcessTransactionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcessTransactionResponse*>(&to_msg);
  auto& from = static_cast<const ProcessTransactionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.ProcessTransactionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.logs_.MergeFrom(from._impl_.logs_);
  if (!from._internal_tx_hash().empty()) {
    _this->_internal_set_tx_hash(from._internal_tx_hash());
  }
  if (!from._internal_rlp_tx().empty()) {
    _this->_internal_set_rlp_tx(from._internal_rlp_tx());
  }
  if (!from._internal_return_value().empty()) {
    _this->_internal_set_return_value(from._internal_return_value());
  }
  if (!from._internal_create_address().empty()) {
    _this->_internal_set_create_address(from._internal_create_address());
  }
  if (!from._internal_state_root().empty()) {
    _this->_internal_set_state_root(from._internal_state_root());
  }
  if (!from._internal_effective_gas_price().empty()) {
    _this->_internal_set_effective_gas_price(from._internal_effective_gas_price());
  }
  if (from._internal_has_full_trace()) {
    _this->_internal_mutable_full_trace()->::executor::v1::FullTrace::MergeFrom(
        from._internal_full_trace());
  }
  if (from._internal_gas_left() != 0) {
    _this->_internal_set_gas_left(from._internal_gas_left());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_error() != 0) {
    _this->_internal_set_error(from._internal_error());
  }
  if (from._internal_gas_used() != 0) {
    _this->_internal_set_gas_used(from._internal_gas_used());
  }
  if (from._internal_gas_refunded() != 0) {
    _this->_internal_set_gas_refunded(from._internal_gas_refunded());
  }
  if (from._internal_effective_percentage() != 0) {
    _this->_internal_set_effective_percentage(from._internal_effective_percentage());
  }
  if (from._internal_has_gasprice_opcode() != 0) {
    _this->_internal_set_has_gasprice_opcode(from._internal_has_gasprice_opcode());
  }
  if (from._internal_has_balance_opcode() != 0) {
    _this->_internal_set_has_balance_opcode(from._internal_has_balance_opcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessTransactionResponse::CopyFrom(const ProcessTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.ProcessTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessTransactionResponse::IsInitialized() const {
  return true;
}

void ProcessTransactionResponse::InternalSwap(ProcessTransactionResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.logs_.InternalSwap(&other->_impl_.logs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tx_hash_, lhs_arena,
      &other->_impl_.tx_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rlp_tx_, lhs_arena,
      &other->_impl_.rlp_tx_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.return_value_, lhs_arena,
      &other->_impl_.return_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.create_address_, lhs_arena,
      &other->_impl_.create_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.state_root_, lhs_arena,
      &other->_impl_.state_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.effective_gas_price_, lhs_arena,
      &other->_impl_.effective_gas_price_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessTransactionResponse, _impl_.has_balance_opcode_)
      + sizeof(ProcessTransactionResponse::_impl_.has_balance_opcode_)
      - PROTOBUF_FIELD_OFFSET(ProcessTransactionResponse, _impl_.full_trace_)>(
          reinterpret_cast<char*>(&_impl_.full_trace_),
          reinterpret_cast<char*>(&other->_impl_.full_trace_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessTransactionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[17]);
}

// ===================================================================

class Log::_Internal {
 public:
};

Log::Log(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:executor.v1.Log)
}
Log::Log(const Log& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Log* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.topics_){from._impl_.topics_}
    , decltype(_impl_.address_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.tx_hash_){}
    , decltype(_impl_.batch_hash_){}
    , decltype(_impl_.batch_number_){}
    , decltype(_impl_.tx_index_){}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tx_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx_hash().empty()) {
    _this->_impl_.tx_hash_.Set(from._internal_tx_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.batch_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.batch_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_batch_hash().empty()) {
    _this->_impl_.batch_hash_.Set(from._internal_batch_hash(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.batch_number_, &from._impl_.batch_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.index_) -
    reinterpret_cast<char*>(&_impl_.batch_number_)) + sizeof(_impl_.index_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.Log)
}

inline void Log::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.topics_){arena}
    , decltype(_impl_.address_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.tx_hash_){}
    , decltype(_impl_.batch_hash_){}
    , decltype(_impl_.batch_number_){uint64_t{0u}}
    , decltype(_impl_.tx_index_){0u}
    , decltype(_impl_.index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tx_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.batch_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.batch_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Log::~Log() {
  // @@protoc_insertion_point(destructor:executor.v1.Log)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Log::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.topics_.~RepeatedPtrField();
  _impl_.address_.Destroy();
  _impl_.data_.Destroy();
  _impl_.tx_hash_.Destroy();
  _impl_.batch_hash_.Destroy();
}

void Log::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Log::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.Log)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.topics_.Clear();
  _impl_.address_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _impl_.tx_hash_.ClearToEmpty();
  _impl_.batch_hash_.ClearToEmpty();
  ::memset(&_impl_.batch_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.index_) -
      reinterpret_cast<char*>(&_impl_.batch_number_)) + sizeof(_impl_.index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Log::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.Log.address"));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes topics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_topics();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 batch_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.batch_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes tx_hash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_tx_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tx_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.tx_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes batch_hash = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_batch_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 index = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Log::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.Log)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.Log.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // repeated bytes topics = 2;
  for (int i = 0, n = this->_internal_topics_size(); i < n; i++) {
    const auto& s = this->_internal_topics(i);
    target = stream->WriteBytes(2, s, target);
  }

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  // uint64 batch_number = 4;
  if (this->_internal_batch_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_batch_number(), target);
  }

  // bytes tx_hash = 5;
  if (!this->_internal_tx_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_tx_hash(), target);
  }

  // uint32 tx_index = 6;
  if (this->_internal_tx_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_tx_index(), target);
  }

  // bytes batch_hash = 7;
  if (!this->_internal_batch_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_batch_hash(), target);
  }

  // uint32 index = 8;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.Log)
  return target;
}

size_t Log::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.Log)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes topics = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.topics_.size());
  for (int i = 0, n = _impl_.topics_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.topics_.Get(i));
  }

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // bytes tx_hash = 5;
  if (!this->_internal_tx_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx_hash());
  }

  // bytes batch_hash = 7;
  if (!this->_internal_batch_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_batch_hash());
  }

  // uint64 batch_number = 4;
  if (this->_internal_batch_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_batch_number());
  }

  // uint32 tx_index = 6;
  if (this->_internal_tx_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tx_index());
  }

  // uint32 index = 8;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Log::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Log::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Log::GetClassData() const { return &_class_data_; }


void Log::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Log*>(&to_msg);
  auto& from = static_cast<const Log&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.Log)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.topics_.MergeFrom(from._impl_.topics_);
  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_tx_hash().empty()) {
    _this->_internal_set_tx_hash(from._internal_tx_hash());
  }
  if (!from._internal_batch_hash().empty()) {
    _this->_internal_set_batch_hash(from._internal_batch_hash());
  }
  if (from._internal_batch_number() != 0) {
    _this->_internal_set_batch_number(from._internal_batch_number());
  }
  if (from._internal_tx_index() != 0) {
    _this->_internal_set_tx_index(from._internal_tx_index());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Log::CopyFrom(const Log& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Log::IsInitialized() const {
  return true;
}

void Log::InternalSwap(Log* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.topics_.InternalSwap(&other->_impl_.topics_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tx_hash_, lhs_arena,
      &other->_impl_.tx_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.batch_hash_, lhs_arena,
      &other->_impl_.batch_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Log, _impl_.index_)
      + sizeof(Log::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(Log, _impl_.batch_number_)>(
          reinterpret_cast<char*>(&_impl_.batch_number_),
          reinterpret_cast<char*>(&other->_impl_.batch_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Log::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[18]);
}

// ===================================================================

ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse::ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse() {}
ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse::ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse::MergeFrom(const ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[19]);
}

// ===================================================================

ProcessBatchRequestV2_DbEntry_DoNotUse::ProcessBatchRequestV2_DbEntry_DoNotUse() {}
ProcessBatchRequestV2_DbEntry_DoNotUse::ProcessBatchRequestV2_DbEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProcessBatchRequestV2_DbEntry_DoNotUse::MergeFrom(const ProcessBatchRequestV2_DbEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProcessBatchRequestV2_DbEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[20]);
}

// ===================================================================

ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse::ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse() {}
ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse::ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse::MergeFrom(const ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[21]);
}

// ===================================================================

ProcessBatchRequestV2_StateOverrideEntry_DoNotUse::ProcessBatchRequestV2_StateOverrideEntry_DoNotUse() {}
ProcessBatchRequestV2_StateOverrideEntry_DoNotUse::ProcessBatchRequestV2_StateOverrideEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProcessBatchRequestV2_StateOverrideEntry_DoNotUse::MergeFrom(const ProcessBatchRequestV2_StateOverrideEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProcessBatchRequestV2_StateOverrideEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[22]);
}

// ===================================================================

class ProcessBatchRequestV2::_Internal {
 public:
  static const ::executor::v1::TraceConfigV2& trace_config(const ProcessBatchRequestV2* msg);
  static const ::executor::v1::DebugV2& debug(const ProcessBatchRequestV2* msg);
};

const ::executor::v1::TraceConfigV2&
ProcessBatchRequestV2::_Internal::trace_config(const ProcessBatchRequestV2* msg) {
  return *msg->_impl_.trace_config_;
}
const ::executor::v1::DebugV2&
ProcessBatchRequestV2::_Internal::debug(const ProcessBatchRequestV2* msg) {
  return *msg->_impl_.debug_;
}
ProcessBatchRequestV2::ProcessBatchRequestV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &ProcessBatchRequestV2::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:executor.v1.ProcessBatchRequestV2)
}
ProcessBatchRequestV2::ProcessBatchRequestV2(const ProcessBatchRequestV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcessBatchRequestV2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.l1_info_tree_data_)*/{}
    , /*decltype(_impl_.db_)*/{}
    , /*decltype(_impl_.contracts_bytecode_)*/{}
    , /*decltype(_impl_.state_override_)*/{}
    , decltype(_impl_.old_state_root_){}
    , decltype(_impl_.old_acc_input_hash_){}
    , decltype(_impl_.batch_l2_data_){}
    , decltype(_impl_.l1_info_root_){}
    , decltype(_impl_.coinbase_){}
    , decltype(_impl_.forced_blockhash_l1_){}
    , decltype(_impl_.from_){}
    , decltype(_impl_.context_id_){}
    , decltype(_impl_.trace_config_){nullptr}
    , decltype(_impl_.debug_){nullptr}
    , decltype(_impl_.old_batch_num_){}
    , decltype(_impl_.chain_id_){}
    , decltype(_impl_.fork_id_){}
    , decltype(_impl_.timestamp_limit_){}
    , decltype(_impl_.update_merkle_tree_){}
    , decltype(_impl_.no_counters_){}
    , decltype(_impl_.skip_verify_l1_info_root_){}
    , decltype(_impl_.skip_first_change_l2_block_){}
    , decltype(_impl_.skip_write_block_info_root_){}
    , decltype(_impl_.get_keys_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.l1_info_tree_data_.MergeFrom(from._impl_.l1_info_tree_data_);
  _this->_impl_.db_.MergeFrom(from._impl_.db_);
  _this->_impl_.contracts_bytecode_.MergeFrom(from._impl_.contracts_bytecode_);
  _this->_impl_.state_override_.MergeFrom(from._impl_.state_override_);
  _impl_.old_state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_old_state_root().empty()) {
    _this->_impl_.old_state_root_.Set(from._internal_old_state_root(), 
      _this->GetArenaForAllocation());
  }
  _impl_.old_acc_input_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_acc_input_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_old_acc_input_hash().empty()) {
    _this->_impl_.old_acc_input_hash_.Set(from._internal_old_acc_input_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.batch_l2_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.batch_l2_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_batch_l2_data().empty()) {
    _this->_impl_.batch_l2_data_.Set(from._internal_batch_l2_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.l1_info_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.l1_info_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_l1_info_root().empty()) {
    _this->_impl_.l1_info_root_.Set(from._internal_l1_info_root(), 
      _this->GetArenaForAllocation());
  }
  _impl_.coinbase_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.coinbase_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_coinbase().empty()) {
    _this->_impl_.coinbase_.Set(from._internal_coinbase(), 
      _this->GetArenaForAllocation());
  }
  _impl_.forced_blockhash_l1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.forced_blockhash_l1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_forced_blockhash_l1().empty()) {
    _this->_impl_.forced_blockhash_l1_.Set(from._internal_forced_blockhash_l1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_from().empty()) {
    _this->_impl_.from_.Set(from._internal_from(), 
      _this->GetArenaForAllocation());
  }
  _impl_.context_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.context_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_context_id().empty()) {
    _this->_impl_.context_id_.Set(from._internal_context_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_trace_config()) {
    _this->_impl_.trace_config_ = new ::executor::v1::TraceConfigV2(*from._impl_.trace_config_);
  }
  if (from._internal_has_debug()) {
    _this->_impl_.debug_ = new ::executor::v1::DebugV2(*from._impl_.debug_);
  }
  ::memcpy(&_impl_.old_batch_num_, &from._impl_.old_batch_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.get_keys_) -
    reinterpret_cast<char*>(&_impl_.old_batch_num_)) + sizeof(_impl_.get_keys_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.ProcessBatchRequestV2)
}

inline void ProcessBatchRequestV2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.l1_info_tree_data_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.db_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.contracts_bytecode_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.state_override_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.old_state_root_){}
    , decltype(_impl_.old_acc_input_hash_){}
    , decltype(_impl_.batch_l2_data_){}
    , decltype(_impl_.l1_info_root_){}
    , decltype(_impl_.coinbase_){}
    , decltype(_impl_.forced_blockhash_l1_){}
    , decltype(_impl_.from_){}
    , decltype(_impl_.context_id_){}
    , decltype(_impl_.trace_config_){nullptr}
    , decltype(_impl_.debug_){nullptr}
    , decltype(_impl_.old_batch_num_){uint64_t{0u}}
    , decltype(_impl_.chain_id_){uint64_t{0u}}
    , decltype(_impl_.fork_id_){uint64_t{0u}}
    , decltype(_impl_.timestamp_limit_){uint64_t{0u}}
    , decltype(_impl_.update_merkle_tree_){0u}
    , decltype(_impl_.no_counters_){0u}
    , decltype(_impl_.skip_verify_l1_info_root_){0u}
    , decltype(_impl_.skip_first_change_l2_block_){0u}
    , decltype(_impl_.skip_write_block_info_root_){0u}
    , decltype(_impl_.get_keys_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.old_state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.old_acc_input_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_acc_input_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.batch_l2_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.batch_l2_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.l1_info_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.l1_info_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.coinbase_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.coinbase_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.forced_blockhash_l1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.forced_blockhash_l1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.context_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.context_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProcessBatchRequestV2::~ProcessBatchRequestV2() {
  // @@protoc_insertion_point(destructor:executor.v1.ProcessBatchRequestV2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void ProcessBatchRequestV2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.l1_info_tree_data_.Destruct();
  _impl_.l1_info_tree_data_.~MapField();
  _impl_.db_.Destruct();
  _impl_.db_.~MapField();
  _impl_.contracts_bytecode_.Destruct();
  _impl_.contracts_bytecode_.~MapField();
  _impl_.state_override_.Destruct();
  _impl_.state_override_.~MapField();
  _impl_.old_state_root_.Destroy();
  _impl_.old_acc_input_hash_.Destroy();
  _impl_.batch_l2_data_.Destroy();
  _impl_.l1_info_root_.Destroy();
  _impl_.coinbase_.Destroy();
  _impl_.forced_blockhash_l1_.Destroy();
  _impl_.from_.Destroy();
  _impl_.context_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.trace_config_;
  if (this != internal_default_instance()) delete _impl_.debug_;
}

void ProcessBatchRequestV2::ArenaDtor(void* object) {
  ProcessBatchRequestV2* _this = reinterpret_cast< ProcessBatchRequestV2* >(object);
  _this->_impl_.l1_info_tree_data_.Destruct();
  _this->_impl_.db_.Destruct();
  _this->_impl_.contracts_bytecode_.Destruct();
  _this->_impl_.state_override_.Destruct();
}
void ProcessBatchRequestV2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessBatchRequestV2::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.ProcessBatchRequestV2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.l1_info_tree_data_.Clear();
  _impl_.db_.Clear();
  _impl_.contracts_bytecode_.Clear();
  _impl_.state_override_.Clear();
  _impl_.old_state_root_.ClearToEmpty();
  _impl_.old_acc_input_hash_.ClearToEmpty();
  _impl_.batch_l2_data_.ClearToEmpty();
  _impl_.l1_info_root_.ClearToEmpty();
  _impl_.coinbase_.ClearToEmpty();
  _impl_.forced_blockhash_l1_.ClearToEmpty();
  _impl_.from_.ClearToEmpty();
  _impl_.context_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.trace_config_ != nullptr) {
    delete _impl_.trace_config_;
  }
  _impl_.trace_config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.debug_ != nullptr) {
    delete _impl_.debug_;
  }
  _impl_.debug_ = nullptr;
  ::memset(&_impl_.old_batch_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.get_keys_) -
      reinterpret_cast<char*>(&_impl_.old_batch_num_)) + sizeof(_impl_.get_keys_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessBatchRequestV2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes old_state_root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_old_state_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes old_acc_input_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_old_acc_input_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 old_batch_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.old_batch_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 chain_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.chain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 fork_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.fork_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes batch_l2_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_batch_l2_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes l1_info_root = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_l1_info_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp_limit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.timestamp_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string coinbase = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_coinbase();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.ProcessBatchRequestV2.coinbase"));
        } else
          goto handle_unusual;
        continue;
      // bytes forced_blockhash_l1 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_forced_blockhash_l1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 update_merkle_tree = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.update_merkle_tree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 no_counters = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.no_counters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string from = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_from();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.ProcessBatchRequestV2.from"));
        } else
          goto handle_unusual;
        continue;
      // uint32 skip_verify_l1_info_root = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.skip_verify_l1_info_root_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 skip_first_change_l2_block = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.skip_first_change_l2_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 skip_write_block_info_root = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.skip_write_block_info_root_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .executor.v1.L1DataV2> l1_info_tree_data = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.l1_info_tree_data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> db = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.db_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> contracts_bytecode = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.contracts_bytecode_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .executor.v1.TraceConfigV2 trace_config = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_trace_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string context_id = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_context_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.ProcessBatchRequestV2.context_id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 get_keys = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.get_keys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .executor.v1.OverrideAccountV2> state_override = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.state_override_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .executor.v1.DebugV2 debug = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_debug(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessBatchRequestV2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.ProcessBatchRequestV2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes old_state_root = 1;
  if (!this->_internal_old_state_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_old_state_root(), target);
  }

  // bytes old_acc_input_hash = 2;
  if (!this->_internal_old_acc_input_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_old_acc_input_hash(), target);
  }

  // uint64 old_batch_num = 3;
  if (this->_internal_old_batch_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_old_batch_num(), target);
  }

  // uint64 chain_id = 4;
  if (this->_internal_chain_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_chain_id(), target);
  }

  // uint64 fork_id = 5;
  if (this->_internal_fork_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_fork_id(), target);
  }

  // bytes batch_l2_data = 6;
  if (!this->_internal_batch_l2_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_batch_l2_data(), target);
  }

  // bytes l1_info_root = 7;
  if (!this->_internal_l1_info_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_l1_info_root(), target);
  }

  // uint64 timestamp_limit = 8;
  if (this->_internal_timestamp_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_timestamp_limit(), target);
  }

  // string coinbase = 9;
  if (!this->_internal_coinbase().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_coinbase().data(), static_cast<int>(this->_internal_coinbase().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessBatchRequestV2.coinbase");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_coinbase(), target);
  }

  // bytes forced_blockhash_l1 = 10;
  if (!this->_internal_forced_blockhash_l1().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_forced_blockhash_l1(), target);
  }

  // uint32 update_merkle_tree = 11;
  if (this->_internal_update_merkle_tree() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_update_merkle_tree(), target);
  }

  // uint32 no_counters = 12;
  if (this->_internal_no_counters() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_no_counters(), target);
  }

  // string from = 13;
  if (!this->_internal_from().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessBatchRequestV2.from");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_from(), target);
  }

  // uint32 skip_verify_l1_info_root = 14;
  if (this->_internal_skip_verify_l1_info_root() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_skip_verify_l1_info_root(), target);
  }

  // uint32 skip_first_change_l2_block = 15;
  if (this->_internal_skip_first_change_l2_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_skip_first_change_l2_block(), target);
  }

  // uint32 skip_write_block_info_root = 16;
  if (this->_internal_skip_write_block_info_root() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_skip_write_block_info_root(), target);
  }

  // map<uint32, .executor.v1.L1DataV2> l1_info_tree_data = 17;
  if (!this->_internal_l1_info_tree_data().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::executor::v1::L1DataV2>;
    using WireHelper = ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_l1_info_tree_data();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(17, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(17, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<string, string> db = 18;
  if (!this->_internal_db().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = ProcessBatchRequestV2_DbEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_db();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "executor.v1.ProcessBatchRequestV2.DbEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "executor.v1.ProcessBatchRequestV2.DbEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(18, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(18, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, string> contracts_bytecode = 19;
  if (!this->_internal_contracts_bytecode().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_contracts_bytecode();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "executor.v1.ProcessBatchRequestV2.ContractsBytecodeEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "executor.v1.ProcessBatchRequestV2.ContractsBytecodeEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(19, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(19, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .executor.v1.TraceConfigV2 trace_config = 20;
  if (this->_internal_has_trace_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::trace_config(this),
        _Internal::trace_config(this).GetCachedSize(), target, stream);
  }

  // string context_id = 21;
  if (!this->_internal_context_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_context_id().data(), static_cast<int>(this->_internal_context_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessBatchRequestV2.context_id");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_context_id(), target);
  }

  // uint32 get_keys = 22;
  if (this->_internal_get_keys() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_get_keys(), target);
  }

  // map<string, .executor.v1.OverrideAccountV2> state_override = 23;
  if (!this->_internal_state_override().empty()) {
    using MapType = ::_pb::Map<std::string, ::executor::v1::OverrideAccountV2>;
    using WireHelper = ProcessBatchRequestV2_StateOverrideEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_state_override();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "executor.v1.ProcessBatchRequestV2.StateOverrideEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(23, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(23, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .executor.v1.DebugV2 debug = 24;
  if (this->_internal_has_debug()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::debug(this),
        _Internal::debug(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.ProcessBatchRequestV2)
  return target;
}

size_t ProcessBatchRequestV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.ProcessBatchRequestV2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .executor.v1.L1DataV2> l1_info_tree_data = 17;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_l1_info_tree_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::executor::v1::L1DataV2 >::const_iterator
      it = this->_internal_l1_info_tree_data().begin();
      it != this->_internal_l1_info_tree_data().end(); ++it) {
    total_size += ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> db = 18;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_db_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_db().begin();
      it != this->_internal_db().end(); ++it) {
    total_size += ProcessBatchRequestV2_DbEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> contracts_bytecode = 19;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_contracts_bytecode_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_contracts_bytecode().begin();
      it != this->_internal_contracts_bytecode().end(); ++it) {
    total_size += ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .executor.v1.OverrideAccountV2> state_override = 23;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_state_override_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::executor::v1::OverrideAccountV2 >::const_iterator
      it = this->_internal_state_override().begin();
      it != this->_internal_state_override().end(); ++it) {
    total_size += ProcessBatchRequestV2_StateOverrideEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes old_state_root = 1;
  if (!this->_internal_old_state_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_old_state_root());
  }

  // bytes old_acc_input_hash = 2;
  if (!this->_internal_old_acc_input_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_old_acc_input_hash());
  }

  // bytes batch_l2_data = 6;
  if (!this->_internal_batch_l2_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_batch_l2_data());
  }

  // bytes l1_info_root = 7;
  if (!this->_internal_l1_info_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_l1_info_root());
  }

  // string coinbase = 9;
  if (!this->_internal_coinbase().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_coinbase());
  }

  // bytes forced_blockhash_l1 = 10;
  if (!this->_internal_forced_blockhash_l1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_forced_blockhash_l1());
  }

  // string from = 13;
  if (!this->_internal_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  // string context_id = 21;
  if (!this->_internal_context_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_context_id());
  }

  // .executor.v1.TraceConfigV2 trace_config = 20;
  if (this->_internal_has_trace_config()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trace_config_);
  }

  // .executor.v1.DebugV2 debug = 24;
  if (this->_internal_has_debug()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.debug_);
  }

  // uint64 old_batch_num = 3;
  if (this->_internal_old_batch_num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_old_batch_num());
  }

  // uint64 chain_id = 4;
  if (this->_internal_chain_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_chain_id());
  }

  // uint64 fork_id = 5;
  if (this->_internal_fork_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_fork_id());
  }

  // uint64 timestamp_limit = 8;
  if (this->_internal_timestamp_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp_limit());
  }

  // uint32 update_merkle_tree = 11;
  if (this->_internal_update_merkle_tree() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_update_merkle_tree());
  }

  // uint32 no_counters = 12;
  if (this->_internal_no_counters() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_no_counters());
  }

  // uint32 skip_verify_l1_info_root = 14;
  if (this->_internal_skip_verify_l1_info_root() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skip_verify_l1_info_root());
  }

  // uint32 skip_first_change_l2_block = 15;
  if (this->_internal_skip_first_change_l2_block() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skip_first_change_l2_block());
  }

  // uint32 skip_write_block_info_root = 16;
  if (this->_internal_skip_write_block_info_root() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_skip_write_block_info_root());
  }

  // uint32 get_keys = 22;
  if (this->_internal_get_keys() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_get_keys());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessBatchRequestV2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcessBatchRequestV2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessBatchRequestV2::GetClassData() const { return &_class_data_; }


void ProcessBatchRequestV2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcessBatchRequestV2*>(&to_msg);
  auto& from = static_cast<const ProcessBatchRequestV2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.ProcessBatchRequestV2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.l1_info_tree_data_.MergeFrom(from._impl_.l1_info_tree_data_);
  _this->_impl_.db_.MergeFrom(from._impl_.db_);
  _this->_impl_.contracts_bytecode_.MergeFrom(from._impl_.contracts_bytecode_);
  _this->_impl_.state_override_.MergeFrom(from._impl_.state_override_);
  if (!from._internal_old_state_root().empty()) {
    _this->_internal_set_old_state_root(from._internal_old_state_root());
  }
  if (!from._internal_old_acc_input_hash().empty()) {
    _this->_internal_set_old_acc_input_hash(from._internal_old_acc_input_hash());
  }
  if (!from._internal_batch_l2_data().empty()) {
    _this->_internal_set_batch_l2_data(from._internal_batch_l2_data());
  }
  if (!from._internal_l1_info_root().empty()) {
    _this->_internal_set_l1_info_root(from._internal_l1_info_root());
  }
  if (!from._internal_coinbase().empty()) {
    _this->_internal_set_coinbase(from._internal_coinbase());
  }
  if (!from._internal_forced_blockhash_l1().empty()) {
    _this->_internal_set_forced_blockhash_l1(from._internal_forced_blockhash_l1());
  }
  if (!from._internal_from().empty()) {
    _this->_internal_set_from(from._internal_from());
  }
  if (!from._internal_context_id().empty()) {
    _this->_internal_set_context_id(from._internal_context_id());
  }
  if (from._internal_has_trace_config()) {
    _this->_internal_mutable_trace_config()->::executor::v1::TraceConfigV2::MergeFrom(
        from._internal_trace_config());
  }
  if (from._internal_has_debug()) {
    _this->_internal_mutable_debug()->::executor::v1::DebugV2::MergeFrom(
        from._internal_debug());
  }
  if (from._internal_old_batch_num() != 0) {
    _this->_internal_set_old_batch_num(from._internal_old_batch_num());
  }
  if (from._internal_chain_id() != 0) {
    _this->_internal_set_chain_id(from._internal_chain_id());
  }
  if (from._internal_fork_id() != 0) {
    _this->_internal_set_fork_id(from._internal_fork_id());
  }
  if (from._internal_timestamp_limit() != 0) {
    _this->_internal_set_timestamp_limit(from._internal_timestamp_limit());
  }
  if (from._internal_update_merkle_tree() != 0) {
    _this->_internal_set_update_merkle_tree(from._internal_update_merkle_tree());
  }
  if (from._internal_no_counters() != 0) {
    _this->_internal_set_no_counters(from._internal_no_counters());
  }
  if (from._internal_skip_verify_l1_info_root() != 0) {
    _this->_internal_set_skip_verify_l1_info_root(from._internal_skip_verify_l1_info_root());
  }
  if (from._internal_skip_first_change_l2_block() != 0) {
    _this->_internal_set_skip_first_change_l2_block(from._internal_skip_first_change_l2_block());
  }
  if (from._internal_skip_write_block_info_root() != 0) {
    _this->_internal_set_skip_write_block_info_root(from._internal_skip_write_block_info_root());
  }
  if (from._internal_get_keys() != 0) {
    _this->_internal_set_get_keys(from._internal_get_keys());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessBatchRequestV2::CopyFrom(const ProcessBatchRequestV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.ProcessBatchRequestV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessBatchRequestV2::IsInitialized() const {
  return true;
}

void ProcessBatchRequestV2::InternalSwap(ProcessBatchRequestV2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.l1_info_tree_data_.InternalSwap(&other->_impl_.l1_info_tree_data_);
  _impl_.db_.InternalSwap(&other->_impl_.db_);
  _impl_.contracts_bytecode_.InternalSwap(&other->_impl_.contracts_bytecode_);
  _impl_.state_override_.InternalSwap(&other->_impl_.state_override_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.old_state_root_, lhs_arena,
      &other->_impl_.old_state_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.old_acc_input_hash_, lhs_arena,
      &other->_impl_.old_acc_input_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.batch_l2_data_, lhs_arena,
      &other->_impl_.batch_l2_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.l1_info_root_, lhs_arena,
      &other->_impl_.l1_info_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.coinbase_, lhs_arena,
      &other->_impl_.coinbase_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.forced_blockhash_l1_, lhs_arena,
      &other->_impl_.forced_blockhash_l1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.from_, lhs_arena,
      &other->_impl_.from_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.context_id_, lhs_arena,
      &other->_impl_.context_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessBatchRequestV2, _impl_.get_keys_)
      + sizeof(ProcessBatchRequestV2::_impl_.get_keys_)
      - PROTOBUF_FIELD_OFFSET(ProcessBatchRequestV2, _impl_.trace_config_)>(
          reinterpret_cast<char*>(&_impl_.trace_config_),
          reinterpret_cast<char*>(&other->_impl_.trace_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessBatchRequestV2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[23]);
}

// ===================================================================

ProcessStatelessBatchRequestV2_L1InfoTreeIndexMinTimestampEntry_DoNotUse::ProcessStatelessBatchRequestV2_L1InfoTreeIndexMinTimestampEntry_DoNotUse() {}
ProcessStatelessBatchRequestV2_L1InfoTreeIndexMinTimestampEntry_DoNotUse::ProcessStatelessBatchRequestV2_L1InfoTreeIndexMinTimestampEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProcessStatelessBatchRequestV2_L1InfoTreeIndexMinTimestampEntry_DoNotUse::MergeFrom(const ProcessStatelessBatchRequestV2_L1InfoTreeIndexMinTimestampEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProcessStatelessBatchRequestV2_L1InfoTreeIndexMinTimestampEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[24]);
}

// ===================================================================

class ProcessStatelessBatchRequestV2::_Internal {
 public:
  static const ::executor::v1::TraceConfigV2& trace_config(const ProcessStatelessBatchRequestV2* msg);
};

const ::executor::v1::TraceConfigV2&
ProcessStatelessBatchRequestV2::_Internal::trace_config(const ProcessStatelessBatchRequestV2* msg) {
  return *msg->_impl_.trace_config_;
}
ProcessStatelessBatchRequestV2::ProcessStatelessBatchRequestV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &ProcessStatelessBatchRequestV2::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:executor.v1.ProcessStatelessBatchRequestV2)
}
ProcessStatelessBatchRequestV2::ProcessStatelessBatchRequestV2(const ProcessStatelessBatchRequestV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcessStatelessBatchRequestV2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.l1_info_tree_index_min_timestamp_)*/{}
    , decltype(_impl_.witness_){}
    , decltype(_impl_.data_stream_){}
    , decltype(_impl_.coinbase_){}
    , decltype(_impl_.old_acc_input_hash_){}
    , decltype(_impl_.l1_info_root_){}
    , decltype(_impl_.forced_blockhash_l1_){}
    , decltype(_impl_.context_id_){}
    , decltype(_impl_.trace_config_){nullptr}
    , decltype(_impl_.timestamp_limit_){}
    , decltype(_impl_.no_counters_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.l1_info_tree_index_min_timestamp_.MergeFrom(from._impl_.l1_info_tree_index_min_timestamp_);
  _impl_.witness_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.witness_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_witness().empty()) {
    _this->_impl_.witness_.Set(from._internal_witness(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_stream_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_stream_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data_stream().empty()) {
    _this->_impl_.data_stream_.Set(from._internal_data_stream(), 
      _this->GetArenaForAllocation());
  }
  _impl_.coinbase_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.coinbase_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_coinbase().empty()) {
    _this->_impl_.coinbase_.Set(from._internal_coinbase(), 
      _this->GetArenaForAllocation());
  }
  _impl_.old_acc_input_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_acc_input_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_old_acc_input_hash().empty()) {
    _this->_impl_.old_acc_input_hash_.Set(from._internal_old_acc_input_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.l1_info_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.l1_info_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_l1_info_root().empty()) {
    _this->_impl_.l1_info_root_.Set(from._internal_l1_info_root(), 
      _this->GetArenaForAllocation());
  }
  _impl_.forced_blockhash_l1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.forced_blockhash_l1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_forced_blockhash_l1().empty()) {
    _this->_impl_.forced_blockhash_l1_.Set(from._internal_forced_blockhash_l1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.context_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.context_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_context_id().empty()) {
    _this->_impl_.context_id_.Set(from._internal_context_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_trace_config()) {
    _this->_impl_.trace_config_ = new ::executor::v1::TraceConfigV2(*from._impl_.trace_config_);
  }
  ::memcpy(&_impl_.timestamp_limit_, &from._impl_.timestamp_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.no_counters_) -
    reinterpret_cast<char*>(&_impl_.timestamp_limit_)) + sizeof(_impl_.no_counters_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.ProcessStatelessBatchRequestV2)
}

inline void ProcessStatelessBatchRequestV2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.l1_info_tree_index_min_timestamp_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.witness_){}
    , decltype(_impl_.data_stream_){}
    , decltype(_impl_.coinbase_){}
    , decltype(_impl_.old_acc_input_hash_){}
    , decltype(_impl_.l1_info_root_){}
    , decltype(_impl_.forced_blockhash_l1_){}
    , decltype(_impl_.context_id_){}
    , decltype(_impl_.trace_config_){nullptr}
    , decltype(_impl_.timestamp_limit_){uint64_t{0u}}
    , decltype(_impl_.no_counters_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.witness_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.witness_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_stream_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_stream_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.coinbase_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.coinbase_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.old_acc_input_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_acc_input_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.l1_info_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.l1_info_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.forced_blockhash_l1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.forced_blockhash_l1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.context_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.context_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProcessStatelessBatchRequestV2::~ProcessStatelessBatchRequestV2() {
  // @@protoc_insertion_point(destructor:executor.v1.ProcessStatelessBatchRequestV2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void ProcessStatelessBatchRequestV2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.l1_info_tree_index_min_timestamp_.Destruct();
  _impl_.l1_info_tree_index_min_timestamp_.~MapField();
  _impl_.witness_.Destroy();
  _impl_.data_stream_.Destroy();
  _impl_.coinbase_.Destroy();
  _impl_.old_acc_input_hash_.Destroy();
  _impl_.l1_info_root_.Destroy();
  _impl_.forced_blockhash_l1_.Destroy();
  _impl_.context_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.trace_config_;
}

void ProcessStatelessBatchRequestV2::ArenaDtor(void* object) {
  ProcessStatelessBatchRequestV2* _this = reinterpret_cast< ProcessStatelessBatchRequestV2* >(object);
  _this->_impl_.l1_info_tree_index_min_timestamp_.Destruct();
}
void ProcessStatelessBatchRequestV2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessStatelessBatchRequestV2::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.ProcessStatelessBatchRequestV2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.l1_info_tree_index_min_timestamp_.Clear();
  _impl_.witness_.ClearToEmpty();
  _impl_.data_stream_.ClearToEmpty();
  _impl_.coinbase_.ClearToEmpty();
  _impl_.old_acc_input_hash_.ClearToEmpty();
  _impl_.l1_info_root_.ClearToEmpty();
  _impl_.forced_blockhash_l1_.ClearToEmpty();
  _impl_.context_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.trace_config_ != nullptr) {
    delete _impl_.trace_config_;
  }
  _impl_.trace_config_ = nullptr;
  ::memset(&_impl_.timestamp_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.no_counters_) -
      reinterpret_cast<char*>(&_impl_.timestamp_limit_)) + sizeof(_impl_.no_counters_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessStatelessBatchRequestV2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes witness = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_witness();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data_stream = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data_stream();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string coinbase = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_coinbase();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.ProcessStatelessBatchRequestV2.coinbase"));
        } else
          goto handle_unusual;
        continue;
      // bytes old_acc_input_hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_old_acc_input_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes l1_info_root = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_l1_info_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp_limit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.timestamp_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes forced_blockhash_l1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_forced_blockhash_l1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string context_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_context_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.ProcessStatelessBatchRequestV2.context_id"));
        } else
          goto handle_unusual;
        continue;
      // .executor.v1.TraceConfigV2 trace_config = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_trace_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint64, uint64> l1_info_tree_index_min_timestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.l1_info_tree_index_min_timestamp_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 no_counters = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.no_counters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessStatelessBatchRequestV2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.ProcessStatelessBatchRequestV2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes witness = 1;
  if (!this->_internal_witness().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_witness(), target);
  }

  // bytes data_stream = 2;
  if (!this->_internal_data_stream().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data_stream(), target);
  }

  // string coinbase = 3;
  if (!this->_internal_coinbase().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_coinbase().data(), static_cast<int>(this->_internal_coinbase().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessStatelessBatchRequestV2.coinbase");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_coinbase(), target);
  }

  // bytes old_acc_input_hash = 4;
  if (!this->_internal_old_acc_input_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_old_acc_input_hash(), target);
  }

  // bytes l1_info_root = 5;
  if (!this->_internal_l1_info_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_l1_info_root(), target);
  }

  // uint64 timestamp_limit = 6;
  if (this->_internal_timestamp_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_timestamp_limit(), target);
  }

  // bytes forced_blockhash_l1 = 7;
  if (!this->_internal_forced_blockhash_l1().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_forced_blockhash_l1(), target);
  }

  // string context_id = 8;
  if (!this->_internal_context_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_context_id().data(), static_cast<int>(this->_internal_context_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessStatelessBatchRequestV2.context_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_context_id(), target);
  }

  // .executor.v1.TraceConfigV2 trace_config = 9;
  if (this->_internal_has_trace_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::trace_config(this),
        _Internal::trace_config(this).GetCachedSize(), target, stream);
  }

  // map<uint64, uint64> l1_info_tree_index_min_timestamp = 10;
  if (!this->_internal_l1_info_tree_index_min_timestamp().empty()) {
    using MapType = ::_pb::Map<uint64_t, uint64_t>;
    using WireHelper = ProcessStatelessBatchRequestV2_L1InfoTreeIndexMinTimestampEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_l1_info_tree_index_min_timestamp();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
      }
    }
  }

  // uint32 no_counters = 11;
  if (this->_internal_no_counters() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_no_counters(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.ProcessStatelessBatchRequestV2)
  return target;
}

size_t ProcessStatelessBatchRequestV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.ProcessStatelessBatchRequestV2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, uint64> l1_info_tree_index_min_timestamp = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_l1_info_tree_index_min_timestamp_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint64_t >::const_iterator
      it = this->_internal_l1_info_tree_index_min_timestamp().begin();
      it != this->_internal_l1_info_tree_index_min_timestamp().end(); ++it) {
    total_size += ProcessStatelessBatchRequestV2_L1InfoTreeIndexMinTimestampEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes witness = 1;
  if (!this->_internal_witness().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witness());
  }

  // bytes data_stream = 2;
  if (!this->_internal_data_stream().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data_stream());
  }

  // string coinbase = 3;
  if (!this->_internal_coinbase().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_coinbase());
  }

  // bytes old_acc_input_hash = 4;
  if (!this->_internal_old_acc_input_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_old_acc_input_hash());
  }

  // bytes l1_info_root = 5;
  if (!this->_internal_l1_info_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_l1_info_root());
  }

  // bytes forced_blockhash_l1 = 7;
  if (!this->_internal_forced_blockhash_l1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_forced_blockhash_l1());
  }

  // string context_id = 8;
  if (!this->_internal_context_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_context_id());
  }

  // .executor.v1.TraceConfigV2 trace_config = 9;
  if (this->_internal_has_trace_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trace_config_);
  }

  // uint64 timestamp_limit = 6;
  if (this->_internal_timestamp_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp_limit());
  }

  // uint32 no_counters = 11;
  if (this->_internal_no_counters() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_no_counters());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessStatelessBatchRequestV2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcessStatelessBatchRequestV2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessStatelessBatchRequestV2::GetClassData() const { return &_class_data_; }


void ProcessStatelessBatchRequestV2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcessStatelessBatchRequestV2*>(&to_msg);
  auto& from = static_cast<const ProcessStatelessBatchRequestV2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.ProcessStatelessBatchRequestV2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.l1_info_tree_index_min_timestamp_.MergeFrom(from._impl_.l1_info_tree_index_min_timestamp_);
  if (!from._internal_witness().empty()) {
    _this->_internal_set_witness(from._internal_witness());
  }
  if (!from._internal_data_stream().empty()) {
    _this->_internal_set_data_stream(from._internal_data_stream());
  }
  if (!from._internal_coinbase().empty()) {
    _this->_internal_set_coinbase(from._internal_coinbase());
  }
  if (!from._internal_old_acc_input_hash().empty()) {
    _this->_internal_set_old_acc_input_hash(from._internal_old_acc_input_hash());
  }
  if (!from._internal_l1_info_root().empty()) {
    _this->_internal_set_l1_info_root(from._internal_l1_info_root());
  }
  if (!from._internal_forced_blockhash_l1().empty()) {
    _this->_internal_set_forced_blockhash_l1(from._internal_forced_blockhash_l1());
  }
  if (!from._internal_context_id().empty()) {
    _this->_internal_set_context_id(from._internal_context_id());
  }
  if (from._internal_has_trace_config()) {
    _this->_internal_mutable_trace_config()->::executor::v1::TraceConfigV2::MergeFrom(
        from._internal_trace_config());
  }
  if (from._internal_timestamp_limit() != 0) {
    _this->_internal_set_timestamp_limit(from._internal_timestamp_limit());
  }
  if (from._internal_no_counters() != 0) {
    _this->_internal_set_no_counters(from._internal_no_counters());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessStatelessBatchRequestV2::CopyFrom(const ProcessStatelessBatchRequestV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.ProcessStatelessBatchRequestV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessStatelessBatchRequestV2::IsInitialized() const {
  return true;
}

void ProcessStatelessBatchRequestV2::InternalSwap(ProcessStatelessBatchRequestV2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.l1_info_tree_index_min_timestamp_.InternalSwap(&other->_impl_.l1_info_tree_index_min_timestamp_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.witness_, lhs_arena,
      &other->_impl_.witness_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_stream_, lhs_arena,
      &other->_impl_.data_stream_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.coinbase_, lhs_arena,
      &other->_impl_.coinbase_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.old_acc_input_hash_, lhs_arena,
      &other->_impl_.old_acc_input_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.l1_info_root_, lhs_arena,
      &other->_impl_.l1_info_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.forced_blockhash_l1_, lhs_arena,
      &other->_impl_.forced_blockhash_l1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.context_id_, lhs_arena,
      &other->_impl_.context_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessStatelessBatchRequestV2, _impl_.no_counters_)
      + sizeof(ProcessStatelessBatchRequestV2::_impl_.no_counters_)
      - PROTOBUF_FIELD_OFFSET(ProcessStatelessBatchRequestV2, _impl_.trace_config_)>(
          reinterpret_cast<char*>(&_impl_.trace_config_),
          reinterpret_cast<char*>(&other->_impl_.trace_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessStatelessBatchRequestV2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[25]);
}

// ===================================================================

class L1DataV2::_Internal {
 public:
};

L1DataV2::L1DataV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:executor.v1.L1DataV2)
}
L1DataV2::L1DataV2(const L1DataV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  L1DataV2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.smt_proof_){from._impl_.smt_proof_}
    , decltype(_impl_.global_exit_root_){}
    , decltype(_impl_.block_hash_l1_){}
    , decltype(_impl_.min_timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.global_exit_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.global_exit_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_global_exit_root().empty()) {
    _this->_impl_.global_exit_root_.Set(from._internal_global_exit_root(), 
      _this->GetArenaForAllocation());
  }
  _impl_.block_hash_l1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_hash_l1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_hash_l1().empty()) {
    _this->_impl_.block_hash_l1_.Set(from._internal_block_hash_l1(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.min_timestamp_ = from._impl_.min_timestamp_;
  // @@protoc_insertion_point(copy_constructor:executor.v1.L1DataV2)
}

inline void L1DataV2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.smt_proof_){arena}
    , decltype(_impl_.global_exit_root_){}
    , decltype(_impl_.block_hash_l1_){}
    , decltype(_impl_.min_timestamp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.global_exit_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.global_exit_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.block_hash_l1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_hash_l1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

L1DataV2::~L1DataV2() {
  // @@protoc_insertion_point(destructor:executor.v1.L1DataV2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void L1DataV2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.smt_proof_.~RepeatedPtrField();
  _impl_.global_exit_root_.Destroy();
  _impl_.block_hash_l1_.Destroy();
}

void L1DataV2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void L1DataV2::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.L1DataV2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.smt_proof_.Clear();
  _impl_.global_exit_root_.ClearToEmpty();
  _impl_.block_hash_l1_.ClearToEmpty();
  _impl_.min_timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* L1DataV2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes global_exit_root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_global_exit_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes block_hash_l1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_block_hash_l1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 min_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.min_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes smt_proof = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_smt_proof();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* L1DataV2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.L1DataV2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes global_exit_root = 1;
  if (!this->_internal_global_exit_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_global_exit_root(), target);
  }

  // bytes block_hash_l1 = 2;
  if (!this->_internal_block_hash_l1().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_block_hash_l1(), target);
  }

  // uint64 min_timestamp = 3;
  if (this->_internal_min_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_min_timestamp(), target);
  }

  // repeated bytes smt_proof = 4;
  for (int i = 0, n = this->_internal_smt_proof_size(); i < n; i++) {
    const auto& s = this->_internal_smt_proof(i);
    target = stream->WriteBytes(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.L1DataV2)
  return target;
}

size_t L1DataV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.L1DataV2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes smt_proof = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.smt_proof_.size());
  for (int i = 0, n = _impl_.smt_proof_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.smt_proof_.Get(i));
  }

  // bytes global_exit_root = 1;
  if (!this->_internal_global_exit_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_global_exit_root());
  }

  // bytes block_hash_l1 = 2;
  if (!this->_internal_block_hash_l1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_hash_l1());
  }

  // uint64 min_timestamp = 3;
  if (this->_internal_min_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_min_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData L1DataV2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    L1DataV2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*L1DataV2::GetClassData() const { return &_class_data_; }


void L1DataV2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<L1DataV2*>(&to_msg);
  auto& from = static_cast<const L1DataV2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.L1DataV2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.smt_proof_.MergeFrom(from._impl_.smt_proof_);
  if (!from._internal_global_exit_root().empty()) {
    _this->_internal_set_global_exit_root(from._internal_global_exit_root());
  }
  if (!from._internal_block_hash_l1().empty()) {
    _this->_internal_set_block_hash_l1(from._internal_block_hash_l1());
  }
  if (from._internal_min_timestamp() != 0) {
    _this->_internal_set_min_timestamp(from._internal_min_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void L1DataV2::CopyFrom(const L1DataV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.L1DataV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L1DataV2::IsInitialized() const {
  return true;
}

void L1DataV2::InternalSwap(L1DataV2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.smt_proof_.InternalSwap(&other->_impl_.smt_proof_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.global_exit_root_, lhs_arena,
      &other->_impl_.global_exit_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.block_hash_l1_, lhs_arena,
      &other->_impl_.block_hash_l1_, rhs_arena
  );
  swap(_impl_.min_timestamp_, other->_impl_.min_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata L1DataV2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[26]);
}

// ===================================================================

class DebugV2::_Internal {
 public:
};

DebugV2::DebugV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:executor.v1.DebugV2)
}
DebugV2::DebugV2(const DebugV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DebugV2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.new_state_root_){}
    , decltype(_impl_.new_acc_input_hash_){}
    , decltype(_impl_.new_local_exit_root_){}
    , decltype(_impl_.gas_limit_){}
    , decltype(_impl_.new_batch_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.new_state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_new_state_root().empty()) {
    _this->_impl_.new_state_root_.Set(from._internal_new_state_root(), 
      _this->GetArenaForAllocation());
  }
  _impl_.new_acc_input_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_acc_input_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_new_acc_input_hash().empty()) {
    _this->_impl_.new_acc_input_hash_.Set(from._internal_new_acc_input_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.new_local_exit_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_local_exit_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_new_local_exit_root().empty()) {
    _this->_impl_.new_local_exit_root_.Set(from._internal_new_local_exit_root(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.gas_limit_, &from._impl_.gas_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.new_batch_num_) -
    reinterpret_cast<char*>(&_impl_.gas_limit_)) + sizeof(_impl_.new_batch_num_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.DebugV2)
}

inline void DebugV2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.new_state_root_){}
    , decltype(_impl_.new_acc_input_hash_){}
    , decltype(_impl_.new_local_exit_root_){}
    , decltype(_impl_.gas_limit_){uint64_t{0u}}
    , decltype(_impl_.new_batch_num_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.new_state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.new_acc_input_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_acc_input_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.new_local_exit_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_local_exit_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DebugV2::~DebugV2() {
  // @@protoc_insertion_point(destructor:executor.v1.DebugV2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebugV2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.new_state_root_.Destroy();
  _impl_.new_acc_input_hash_.Destroy();
  _impl_.new_local_exit_root_.Destroy();
}

void DebugV2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DebugV2::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.DebugV2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.new_state_root_.ClearToEmpty();
  _impl_.new_acc_input_hash_.ClearToEmpty();
  _impl_.new_local_exit_root_.ClearToEmpty();
  ::memset(&_impl_.gas_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.new_batch_num_) -
      reinterpret_cast<char*>(&_impl_.gas_limit_)) + sizeof(_impl_.new_batch_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugV2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 gas_limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.gas_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes new_state_root = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_new_state_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes new_acc_input_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_new_acc_input_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes new_local_exit_root = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_new_local_exit_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 new_batch_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.new_batch_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DebugV2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.DebugV2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 gas_limit = 1;
  if (this->_internal_gas_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_gas_limit(), target);
  }

  // bytes new_state_root = 2;
  if (!this->_internal_new_state_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_new_state_root(), target);
  }

  // bytes new_acc_input_hash = 3;
  if (!this->_internal_new_acc_input_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_new_acc_input_hash(), target);
  }

  // bytes new_local_exit_root = 4;
  if (!this->_internal_new_local_exit_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_new_local_exit_root(), target);
  }

  // uint64 new_batch_num = 5;
  if (this->_internal_new_batch_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_new_batch_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.DebugV2)
  return target;
}

size_t DebugV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.DebugV2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes new_state_root = 2;
  if (!this->_internal_new_state_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_new_state_root());
  }

  // bytes new_acc_input_hash = 3;
  if (!this->_internal_new_acc_input_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_new_acc_input_hash());
  }

  // bytes new_local_exit_root = 4;
  if (!this->_internal_new_local_exit_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_new_local_exit_root());
  }

  // uint64 gas_limit = 1;
  if (this->_internal_gas_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gas_limit());
  }

  // uint64 new_batch_num = 5;
  if (this->_internal_new_batch_num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_new_batch_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DebugV2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DebugV2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DebugV2::GetClassData() const { return &_class_data_; }


void DebugV2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DebugV2*>(&to_msg);
  auto& from = static_cast<const DebugV2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.DebugV2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_new_state_root().empty()) {
    _this->_internal_set_new_state_root(from._internal_new_state_root());
  }
  if (!from._internal_new_acc_input_hash().empty()) {
    _this->_internal_set_new_acc_input_hash(from._internal_new_acc_input_hash());
  }
  if (!from._internal_new_local_exit_root().empty()) {
    _this->_internal_set_new_local_exit_root(from._internal_new_local_exit_root());
  }
  if (from._internal_gas_limit() != 0) {
    _this->_internal_set_gas_limit(from._internal_gas_limit());
  }
  if (from._internal_new_batch_num() != 0) {
    _this->_internal_set_new_batch_num(from._internal_new_batch_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DebugV2::CopyFrom(const DebugV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.DebugV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugV2::IsInitialized() const {
  return true;
}

void DebugV2::InternalSwap(DebugV2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.new_state_root_, lhs_arena,
      &other->_impl_.new_state_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.new_acc_input_hash_, lhs_arena,
      &other->_impl_.new_acc_input_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.new_local_exit_root_, lhs_arena,
      &other->_impl_.new_local_exit_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DebugV2, _impl_.new_batch_num_)
      + sizeof(DebugV2::_impl_.new_batch_num_)
      - PROTOBUF_FIELD_OFFSET(DebugV2, _impl_.gas_limit_)>(
          reinterpret_cast<char*>(&_impl_.gas_limit_),
          reinterpret_cast<char*>(&other->_impl_.gas_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugV2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[27]);
}

// ===================================================================

ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse::ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse() {}
ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse::ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse::MergeFrom(const ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[28]);
}

// ===================================================================

class ProcessBatchResponseV2::_Internal {
 public:
  static const ::executor::v1::ResponseDebug& debug(const ProcessBatchResponseV2* msg);
};

const ::executor::v1::ResponseDebug&
ProcessBatchResponseV2::_Internal::debug(const ProcessBatchResponseV2* msg) {
  return *msg->_impl_.debug_;
}
ProcessBatchResponseV2::ProcessBatchResponseV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &ProcessBatchResponseV2::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:executor.v1.ProcessBatchResponseV2)
}
ProcessBatchResponseV2::ProcessBatchResponseV2(const ProcessBatchResponseV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcessBatchResponseV2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.block_responses_){from._impl_.block_responses_}
    , /*decltype(_impl_.read_write_addresses_)*/{}
    , decltype(_impl_.smt_keys_){from._impl_.smt_keys_}
    , decltype(_impl_.program_keys_){from._impl_.program_keys_}
    , decltype(_impl_.new_state_root_){}
    , decltype(_impl_.new_acc_input_hash_){}
    , decltype(_impl_.new_local_exit_root_){}
    , decltype(_impl_.prover_id_){}
    , decltype(_impl_.old_state_root_){}
    , decltype(_impl_.debug_){nullptr}
    , decltype(_impl_.new_batch_num_){}
    , decltype(_impl_.cnt_keccak_hashes_){}
    , decltype(_impl_.cnt_poseidon_hashes_){}
    , decltype(_impl_.cnt_poseidon_paddings_){}
    , decltype(_impl_.cnt_mem_aligns_){}
    , decltype(_impl_.cnt_arithmetics_){}
    , decltype(_impl_.cnt_binaries_){}
    , decltype(_impl_.cnt_steps_){}
    , decltype(_impl_.cnt_sha256_hashes_){}
    , decltype(_impl_.flush_id_){}
    , decltype(_impl_.stored_flush_id_){}
    , decltype(_impl_.error_){}
    , decltype(_impl_.invalid_batch_){}
    , decltype(_impl_.gas_used_){}
    , decltype(_impl_.fork_id_){}
    , decltype(_impl_.error_rom_){}
    , decltype(_impl_.cnt_reserve_keccak_hashes_){}
    , decltype(_impl_.cnt_reserve_poseidon_hashes_){}
    , decltype(_impl_.cnt_reserve_poseidon_paddings_){}
    , decltype(_impl_.cnt_reserve_mem_aligns_){}
    , decltype(_impl_.cnt_reserve_arithmetics_){}
    , decltype(_impl_.cnt_reserve_binaries_){}
    , decltype(_impl_.cnt_reserve_steps_){}
    , decltype(_impl_.cnt_reserve_sha256_hashes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.read_write_addresses_.MergeFrom(from._impl_.read_write_addresses_);
  _impl_.new_state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_new_state_root().empty()) {
    _this->_impl_.new_state_root_.Set(from._internal_new_state_root(), 
      _this->GetArenaForAllocation());
  }
  _impl_.new_acc_input_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_acc_input_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_new_acc_input_hash().empty()) {
    _this->_impl_.new_acc_input_hash_.Set(from._internal_new_acc_input_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.new_local_exit_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_local_exit_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_new_local_exit_root().empty()) {
    _this->_impl_.new_local_exit_root_.Set(from._internal_new_local_exit_root(), 
      _this->GetArenaForAllocation());
  }
  _impl_.prover_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prover_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prover_id().empty()) {
    _this->_impl_.prover_id_.Set(from._internal_prover_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.old_state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_old_state_root().empty()) {
    _this->_impl_.old_state_root_.Set(from._internal_old_state_root(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_debug()) {
    _this->_impl_.debug_ = new ::executor::v1::ResponseDebug(*from._impl_.debug_);
  }
  ::memcpy(&_impl_.new_batch_num_, &from._impl_.new_batch_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cnt_reserve_sha256_hashes_) -
    reinterpret_cast<char*>(&_impl_.new_batch_num_)) + sizeof(_impl_.cnt_reserve_sha256_hashes_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.ProcessBatchResponseV2)
}

inline void ProcessBatchResponseV2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.block_responses_){arena}
    , /*decltype(_impl_.read_write_addresses_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.smt_keys_){arena}
    , decltype(_impl_.program_keys_){arena}
    , decltype(_impl_.new_state_root_){}
    , decltype(_impl_.new_acc_input_hash_){}
    , decltype(_impl_.new_local_exit_root_){}
    , decltype(_impl_.prover_id_){}
    , decltype(_impl_.old_state_root_){}
    , decltype(_impl_.debug_){nullptr}
    , decltype(_impl_.new_batch_num_){uint64_t{0u}}
    , decltype(_impl_.cnt_keccak_hashes_){0u}
    , decltype(_impl_.cnt_poseidon_hashes_){0u}
    , decltype(_impl_.cnt_poseidon_paddings_){0u}
    , decltype(_impl_.cnt_mem_aligns_){0u}
    , decltype(_impl_.cnt_arithmetics_){0u}
    , decltype(_impl_.cnt_binaries_){0u}
    , decltype(_impl_.cnt_steps_){0u}
    , decltype(_impl_.cnt_sha256_hashes_){0u}
    , decltype(_impl_.flush_id_){uint64_t{0u}}
    , decltype(_impl_.stored_flush_id_){uint64_t{0u}}
    , decltype(_impl_.error_){0}
    , decltype(_impl_.invalid_batch_){0u}
    , decltype(_impl_.gas_used_){uint64_t{0u}}
    , decltype(_impl_.fork_id_){uint64_t{0u}}
    , decltype(_impl_.error_rom_){0}
    , decltype(_impl_.cnt_reserve_keccak_hashes_){0u}
    , decltype(_impl_.cnt_reserve_poseidon_hashes_){0u}
    , decltype(_impl_.cnt_reserve_poseidon_paddings_){0u}
    , decltype(_impl_.cnt_reserve_mem_aligns_){0u}
    , decltype(_impl_.cnt_reserve_arithmetics_){0u}
    , decltype(_impl_.cnt_reserve_binaries_){0u}
    , decltype(_impl_.cnt_reserve_steps_){0u}
    , decltype(_impl_.cnt_reserve_sha256_hashes_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.new_state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.new_acc_input_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_acc_input_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.new_local_exit_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_local_exit_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.prover_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prover_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.old_state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProcessBatchResponseV2::~ProcessBatchResponseV2() {
  // @@protoc_insertion_point(destructor:executor.v1.ProcessBatchResponseV2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void ProcessBatchResponseV2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.block_responses_.~RepeatedPtrField();
  _impl_.read_write_addresses_.Destruct();
  _impl_.read_write_addresses_.~MapField();
  _impl_.smt_keys_.~RepeatedPtrField();
  _impl_.program_keys_.~RepeatedPtrField();
  _impl_.new_state_root_.Destroy();
  _impl_.new_acc_input_hash_.Destroy();
  _impl_.new_local_exit_root_.Destroy();
  _impl_.prover_id_.Destroy();
  _impl_.old_state_root_.Destroy();
  if (this != internal_default_instance()) delete _impl_.debug_;
}

void ProcessBatchResponseV2::ArenaDtor(void* object) {
  ProcessBatchResponseV2* _this = reinterpret_cast< ProcessBatchResponseV2* >(object);
  _this->_impl_.read_write_addresses_.Destruct();
}
void ProcessBatchResponseV2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessBatchResponseV2::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.ProcessBatchResponseV2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.block_responses_.Clear();
  _impl_.read_write_addresses_.Clear();
  _impl_.smt_keys_.Clear();
  _impl_.program_keys_.Clear();
  _impl_.new_state_root_.ClearToEmpty();
  _impl_.new_acc_input_hash_.ClearToEmpty();
  _impl_.new_local_exit_root_.ClearToEmpty();
  _impl_.prover_id_.ClearToEmpty();
  _impl_.old_state_root_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.debug_ != nullptr) {
    delete _impl_.debug_;
  }
  _impl_.debug_ = nullptr;
  ::memset(&_impl_.new_batch_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cnt_reserve_sha256_hashes_) -
      reinterpret_cast<char*>(&_impl_.new_batch_num_)) + sizeof(_impl_.cnt_reserve_sha256_hashes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessBatchResponseV2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes new_state_root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_new_state_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes new_acc_input_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_new_acc_input_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes new_local_exit_root = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_new_local_exit_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 new_batch_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.new_batch_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cnt_keccak_hashes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.cnt_keccak_hashes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cnt_poseidon_hashes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.cnt_poseidon_hashes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cnt_poseidon_paddings = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.cnt_poseidon_paddings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cnt_mem_aligns = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.cnt_mem_aligns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cnt_arithmetics = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.cnt_arithmetics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cnt_binaries = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.cnt_binaries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cnt_steps = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.cnt_steps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cnt_sha256_hashes = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.cnt_sha256_hashes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .executor.v1.ProcessBlockResponseV2 block_responses = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_block_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .executor.v1.ExecutorError error = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::executor::v1::ExecutorError>(val));
        } else
          goto handle_unusual;
        continue;
      // map<string, .executor.v1.InfoReadWriteV2> read_write_addresses = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.read_write_addresses_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 flush_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.flush_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 stored_flush_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.stored_flush_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string prover_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_prover_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.ProcessBatchResponseV2.prover_id"));
        } else
          goto handle_unusual;
        continue;
      // uint64 gas_used = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.gas_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes smt_keys = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_smt_keys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes program_keys = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_program_keys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 fork_id = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.fork_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 invalid_batch = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.invalid_batch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .executor.v1.RomError error_rom = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error_rom(static_cast<::executor::v1::RomError>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 cnt_reserve_keccak_hashes = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.cnt_reserve_keccak_hashes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cnt_reserve_poseidon_hashes = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.cnt_reserve_poseidon_hashes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cnt_reserve_poseidon_paddings = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.cnt_reserve_poseidon_paddings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cnt_reserve_mem_aligns = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.cnt_reserve_mem_aligns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cnt_reserve_arithmetics = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.cnt_reserve_arithmetics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cnt_reserve_binaries = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.cnt_reserve_binaries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cnt_reserve_steps = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.cnt_reserve_steps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cnt_reserve_sha256_hashes = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.cnt_reserve_sha256_hashes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes old_state_root = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_old_state_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .executor.v1.ResponseDebug debug = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_debug(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessBatchResponseV2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.ProcessBatchResponseV2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes new_state_root = 1;
  if (!this->_internal_new_state_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_new_state_root(), target);
  }

  // bytes new_acc_input_hash = 2;
  if (!this->_internal_new_acc_input_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_new_acc_input_hash(), target);
  }

  // bytes new_local_exit_root = 3;
  if (!this->_internal_new_local_exit_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_new_local_exit_root(), target);
  }

  // uint64 new_batch_num = 4;
  if (this->_internal_new_batch_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_new_batch_num(), target);
  }

  // uint32 cnt_keccak_hashes = 5;
  if (this->_internal_cnt_keccak_hashes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_cnt_keccak_hashes(), target);
  }

  // uint32 cnt_poseidon_hashes = 6;
  if (this->_internal_cnt_poseidon_hashes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_cnt_poseidon_hashes(), target);
  }

  // uint32 cnt_poseidon_paddings = 7;
  if (this->_internal_cnt_poseidon_paddings() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_cnt_poseidon_paddings(), target);
  }

  // uint32 cnt_mem_aligns = 8;
  if (this->_internal_cnt_mem_aligns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_cnt_mem_aligns(), target);
  }

  // uint32 cnt_arithmetics = 9;
  if (this->_internal_cnt_arithmetics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_cnt_arithmetics(), target);
  }

  // uint32 cnt_binaries = 10;
  if (this->_internal_cnt_binaries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_cnt_binaries(), target);
  }

  // uint32 cnt_steps = 11;
  if (this->_internal_cnt_steps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_cnt_steps(), target);
  }

  // uint32 cnt_sha256_hashes = 12;
  if (this->_internal_cnt_sha256_hashes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_cnt_sha256_hashes(), target);
  }

  // repeated .executor.v1.ProcessBlockResponseV2 block_responses = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_block_responses_size()); i < n; i++) {
    const auto& repfield = this->_internal_block_responses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .executor.v1.ExecutorError error = 14;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_error(), target);
  }

  // map<string, .executor.v1.InfoReadWriteV2> read_write_addresses = 15;
  if (!this->_internal_read_write_addresses().empty()) {
    using MapType = ::_pb::Map<std::string, ::executor::v1::InfoReadWriteV2>;
    using WireHelper = ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_read_write_addresses();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "executor.v1.ProcessBatchResponseV2.ReadWriteAddressesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(15, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(15, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // uint64 flush_id = 16;
  if (this->_internal_flush_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(16, this->_internal_flush_id(), target);
  }

  // uint64 stored_flush_id = 17;
  if (this->_internal_stored_flush_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(17, this->_internal_stored_flush_id(), target);
  }

  // string prover_id = 18;
  if (!this->_internal_prover_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prover_id().data(), static_cast<int>(this->_internal_prover_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessBatchResponseV2.prover_id");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_prover_id(), target);
  }

  // uint64 gas_used = 19;
  if (this->_internal_gas_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(19, this->_internal_gas_used(), target);
  }

  // repeated bytes smt_keys = 20;
  for (int i = 0, n = this->_internal_smt_keys_size(); i < n; i++) {
    const auto& s = this->_internal_smt_keys(i);
    target = stream->WriteBytes(20, s, target);
  }

  // repeated bytes program_keys = 21;
  for (int i = 0, n = this->_internal_program_keys_size(); i < n; i++) {
    const auto& s = this->_internal_program_keys(i);
    target = stream->WriteBytes(21, s, target);
  }

  // uint64 fork_id = 22;
  if (this->_internal_fork_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(22, this->_internal_fork_id(), target);
  }

  // uint32 invalid_batch = 23;
  if (this->_internal_invalid_batch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_invalid_batch(), target);
  }

  // .executor.v1.RomError error_rom = 24;
  if (this->_internal_error_rom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      24, this->_internal_error_rom(), target);
  }

  // uint32 cnt_reserve_keccak_hashes = 25;
  if (this->_internal_cnt_reserve_keccak_hashes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_cnt_reserve_keccak_hashes(), target);
  }

  // uint32 cnt_reserve_poseidon_hashes = 26;
  if (this->_internal_cnt_reserve_poseidon_hashes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(26, this->_internal_cnt_reserve_poseidon_hashes(), target);
  }

  // uint32 cnt_reserve_poseidon_paddings = 27;
  if (this->_internal_cnt_reserve_poseidon_paddings() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(27, this->_internal_cnt_reserve_poseidon_paddings(), target);
  }

  // uint32 cnt_reserve_mem_aligns = 28;
  if (this->_internal_cnt_reserve_mem_aligns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(28, this->_internal_cnt_reserve_mem_aligns(), target);
  }

  // uint32 cnt_reserve_arithmetics = 29;
  if (this->_internal_cnt_reserve_arithmetics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(29, this->_internal_cnt_reserve_arithmetics(), target);
  }

  // uint32 cnt_reserve_binaries = 30;
  if (this->_internal_cnt_reserve_binaries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(30, this->_internal_cnt_reserve_binaries(), target);
  }

  // uint32 cnt_reserve_steps = 31;
  if (this->_internal_cnt_reserve_steps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(31, this->_internal_cnt_reserve_steps(), target);
  }

  // uint32 cnt_reserve_sha256_hashes = 32;
  if (this->_internal_cnt_reserve_sha256_hashes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(32, this->_internal_cnt_reserve_sha256_hashes(), target);
  }

  // bytes old_state_root = 33;
  if (!this->_internal_old_state_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        33, this->_internal_old_state_root(), target);
  }

  // .executor.v1.ResponseDebug debug = 34;
  if (this->_internal_has_debug()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, _Internal::debug(this),
        _Internal::debug(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.ProcessBatchResponseV2)
  return target;
}

size_t ProcessBatchResponseV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.ProcessBatchResponseV2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .executor.v1.ProcessBlockResponseV2 block_responses = 13;
  total_size += 1UL * this->_internal_block_responses_size();
  for (const auto& msg : this->_impl_.block_responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .executor.v1.InfoReadWriteV2> read_write_addresses = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_read_write_addresses_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::executor::v1::InfoReadWriteV2 >::const_iterator
      it = this->_internal_read_write_addresses().begin();
      it != this->_internal_read_write_addresses().end(); ++it) {
    total_size += ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated bytes smt_keys = 20;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.smt_keys_.size());
  for (int i = 0, n = _impl_.smt_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.smt_keys_.Get(i));
  }

  // repeated bytes program_keys = 21;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.program_keys_.size());
  for (int i = 0, n = _impl_.program_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.program_keys_.Get(i));
  }

  // bytes new_state_root = 1;
  if (!this->_internal_new_state_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_new_state_root());
  }

  // bytes new_acc_input_hash = 2;
  if (!this->_internal_new_acc_input_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_new_acc_input_hash());
  }

  // bytes new_local_exit_root = 3;
  if (!this->_internal_new_local_exit_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_new_local_exit_root());
  }

  // string prover_id = 18;
  if (!this->_internal_prover_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prover_id());
  }

  // bytes old_state_root = 33;
  if (!this->_internal_old_state_root().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_old_state_root());
  }

  // .executor.v1.ResponseDebug debug = 34;
  if (this->_internal_has_debug()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.debug_);
  }

  // uint64 new_batch_num = 4;
  if (this->_internal_new_batch_num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_new_batch_num());
  }

  // uint32 cnt_keccak_hashes = 5;
  if (this->_internal_cnt_keccak_hashes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cnt_keccak_hashes());
  }

  // uint32 cnt_poseidon_hashes = 6;
  if (this->_internal_cnt_poseidon_hashes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cnt_poseidon_hashes());
  }

  // uint32 cnt_poseidon_paddings = 7;
  if (this->_internal_cnt_poseidon_paddings() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cnt_poseidon_paddings());
  }

  // uint32 cnt_mem_aligns = 8;
  if (this->_internal_cnt_mem_aligns() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cnt_mem_aligns());
  }

  // uint32 cnt_arithmetics = 9;
  if (this->_internal_cnt_arithmetics() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cnt_arithmetics());
  }

  // uint32 cnt_binaries = 10;
  if (this->_internal_cnt_binaries() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cnt_binaries());
  }

  // uint32 cnt_steps = 11;
  if (this->_internal_cnt_steps() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cnt_steps());
  }

  // uint32 cnt_sha256_hashes = 12;
  if (this->_internal_cnt_sha256_hashes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cnt_sha256_hashes());
  }

  // uint64 flush_id = 16;
  if (this->_internal_flush_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_flush_id());
  }

  // uint64 stored_flush_id = 17;
  if (this->_internal_stored_flush_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_stored_flush_id());
  }

  // .executor.v1.ExecutorError error = 14;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
  }

  // uint32 invalid_batch = 23;
  if (this->_internal_invalid_batch() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_invalid_batch());
  }

  // uint64 gas_used = 19;
  if (this->_internal_gas_used() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_gas_used());
  }

  // uint64 fork_id = 22;
  if (this->_internal_fork_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_fork_id());
  }

  // .executor.v1.RomError error_rom = 24;
  if (this->_internal_error_rom() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_error_rom());
  }

  // uint32 cnt_reserve_keccak_hashes = 25;
  if (this->_internal_cnt_reserve_keccak_hashes() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_cnt_reserve_keccak_hashes());
  }

  // uint32 cnt_reserve_poseidon_hashes = 26;
  if (this->_internal_cnt_reserve_poseidon_hashes() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_cnt_reserve_poseidon_hashes());
  }

  // uint32 cnt_reserve_poseidon_paddings = 27;
  if (this->_internal_cnt_reserve_poseidon_paddings() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_cnt_reserve_poseidon_paddings());
  }

  // uint32 cnt_reserve_mem_aligns = 28;
  if (this->_internal_cnt_reserve_mem_aligns() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_cnt_reserve_mem_aligns());
  }

  // uint32 cnt_reserve_arithmetics = 29;
  if (this->_internal_cnt_reserve_arithmetics() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_cnt_reserve_arithmetics());
  }

  // uint32 cnt_reserve_binaries = 30;
  if (this->_internal_cnt_reserve_binaries() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_cnt_reserve_binaries());
  }

  // uint32 cnt_reserve_steps = 31;
  if (this->_internal_cnt_reserve_steps() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_cnt_reserve_steps());
  }

  // uint32 cnt_reserve_sha256_hashes = 32;
  if (this->_internal_cnt_reserve_sha256_hashes() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_cnt_reserve_sha256_hashes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessBatchResponseV2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcessBatchResponseV2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessBatchResponseV2::GetClassData() const { return &_class_data_; }


void ProcessBatchResponseV2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcessBatchResponseV2*>(&to_msg);
  auto& from = static_cast<const ProcessBatchResponseV2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.ProcessBatchResponseV2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.block_responses_.MergeFrom(from._impl_.block_responses_);
  _this->_impl_.read_write_addresses_.MergeFrom(from._impl_.read_write_addresses_);
  _this->_impl_.smt_keys_.MergeFrom(from._impl_.smt_keys_);
  _this->_impl_.program_keys_.MergeFrom(from._impl_.program_keys_);
  if (!from._internal_new_state_root().empty()) {
    _this->_internal_set_new_state_root(from._internal_new_state_root());
  }
  if (!from._internal_new_acc_input_hash().empty()) {
    _this->_internal_set_new_acc_input_hash(from._internal_new_acc_input_hash());
  }
  if (!from._internal_new_local_exit_root().empty()) {
    _this->_internal_set_new_local_exit_root(from._internal_new_local_exit_root());
  }
  if (!from._internal_prover_id().empty()) {
    _this->_internal_set_prover_id(from._internal_prover_id());
  }
  if (!from._internal_old_state_root().empty()) {
    _this->_internal_set_old_state_root(from._internal_old_state_root());
  }
  if (from._internal_has_debug()) {
    _this->_internal_mutable_debug()->::executor::v1::ResponseDebug::MergeFrom(
        from._internal_debug());
  }
  if (from._internal_new_batch_num() != 0) {
    _this->_internal_set_new_batch_num(from._internal_new_batch_num());
  }
  if (from._internal_cnt_keccak_hashes() != 0) {
    _this->_internal_set_cnt_keccak_hashes(from._internal_cnt_keccak_hashes());
  }
  if (from._internal_cnt_poseidon_hashes() != 0) {
    _this->_internal_set_cnt_poseidon_hashes(from._internal_cnt_poseidon_hashes());
  }
  if (from._internal_cnt_poseidon_paddings() != 0) {
    _this->_internal_set_cnt_poseidon_paddings(from._internal_cnt_poseidon_paddings());
  }
  if (from._internal_cnt_mem_aligns() != 0) {
    _this->_internal_set_cnt_mem_aligns(from._internal_cnt_mem_aligns());
  }
  if (from._internal_cnt_arithmetics() != 0) {
    _this->_internal_set_cnt_arithmetics(from._internal_cnt_arithmetics());
  }
  if (from._internal_cnt_binaries() != 0) {
    _this->_internal_set_cnt_binaries(from._internal_cnt_binaries());
  }
  if (from._internal_cnt_steps() != 0) {
    _this->_internal_set_cnt_steps(from._internal_cnt_steps());
  }
  if (from._internal_cnt_sha256_hashes() != 0) {
    _this->_internal_set_cnt_sha256_hashes(from._internal_cnt_sha256_hashes());
  }
  if (from._internal_flush_id() != 0) {
    _this->_internal_set_flush_id(from._internal_flush_id());
  }
  if (from._internal_stored_flush_id() != 0) {
    _this->_internal_set_stored_flush_id(from._internal_stored_flush_id());
  }
  if (from._internal_error() != 0) {
    _this->_internal_set_error(from._internal_error());
  }
  if (from._internal_invalid_batch() != 0) {
    _this->_internal_set_invalid_batch(from._internal_invalid_batch());
  }
  if (from._internal_gas_used() != 0) {
    _this->_internal_set_gas_used(from._internal_gas_used());
  }
  if (from._internal_fork_id() != 0) {
    _this->_internal_set_fork_id(from._internal_fork_id());
  }
  if (from._internal_error_rom() != 0) {
    _this->_internal_set_error_rom(from._internal_error_rom());
  }
  if (from._internal_cnt_reserve_keccak_hashes() != 0) {
    _this->_internal_set_cnt_reserve_keccak_hashes(from._internal_cnt_reserve_keccak_hashes());
  }
  if (from._internal_cnt_reserve_poseidon_hashes() != 0) {
    _this->_internal_set_cnt_reserve_poseidon_hashes(from._internal_cnt_reserve_poseidon_hashes());
  }
  if (from._internal_cnt_reserve_poseidon_paddings() != 0) {
    _this->_internal_set_cnt_reserve_poseidon_paddings(from._internal_cnt_reserve_poseidon_paddings());
  }
  if (from._internal_cnt_reserve_mem_aligns() != 0) {
    _this->_internal_set_cnt_reserve_mem_aligns(from._internal_cnt_reserve_mem_aligns());
  }
  if (from._internal_cnt_reserve_arithmetics() != 0) {
    _this->_internal_set_cnt_reserve_arithmetics(from._internal_cnt_reserve_arithmetics());
  }
  if (from._internal_cnt_reserve_binaries() != 0) {
    _this->_internal_set_cnt_reserve_binaries(from._internal_cnt_reserve_binaries());
  }
  if (from._internal_cnt_reserve_steps() != 0) {
    _this->_internal_set_cnt_reserve_steps(from._internal_cnt_reserve_steps());
  }
  if (from._internal_cnt_reserve_sha256_hashes() != 0) {
    _this->_internal_set_cnt_reserve_sha256_hashes(from._internal_cnt_reserve_sha256_hashes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessBatchResponseV2::CopyFrom(const ProcessBatchResponseV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.ProcessBatchResponseV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessBatchResponseV2::IsInitialized() const {
  return true;
}

void ProcessBatchResponseV2::InternalSwap(ProcessBatchResponseV2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.block_responses_.InternalSwap(&other->_impl_.block_responses_);
  _impl_.read_write_addresses_.InternalSwap(&other->_impl_.read_write_addresses_);
  _impl_.smt_keys_.InternalSwap(&other->_impl_.smt_keys_);
  _impl_.program_keys_.InternalSwap(&other->_impl_.program_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.new_state_root_, lhs_arena,
      &other->_impl_.new_state_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.new_acc_input_hash_, lhs_arena,
      &other->_impl_.new_acc_input_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.new_local_exit_root_, lhs_arena,
      &other->_impl_.new_local_exit_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prover_id_, lhs_arena,
      &other->_impl_.prover_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.old_state_root_, lhs_arena,
      &other->_impl_.old_state_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessBatchResponseV2, _impl_.cnt_reserve_sha256_hashes_)
      + sizeof(ProcessBatchResponseV2::_impl_.cnt_reserve_sha256_hashes_)
      - PROTOBUF_FIELD_OFFSET(ProcessBatchResponseV2, _impl_.debug_)>(
          reinterpret_cast<char*>(&_impl_.debug_),
          reinterpret_cast<char*>(&other->_impl_.debug_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessBatchResponseV2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[29]);
}

// ===================================================================

class ResponseDebug::_Internal {
 public:
};

ResponseDebug::ResponseDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:executor.v1.ResponseDebug)
}
ResponseDebug::ResponseDebug(const ResponseDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseDebug* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_log_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_log_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_log().empty()) {
    _this->_impl_.error_log_.Set(from._internal_error_log(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:executor.v1.ResponseDebug)
}

inline void ResponseDebug::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_log_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_log_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResponseDebug::~ResponseDebug() {
  // @@protoc_insertion_point(destructor:executor.v1.ResponseDebug)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseDebug::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_log_.Destroy();
}

void ResponseDebug::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.ResponseDebug)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_log_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseDebug::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string error_log = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_error_log();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.ResponseDebug.error_log"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseDebug::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.ResponseDebug)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string error_log = 1;
  if (!this->_internal_error_log().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_log().data(), static_cast<int>(this->_internal_error_log().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ResponseDebug.error_log");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_error_log(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.ResponseDebug)
  return target;
}

size_t ResponseDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.ResponseDebug)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_log = 1;
  if (!this->_internal_error_log().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_log());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseDebug::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseDebug::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseDebug::GetClassData() const { return &_class_data_; }


void ResponseDebug::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseDebug*>(&to_msg);
  auto& from = static_cast<const ResponseDebug&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.ResponseDebug)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_log().empty()) {
    _this->_internal_set_error_log(from._internal_error_log());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseDebug::CopyFrom(const ResponseDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.ResponseDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseDebug::IsInitialized() const {
  return true;
}

void ResponseDebug::InternalSwap(ResponseDebug* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_log_, lhs_arena,
      &other->_impl_.error_log_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseDebug::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[30]);
}

// ===================================================================

class TraceConfigV2::_Internal {
 public:
};

TraceConfigV2::TraceConfigV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:executor.v1.TraceConfigV2)
}
TraceConfigV2::TraceConfigV2(const TraceConfigV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TraceConfigV2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_hash_to_generate_full_trace_){}
    , decltype(_impl_.disable_storage_){}
    , decltype(_impl_.disable_stack_){}
    , decltype(_impl_.enable_memory_){}
    , decltype(_impl_.enable_return_data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tx_hash_to_generate_full_trace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_hash_to_generate_full_trace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx_hash_to_generate_full_trace().empty()) {
    _this->_impl_.tx_hash_to_generate_full_trace_.Set(from._internal_tx_hash_to_generate_full_trace(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.disable_storage_, &from._impl_.disable_storage_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.enable_return_data_) -
    reinterpret_cast<char*>(&_impl_.disable_storage_)) + sizeof(_impl_.enable_return_data_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.TraceConfigV2)
}

inline void TraceConfigV2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_hash_to_generate_full_trace_){}
    , decltype(_impl_.disable_storage_){0u}
    , decltype(_impl_.disable_stack_){0u}
    , decltype(_impl_.enable_memory_){0u}
    , decltype(_impl_.enable_return_data_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tx_hash_to_generate_full_trace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_hash_to_generate_full_trace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TraceConfigV2::~TraceConfigV2() {
  // @@protoc_insertion_point(destructor:executor.v1.TraceConfigV2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TraceConfigV2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tx_hash_to_generate_full_trace_.Destroy();
}

void TraceConfigV2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TraceConfigV2::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.TraceConfigV2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tx_hash_to_generate_full_trace_.ClearToEmpty();
  ::memset(&_impl_.disable_storage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.enable_return_data_) -
      reinterpret_cast<char*>(&_impl_.disable_storage_)) + sizeof(_impl_.enable_return_data_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceConfigV2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 disable_storage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.disable_storage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 disable_stack = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.disable_stack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 enable_memory = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.enable_memory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 enable_return_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.enable_return_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes tx_hash_to_generate_full_trace = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_tx_hash_to_generate_full_trace();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TraceConfigV2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.TraceConfigV2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 disable_storage = 1;
  if (this->_internal_disable_storage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_disable_storage(), target);
  }

  // uint32 disable_stack = 2;
  if (this->_internal_disable_stack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_disable_stack(), target);
  }

  // uint32 enable_memory = 3;
  if (this->_internal_enable_memory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_enable_memory(), target);
  }

  // uint32 enable_return_data = 4;
  if (this->_internal_enable_return_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_enable_return_data(), target);
  }

  // bytes tx_hash_to_generate_full_trace = 5;
  if (!this->_internal_tx_hash_to_generate_full_trace().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_tx_hash_to_generate_full_trace(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.TraceConfigV2)
  return target;
}

size_t TraceConfigV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.TraceConfigV2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes tx_hash_to_generate_full_trace = 5;
  if (!this->_internal_tx_hash_to_generate_full_trace().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx_hash_to_generate_full_trace());
  }

  // uint32 disable_storage = 1;
  if (this->_internal_disable_storage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_disable_storage());
  }

  // uint32 disable_stack = 2;
  if (this->_internal_disable_stack() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_disable_stack());
  }

  // uint32 enable_memory = 3;
  if (this->_internal_enable_memory() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_enable_memory());
  }

  // uint32 enable_return_data = 4;
  if (this->_internal_enable_return_data() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_enable_return_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TraceConfigV2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TraceConfigV2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TraceConfigV2::GetClassData() const { return &_class_data_; }


void TraceConfigV2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TraceConfigV2*>(&to_msg);
  auto& from = static_cast<const TraceConfigV2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.TraceConfigV2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tx_hash_to_generate_full_trace().empty()) {
    _this->_internal_set_tx_hash_to_generate_full_trace(from._internal_tx_hash_to_generate_full_trace());
  }
  if (from._internal_disable_storage() != 0) {
    _this->_internal_set_disable_storage(from._internal_disable_storage());
  }
  if (from._internal_disable_stack() != 0) {
    _this->_internal_set_disable_stack(from._internal_disable_stack());
  }
  if (from._internal_enable_memory() != 0) {
    _this->_internal_set_enable_memory(from._internal_enable_memory());
  }
  if (from._internal_enable_return_data() != 0) {
    _this->_internal_set_enable_return_data(from._internal_enable_return_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TraceConfigV2::CopyFrom(const TraceConfigV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.TraceConfigV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfigV2::IsInitialized() const {
  return true;
}

void TraceConfigV2::InternalSwap(TraceConfigV2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tx_hash_to_generate_full_trace_, lhs_arena,
      &other->_impl_.tx_hash_to_generate_full_trace_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceConfigV2, _impl_.enable_return_data_)
      + sizeof(TraceConfigV2::_impl_.enable_return_data_)
      - PROTOBUF_FIELD_OFFSET(TraceConfigV2, _impl_.disable_storage_)>(
          reinterpret_cast<char*>(&_impl_.disable_storage_),
          reinterpret_cast<char*>(&other->_impl_.disable_storage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceConfigV2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[31]);
}

// ===================================================================

OverrideAccountV2_StateEntry_DoNotUse::OverrideAccountV2_StateEntry_DoNotUse() {}
OverrideAccountV2_StateEntry_DoNotUse::OverrideAccountV2_StateEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void OverrideAccountV2_StateEntry_DoNotUse::MergeFrom(const OverrideAccountV2_StateEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata OverrideAccountV2_StateEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[32]);
}

// ===================================================================

OverrideAccountV2_StateDiffEntry_DoNotUse::OverrideAccountV2_StateDiffEntry_DoNotUse() {}
OverrideAccountV2_StateDiffEntry_DoNotUse::OverrideAccountV2_StateDiffEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void OverrideAccountV2_StateDiffEntry_DoNotUse::MergeFrom(const OverrideAccountV2_StateDiffEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata OverrideAccountV2_StateDiffEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[33]);
}

// ===================================================================

class OverrideAccountV2::_Internal {
 public:
};

OverrideAccountV2::OverrideAccountV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &OverrideAccountV2::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:executor.v1.OverrideAccountV2)
}
OverrideAccountV2::OverrideAccountV2(const OverrideAccountV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OverrideAccountV2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.state_)*/{}
    , /*decltype(_impl_.state_diff_)*/{}
    , decltype(_impl_.balance_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.nonce_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.state_.MergeFrom(from._impl_.state_);
  _this->_impl_.state_diff_.MergeFrom(from._impl_.state_diff_);
  _impl_.balance_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.balance_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_balance().empty()) {
    _this->_impl_.balance_.Set(from._internal_balance(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.nonce_ = from._impl_.nonce_;
  // @@protoc_insertion_point(copy_constructor:executor.v1.OverrideAccountV2)
}

inline void OverrideAccountV2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.state_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.state_diff_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.balance_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.nonce_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.balance_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.balance_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OverrideAccountV2::~OverrideAccountV2() {
  // @@protoc_insertion_point(destructor:executor.v1.OverrideAccountV2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void OverrideAccountV2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.state_.Destruct();
  _impl_.state_.~MapField();
  _impl_.state_diff_.Destruct();
  _impl_.state_diff_.~MapField();
  _impl_.balance_.Destroy();
  _impl_.code_.Destroy();
}

void OverrideAccountV2::ArenaDtor(void* object) {
  OverrideAccountV2* _this = reinterpret_cast< OverrideAccountV2* >(object);
  _this->_impl_.state_.Destruct();
  _this->_impl_.state_diff_.Destruct();
}
void OverrideAccountV2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OverrideAccountV2::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.OverrideAccountV2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.state_.Clear();
  _impl_.state_diff_.Clear();
  _impl_.balance_.ClearToEmpty();
  _impl_.code_.ClearToEmpty();
  _impl_.nonce_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OverrideAccountV2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes balance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_balance();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 nonce = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.state_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> state_diff = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.state_diff_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OverrideAccountV2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.OverrideAccountV2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes balance = 1;
  if (!this->_internal_balance().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_balance(), target);
  }

  // uint64 nonce = 2;
  if (this->_internal_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_nonce(), target);
  }

  // bytes code = 3;
  if (!this->_internal_code().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_code(), target);
  }

  // map<string, string> state = 4;
  if (!this->_internal_state().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = OverrideAccountV2_StateEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_state();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "executor.v1.OverrideAccountV2.StateEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "executor.v1.OverrideAccountV2.StateEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, string> state_diff = 5;
  if (!this->_internal_state_diff().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = OverrideAccountV2_StateDiffEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_state_diff();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "executor.v1.OverrideAccountV2.StateDiffEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "executor.v1.OverrideAccountV2.StateDiffEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.OverrideAccountV2)
  return target;
}

size_t OverrideAccountV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.OverrideAccountV2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> state = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_state_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_state().begin();
      it != this->_internal_state().end(); ++it) {
    total_size += OverrideAccountV2_StateEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> state_diff = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_state_diff_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_state_diff().begin();
      it != this->_internal_state_diff().end(); ++it) {
    total_size += OverrideAccountV2_StateDiffEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes balance = 1;
  if (!this->_internal_balance().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_balance());
  }

  // bytes code = 3;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_code());
  }

  // uint64 nonce = 2;
  if (this->_internal_nonce() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_nonce());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OverrideAccountV2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OverrideAccountV2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OverrideAccountV2::GetClassData() const { return &_class_data_; }


void OverrideAccountV2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OverrideAccountV2*>(&to_msg);
  auto& from = static_cast<const OverrideAccountV2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.OverrideAccountV2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.state_.MergeFrom(from._impl_.state_);
  _this->_impl_.state_diff_.MergeFrom(from._impl_.state_diff_);
  if (!from._internal_balance().empty()) {
    _this->_internal_set_balance(from._internal_balance());
  }
  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (from._internal_nonce() != 0) {
    _this->_internal_set_nonce(from._internal_nonce());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OverrideAccountV2::CopyFrom(const OverrideAccountV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.OverrideAccountV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OverrideAccountV2::IsInitialized() const {
  return true;
}

void OverrideAccountV2::InternalSwap(OverrideAccountV2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.state_.InternalSwap(&other->_impl_.state_);
  _impl_.state_diff_.InternalSwap(&other->_impl_.state_diff_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.balance_, lhs_arena,
      &other->_impl_.balance_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  swap(_impl_.nonce_, other->_impl_.nonce_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OverrideAccountV2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[34]);
}

// ===================================================================

InfoReadWriteV2_ScStorageEntry_DoNotUse::InfoReadWriteV2_ScStorageEntry_DoNotUse() {}
InfoReadWriteV2_ScStorageEntry_DoNotUse::InfoReadWriteV2_ScStorageEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void InfoReadWriteV2_ScStorageEntry_DoNotUse::MergeFrom(const InfoReadWriteV2_ScStorageEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata InfoReadWriteV2_ScStorageEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[35]);
}

// ===================================================================

class InfoReadWriteV2::_Internal {
 public:
};

InfoReadWriteV2::InfoReadWriteV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &InfoReadWriteV2::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:executor.v1.InfoReadWriteV2)
}
InfoReadWriteV2::InfoReadWriteV2(const InfoReadWriteV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InfoReadWriteV2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.sc_storage_)*/{}
    , decltype(_impl_.nonce_){}
    , decltype(_impl_.balance_){}
    , decltype(_impl_.sc_code_){}
    , decltype(_impl_.sc_length_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.sc_storage_.MergeFrom(from._impl_.sc_storage_);
  _impl_.nonce_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nonce_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nonce().empty()) {
    _this->_impl_.nonce_.Set(from._internal_nonce(), 
      _this->GetArenaForAllocation());
  }
  _impl_.balance_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.balance_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_balance().empty()) {
    _this->_impl_.balance_.Set(from._internal_balance(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sc_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sc_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sc_code().empty()) {
    _this->_impl_.sc_code_.Set(from._internal_sc_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sc_length_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sc_length_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sc_length().empty()) {
    _this->_impl_.sc_length_.Set(from._internal_sc_length(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:executor.v1.InfoReadWriteV2)
}

inline void InfoReadWriteV2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.sc_storage_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.nonce_){}
    , decltype(_impl_.balance_){}
    , decltype(_impl_.sc_code_){}
    , decltype(_impl_.sc_length_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nonce_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nonce_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.balance_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.balance_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sc_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sc_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sc_length_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sc_length_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InfoReadWriteV2::~InfoReadWriteV2() {
  // @@protoc_insertion_point(destructor:executor.v1.InfoReadWriteV2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void InfoReadWriteV2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sc_storage_.Destruct();
  _impl_.sc_storage_.~MapField();
  _impl_.nonce_.Destroy();
  _impl_.balance_.Destroy();
  _impl_.sc_code_.Destroy();
  _impl_.sc_length_.Destroy();
}

void InfoReadWriteV2::ArenaDtor(void* object) {
  InfoReadWriteV2* _this = reinterpret_cast< InfoReadWriteV2* >(object);
  _this->_impl_.sc_storage_.Destruct();
}
void InfoReadWriteV2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InfoReadWriteV2::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.InfoReadWriteV2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sc_storage_.Clear();
  _impl_.nonce_.ClearToEmpty();
  _impl_.balance_.ClearToEmpty();
  _impl_.sc_code_.ClearToEmpty();
  _impl_.sc_length_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InfoReadWriteV2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string nonce = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nonce();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.InfoReadWriteV2.nonce"));
        } else
          goto handle_unusual;
        continue;
      // string balance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_balance();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.InfoReadWriteV2.balance"));
        } else
          goto handle_unusual;
        continue;
      // string sc_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sc_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.InfoReadWriteV2.sc_code"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> sc_storage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.sc_storage_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string sc_length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sc_length();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.InfoReadWriteV2.sc_length"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InfoReadWriteV2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.InfoReadWriteV2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string nonce = 1;
  if (!this->_internal_nonce().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nonce().data(), static_cast<int>(this->_internal_nonce().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.InfoReadWriteV2.nonce");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nonce(), target);
  }

  // string balance = 2;
  if (!this->_internal_balance().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_balance().data(), static_cast<int>(this->_internal_balance().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.InfoReadWriteV2.balance");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_balance(), target);
  }

  // string sc_code = 3;
  if (!this->_internal_sc_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sc_code().data(), static_cast<int>(this->_internal_sc_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.InfoReadWriteV2.sc_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sc_code(), target);
  }

  // map<string, string> sc_storage = 4;
  if (!this->_internal_sc_storage().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = InfoReadWriteV2_ScStorageEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_sc_storage();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "executor.v1.InfoReadWriteV2.ScStorageEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "executor.v1.InfoReadWriteV2.ScStorageEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // string sc_length = 5;
  if (!this->_internal_sc_length().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sc_length().data(), static_cast<int>(this->_internal_sc_length().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.InfoReadWriteV2.sc_length");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sc_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.InfoReadWriteV2)
  return target;
}

size_t InfoReadWriteV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.InfoReadWriteV2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> sc_storage = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sc_storage_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_sc_storage().begin();
      it != this->_internal_sc_storage().end(); ++it) {
    total_size += InfoReadWriteV2_ScStorageEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string nonce = 1;
  if (!this->_internal_nonce().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nonce());
  }

  // string balance = 2;
  if (!this->_internal_balance().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_balance());
  }

  // string sc_code = 3;
  if (!this->_internal_sc_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sc_code());
  }

  // string sc_length = 5;
  if (!this->_internal_sc_length().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sc_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InfoReadWriteV2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InfoReadWriteV2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InfoReadWriteV2::GetClassData() const { return &_class_data_; }


void InfoReadWriteV2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InfoReadWriteV2*>(&to_msg);
  auto& from = static_cast<const InfoReadWriteV2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.InfoReadWriteV2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sc_storage_.MergeFrom(from._impl_.sc_storage_);
  if (!from._internal_nonce().empty()) {
    _this->_internal_set_nonce(from._internal_nonce());
  }
  if (!from._internal_balance().empty()) {
    _this->_internal_set_balance(from._internal_balance());
  }
  if (!from._internal_sc_code().empty()) {
    _this->_internal_set_sc_code(from._internal_sc_code());
  }
  if (!from._internal_sc_length().empty()) {
    _this->_internal_set_sc_length(from._internal_sc_length());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InfoReadWriteV2::CopyFrom(const InfoReadWriteV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.InfoReadWriteV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoReadWriteV2::IsInitialized() const {
  return true;
}

void InfoReadWriteV2::InternalSwap(InfoReadWriteV2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sc_storage_.InternalSwap(&other->_impl_.sc_storage_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nonce_, lhs_arena,
      &other->_impl_.nonce_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.balance_, lhs_arena,
      &other->_impl_.balance_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sc_code_, lhs_arena,
      &other->_impl_.sc_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sc_length_, lhs_arena,
      &other->_impl_.sc_length_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InfoReadWriteV2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[36]);
}

// ===================================================================

class FullTraceV2::_Internal {
 public:
  static const ::executor::v1::TransactionContextV2& context(const FullTraceV2* msg);
};

const ::executor::v1::TransactionContextV2&
FullTraceV2::_Internal::context(const FullTraceV2* msg) {
  return *msg->_impl_.context_;
}
FullTraceV2::FullTraceV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:executor.v1.FullTraceV2)
}
FullTraceV2::FullTraceV2(const FullTraceV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FullTraceV2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.steps_){from._impl_.steps_}
    , decltype(_impl_.context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_context()) {
    _this->_impl_.context_ = new ::executor::v1::TransactionContextV2(*from._impl_.context_);
  }
  // @@protoc_insertion_point(copy_constructor:executor.v1.FullTraceV2)
}

inline void FullTraceV2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.steps_){arena}
    , decltype(_impl_.context_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FullTraceV2::~FullTraceV2() {
  // @@protoc_insertion_point(destructor:executor.v1.FullTraceV2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FullTraceV2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.steps_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.context_;
}

void FullTraceV2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FullTraceV2::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.FullTraceV2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.steps_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.context_ != nullptr) {
    delete _impl_.context_;
  }
  _impl_.context_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FullTraceV2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .executor.v1.TransactionContextV2 context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .executor.v1.TransactionStepV2 steps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_steps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FullTraceV2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.FullTraceV2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .executor.v1.TransactionContextV2 context = 1;
  if (this->_internal_has_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::context(this),
        _Internal::context(this).GetCachedSize(), target, stream);
  }

  // repeated .executor.v1.TransactionStepV2 steps = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_steps_size()); i < n; i++) {
    const auto& repfield = this->_internal_steps(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.FullTraceV2)
  return target;
}

size_t FullTraceV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.FullTraceV2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .executor.v1.TransactionStepV2 steps = 2;
  total_size += 1UL * this->_internal_steps_size();
  for (const auto& msg : this->_impl_.steps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .executor.v1.TransactionContextV2 context = 1;
  if (this->_internal_has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.context_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FullTraceV2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FullTraceV2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FullTraceV2::GetClassData() const { return &_class_data_; }


void FullTraceV2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FullTraceV2*>(&to_msg);
  auto& from = static_cast<const FullTraceV2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.FullTraceV2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.steps_.MergeFrom(from._impl_.steps_);
  if (from._internal_has_context()) {
    _this->_internal_mutable_context()->::executor::v1::TransactionContextV2::MergeFrom(
        from._internal_context());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FullTraceV2::CopyFrom(const FullTraceV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.FullTraceV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullTraceV2::IsInitialized() const {
  return true;
}

void FullTraceV2::InternalSwap(FullTraceV2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.steps_.InternalSwap(&other->_impl_.steps_);
  swap(_impl_.context_, other->_impl_.context_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FullTraceV2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[37]);
}

// ===================================================================

class TransactionContextV2::_Internal {
 public:
};

TransactionContextV2::TransactionContextV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:executor.v1.TransactionContextV2)
}
TransactionContextV2::TransactionContextV2(const TransactionContextV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransactionContextV2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.from_){}
    , decltype(_impl_.to_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.block_hash_){}
    , decltype(_impl_.output_){}
    , decltype(_impl_.gas_price_){}
    , decltype(_impl_.old_state_root_){}
    , decltype(_impl_.gas_){}
    , decltype(_impl_.gas_used_){}
    , decltype(_impl_.nonce_){}
    , decltype(_impl_.tx_index_){}
    , decltype(_impl_.chain_id_){}
    , decltype(_impl_.execution_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_from().empty()) {
    _this->_impl_.from_.Set(from._internal_from(), 
      _this->GetArenaForAllocation());
  }
  _impl_.to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_to().empty()) {
    _this->_impl_.to_.Set(from._internal_to(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  _impl_.block_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_hash().empty()) {
    _this->_impl_.block_hash_.Set(from._internal_block_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.output_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_output().empty()) {
    _this->_impl_.output_.Set(from._internal_output(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gas_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gas_price_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gas_price().empty()) {
    _this->_impl_.gas_price_.Set(from._internal_gas_price(), 
      _this->GetArenaForAllocation());
  }
  _impl_.old_state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_old_state_root().empty()) {
    _this->_impl_.old_state_root_.Set(from._internal_old_state_root(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.gas_, &from._impl_.gas_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.execution_time_) -
    reinterpret_cast<char*>(&_impl_.gas_)) + sizeof(_impl_.execution_time_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.TransactionContextV2)
}

inline void TransactionContextV2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.from_){}
    , decltype(_impl_.to_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.block_hash_){}
    , decltype(_impl_.output_){}
    , decltype(_impl_.gas_price_){}
    , decltype(_impl_.old_state_root_){}
    , decltype(_impl_.gas_){uint64_t{0u}}
    , decltype(_impl_.gas_used_){uint64_t{0u}}
    , decltype(_impl_.nonce_){uint64_t{0u}}
    , decltype(_impl_.tx_index_){uint64_t{0u}}
    , decltype(_impl_.chain_id_){uint64_t{0u}}
    , decltype(_impl_.execution_time_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.from_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.from_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.block_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.output_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gas_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gas_price_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.old_state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.old_state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransactionContextV2::~TransactionContextV2() {
  // @@protoc_insertion_point(destructor:executor.v1.TransactionContextV2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransactionContextV2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  _impl_.from_.Destroy();
  _impl_.to_.Destroy();
  _impl_.data_.Destroy();
  _impl_.value_.Destroy();
  _impl_.block_hash_.Destroy();
  _impl_.output_.Destroy();
  _impl_.gas_price_.Destroy();
  _impl_.old_state_root_.Destroy();
}

void TransactionContextV2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransactionContextV2::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.TransactionContextV2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  _impl_.from_.ClearToEmpty();
  _impl_.to_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _impl_.block_hash_.ClearToEmpty();
  _impl_.output_.ClearToEmpty();
  _impl_.gas_price_.ClearToEmpty();
  _impl_.old_state_root_.ClearToEmpty();
  ::memset(&_impl_.gas_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.execution_time_) -
      reinterpret_cast<char*>(&_impl_.gas_)) + sizeof(_impl_.execution_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionContextV2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.TransactionContextV2.type"));
        } else
          goto handle_unusual;
        continue;
      // string from = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_from();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.TransactionContextV2.from"));
        } else
          goto handle_unusual;
        continue;
      // string to = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_to();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.TransactionContextV2.to"));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gas = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.TransactionContextV2.value"));
        } else
          goto handle_unusual;
        continue;
      // bytes block_hash = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_block_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes output = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_output();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gas_used = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.gas_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string gas_price = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_gas_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.TransactionContextV2.gas_price"));
        } else
          goto handle_unusual;
        continue;
      // uint32 execution_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.execution_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes old_state_root = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_old_state_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 nonce = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 tx_index = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.tx_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 chain_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.chain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionContextV2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.TransactionContextV2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.TransactionContextV2.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // string from = 2;
  if (!this->_internal_from().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.TransactionContextV2.from");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_from(), target);
  }

  // string to = 3;
  if (!this->_internal_to().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.TransactionContextV2.to");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_to(), target);
  }

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  // uint64 gas = 5;
  if (this->_internal_gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_gas(), target);
  }

  // string value = 6;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.TransactionContextV2.value");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_value(), target);
  }

  // bytes block_hash = 7;
  if (!this->_internal_block_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_block_hash(), target);
  }

  // bytes output = 8;
  if (!this->_internal_output().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_output(), target);
  }

  // uint64 gas_used = 9;
  if (this->_internal_gas_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_gas_used(), target);
  }

  // string gas_price = 10;
  if (!this->_internal_gas_price().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gas_price().data(), static_cast<int>(this->_internal_gas_price().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.TransactionContextV2.gas_price");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_gas_price(), target);
  }

  // uint32 execution_time = 11;
  if (this->_internal_execution_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_execution_time(), target);
  }

  // bytes old_state_root = 12;
  if (!this->_internal_old_state_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_old_state_root(), target);
  }

  // uint64 nonce = 13;
  if (this->_internal_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(13, this->_internal_nonce(), target);
  }

  // uint64 tx_index = 14;
  if (this->_internal_tx_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(14, this->_internal_tx_index(), target);
  }

  // uint64 chain_id = 15;
  if (this->_internal_chain_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(15, this->_internal_chain_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.TransactionContextV2)
  return target;
}

size_t TransactionContextV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.TransactionContextV2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string from = 2;
  if (!this->_internal_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  // string to = 3;
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string value = 6;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // bytes block_hash = 7;
  if (!this->_internal_block_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_hash());
  }

  // bytes output = 8;
  if (!this->_internal_output().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_output());
  }

  // string gas_price = 10;
  if (!this->_internal_gas_price().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gas_price());
  }

  // bytes old_state_root = 12;
  if (!this->_internal_old_state_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_old_state_root());
  }

  // uint64 gas = 5;
  if (this->_internal_gas() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gas());
  }

  // uint64 gas_used = 9;
  if (this->_internal_gas_used() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gas_used());
  }

  // uint64 nonce = 13;
  if (this->_internal_nonce() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_nonce());
  }

  // uint64 tx_index = 14;
  if (this->_internal_tx_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tx_index());
  }

  // uint64 chain_id = 15;
  if (this->_internal_chain_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_chain_id());
  }

  // uint32 execution_time = 11;
  if (this->_internal_execution_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_execution_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionContextV2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransactionContextV2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionContextV2::GetClassData() const { return &_class_data_; }


void TransactionContextV2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransactionContextV2*>(&to_msg);
  auto& from = static_cast<const TransactionContextV2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.TransactionContextV2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_from().empty()) {
    _this->_internal_set_from(from._internal_from());
  }
  if (!from._internal_to().empty()) {
    _this->_internal_set_to(from._internal_to());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (!from._internal_block_hash().empty()) {
    _this->_internal_set_block_hash(from._internal_block_hash());
  }
  if (!from._internal_output().empty()) {
    _this->_internal_set_output(from._internal_output());
  }
  if (!from._internal_gas_price().empty()) {
    _this->_internal_set_gas_price(from._internal_gas_price());
  }
  if (!from._internal_old_state_root().empty()) {
    _this->_internal_set_old_state_root(from._internal_old_state_root());
  }
  if (from._internal_gas() != 0) {
    _this->_internal_set_gas(from._internal_gas());
  }
  if (from._internal_gas_used() != 0) {
    _this->_internal_set_gas_used(from._internal_gas_used());
  }
  if (from._internal_nonce() != 0) {
    _this->_internal_set_nonce(from._internal_nonce());
  }
  if (from._internal_tx_index() != 0) {
    _this->_internal_set_tx_index(from._internal_tx_index());
  }
  if (from._internal_chain_id() != 0) {
    _this->_internal_set_chain_id(from._internal_chain_id());
  }
  if (from._internal_execution_time() != 0) {
    _this->_internal_set_execution_time(from._internal_execution_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionContextV2::CopyFrom(const TransactionContextV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.TransactionContextV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionContextV2::IsInitialized() const {
  return true;
}

void TransactionContextV2::InternalSwap(TransactionContextV2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.from_, lhs_arena,
      &other->_impl_.from_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.to_, lhs_arena,
      &other->_impl_.to_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.block_hash_, lhs_arena,
      &other->_impl_.block_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.output_, lhs_arena,
      &other->_impl_.output_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gas_price_, lhs_arena,
      &other->_impl_.gas_price_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.old_state_root_, lhs_arena,
      &other->_impl_.old_state_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionContextV2, _impl_.execution_time_)
      + sizeof(TransactionContextV2::_impl_.execution_time_)
      - PROTOBUF_FIELD_OFFSET(TransactionContextV2, _impl_.gas_)>(
          reinterpret_cast<char*>(&_impl_.gas_),
          reinterpret_cast<char*>(&other->_impl_.gas_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionContextV2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[38]);
}

// ===================================================================

TransactionStepV2_StorageEntry_DoNotUse::TransactionStepV2_StorageEntry_DoNotUse() {}
TransactionStepV2_StorageEntry_DoNotUse::TransactionStepV2_StorageEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TransactionStepV2_StorageEntry_DoNotUse::MergeFrom(const TransactionStepV2_StorageEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TransactionStepV2_StorageEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[39]);
}

// ===================================================================

class TransactionStepV2::_Internal {
 public:
  static const ::executor::v1::ContractV2& contract(const TransactionStepV2* msg);
};

const ::executor::v1::ContractV2&
TransactionStepV2::_Internal::contract(const TransactionStepV2* msg) {
  return *msg->_impl_.contract_;
}
TransactionStepV2::TransactionStepV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &TransactionStepV2::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:executor.v1.TransactionStepV2)
}
TransactionStepV2::TransactionStepV2(const TransactionStepV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransactionStepV2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stack_){from._impl_.stack_}
    , /*decltype(_impl_.storage_)*/{}
    , decltype(_impl_.state_root_){}
    , decltype(_impl_.memory_){}
    , decltype(_impl_.return_data_){}
    , decltype(_impl_.contract_){nullptr}
    , decltype(_impl_.pc_){}
    , decltype(_impl_.gas_){}
    , decltype(_impl_.depth_){}
    , decltype(_impl_.op_){}
    , decltype(_impl_.gas_cost_){}
    , decltype(_impl_.gas_refund_){}
    , decltype(_impl_.memory_size_){}
    , decltype(_impl_.memory_offset_){}
    , decltype(_impl_.error_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.storage_.MergeFrom(from._impl_.storage_);
  _impl_.state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_state_root().empty()) {
    _this->_impl_.state_root_.Set(from._internal_state_root(), 
      _this->GetArenaForAllocation());
  }
  _impl_.memory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_memory().empty()) {
    _this->_impl_.memory_.Set(from._internal_memory(), 
      _this->GetArenaForAllocation());
  }
  _impl_.return_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.return_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_return_data().empty()) {
    _this->_impl_.return_data_.Set(from._internal_return_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_contract()) {
    _this->_impl_.contract_ = new ::executor::v1::ContractV2(*from._impl_.contract_);
  }
  ::memcpy(&_impl_.pc_, &from._impl_.pc_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.error_) -
    reinterpret_cast<char*>(&_impl_.pc_)) + sizeof(_impl_.error_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.TransactionStepV2)
}

inline void TransactionStepV2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stack_){arena}
    , /*decltype(_impl_.storage_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.state_root_){}
    , decltype(_impl_.memory_){}
    , decltype(_impl_.return_data_){}
    , decltype(_impl_.contract_){nullptr}
    , decltype(_impl_.pc_){uint64_t{0u}}
    , decltype(_impl_.gas_){uint64_t{0u}}
    , decltype(_impl_.depth_){0u}
    , decltype(_impl_.op_){0u}
    , decltype(_impl_.gas_cost_){uint64_t{0u}}
    , decltype(_impl_.gas_refund_){uint64_t{0u}}
    , decltype(_impl_.memory_size_){0u}
    , decltype(_impl_.memory_offset_){0u}
    , decltype(_impl_.error_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.memory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.memory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.return_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.return_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransactionStepV2::~TransactionStepV2() {
  // @@protoc_insertion_point(destructor:executor.v1.TransactionStepV2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void TransactionStepV2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stack_.~RepeatedPtrField();
  _impl_.storage_.Destruct();
  _impl_.storage_.~MapField();
  _impl_.state_root_.Destroy();
  _impl_.memory_.Destroy();
  _impl_.return_data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.contract_;
}

void TransactionStepV2::ArenaDtor(void* object) {
  TransactionStepV2* _this = reinterpret_cast< TransactionStepV2* >(object);
  _this->_impl_.storage_.Destruct();
}
void TransactionStepV2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransactionStepV2::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.TransactionStepV2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stack_.Clear();
  _impl_.storage_.Clear();
  _impl_.state_root_.ClearToEmpty();
  _impl_.memory_.ClearToEmpty();
  _impl_.return_data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.contract_ != nullptr) {
    delete _impl_.contract_;
  }
  _impl_.contract_ = nullptr;
  ::memset(&_impl_.pc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.error_) -
      reinterpret_cast<char*>(&_impl_.pc_)) + sizeof(_impl_.error_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionStepV2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes state_root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_state_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 depth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 pc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.pc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gas = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gas_cost = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.gas_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gas_refund = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.gas_refund_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 op = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.op_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string stack = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_stack();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "executor.v1.TransactionStepV2.stack"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes memory = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_memory();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 memory_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.memory_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 memory_offset = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.memory_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes return_data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_return_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .executor.v1.ContractV2 contract = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_contract(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .executor.v1.RomError error = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::executor::v1::RomError>(val));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> storage = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.storage_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionStepV2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.TransactionStepV2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes state_root = 1;
  if (!this->_internal_state_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_state_root(), target);
  }

  // uint32 depth = 2;
  if (this->_internal_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_depth(), target);
  }

  // uint64 pc = 3;
  if (this->_internal_pc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_pc(), target);
  }

  // uint64 gas = 4;
  if (this->_internal_gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_gas(), target);
  }

  // uint64 gas_cost = 5;
  if (this->_internal_gas_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_gas_cost(), target);
  }

  // uint64 gas_refund = 6;
  if (this->_internal_gas_refund() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_gas_refund(), target);
  }

  // uint32 op = 7;
  if (this->_internal_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_op(), target);
  }

  // repeated string stack = 8;
  for (int i = 0, n = this->_internal_stack_size(); i < n; i++) {
    const auto& s = this->_internal_stack(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.TransactionStepV2.stack");
    target = stream->WriteString(8, s, target);
  }

  // bytes memory = 9;
  if (!this->_internal_memory().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_memory(), target);
  }

  // uint32 memory_size = 10;
  if (this->_internal_memory_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_memory_size(), target);
  }

  // uint32 memory_offset = 11;
  if (this->_internal_memory_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_memory_offset(), target);
  }

  // bytes return_data = 12;
  if (!this->_internal_return_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_return_data(), target);
  }

  // .executor.v1.ContractV2 contract = 13;
  if (this->_internal_has_contract()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::contract(this),
        _Internal::contract(this).GetCachedSize(), target, stream);
  }

  // .executor.v1.RomError error = 14;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_error(), target);
  }

  // map<string, string> storage = 15;
  if (!this->_internal_storage().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = TransactionStepV2_StorageEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_storage();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "executor.v1.TransactionStepV2.StorageEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "executor.v1.TransactionStepV2.StorageEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(15, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(15, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.TransactionStepV2)
  return target;
}

size_t TransactionStepV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.TransactionStepV2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string stack = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.stack_.size());
  for (int i = 0, n = _impl_.stack_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.stack_.Get(i));
  }

  // map<string, string> storage = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_storage_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_storage().begin();
      it != this->_internal_storage().end(); ++it) {
    total_size += TransactionStepV2_StorageEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes state_root = 1;
  if (!this->_internal_state_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_state_root());
  }

  // bytes memory = 9;
  if (!this->_internal_memory().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_memory());
  }

  // bytes return_data = 12;
  if (!this->_internal_return_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_return_data());
  }

  // .executor.v1.ContractV2 contract = 13;
  if (this->_internal_has_contract()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.contract_);
  }

  // uint64 pc = 3;
  if (this->_internal_pc() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pc());
  }

  // uint64 gas = 4;
  if (this->_internal_gas() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gas());
  }

  // uint32 depth = 2;
  if (this->_internal_depth() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_depth());
  }

  // uint32 op = 7;
  if (this->_internal_op() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_op());
  }

  // uint64 gas_cost = 5;
  if (this->_internal_gas_cost() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gas_cost());
  }

  // uint64 gas_refund = 6;
  if (this->_internal_gas_refund() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gas_refund());
  }

  // uint32 memory_size = 10;
  if (this->_internal_memory_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_memory_size());
  }

  // uint32 memory_offset = 11;
  if (this->_internal_memory_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_memory_offset());
  }

  // .executor.v1.RomError error = 14;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionStepV2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransactionStepV2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionStepV2::GetClassData() const { return &_class_data_; }


void TransactionStepV2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransactionStepV2*>(&to_msg);
  auto& from = static_cast<const TransactionStepV2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.TransactionStepV2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stack_.MergeFrom(from._impl_.stack_);
  _this->_impl_.storage_.MergeFrom(from._impl_.storage_);
  if (!from._internal_state_root().empty()) {
    _this->_internal_set_state_root(from._internal_state_root());
  }
  if (!from._internal_memory().empty()) {
    _this->_internal_set_memory(from._internal_memory());
  }
  if (!from._internal_return_data().empty()) {
    _this->_internal_set_return_data(from._internal_return_data());
  }
  if (from._internal_has_contract()) {
    _this->_internal_mutable_contract()->::executor::v1::ContractV2::MergeFrom(
        from._internal_contract());
  }
  if (from._internal_pc() != 0) {
    _this->_internal_set_pc(from._internal_pc());
  }
  if (from._internal_gas() != 0) {
    _this->_internal_set_gas(from._internal_gas());
  }
  if (from._internal_depth() != 0) {
    _this->_internal_set_depth(from._internal_depth());
  }
  if (from._internal_op() != 0) {
    _this->_internal_set_op(from._internal_op());
  }
  if (from._internal_gas_cost() != 0) {
    _this->_internal_set_gas_cost(from._internal_gas_cost());
  }
  if (from._internal_gas_refund() != 0) {
    _this->_internal_set_gas_refund(from._internal_gas_refund());
  }
  if (from._internal_memory_size() != 0) {
    _this->_internal_set_memory_size(from._internal_memory_size());
  }
  if (from._internal_memory_offset() != 0) {
    _this->_internal_set_memory_offset(from._internal_memory_offset());
  }
  if (from._internal_error() != 0) {
    _this->_internal_set_error(from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionStepV2::CopyFrom(const TransactionStepV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.TransactionStepV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionStepV2::IsInitialized() const {
  return true;
}

void TransactionStepV2::InternalSwap(TransactionStepV2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stack_.InternalSwap(&other->_impl_.stack_);
  _impl_.storage_.InternalSwap(&other->_impl_.storage_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.state_root_, lhs_arena,
      &other->_impl_.state_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.memory_, lhs_arena,
      &other->_impl_.memory_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.return_data_, lhs_arena,
      &other->_impl_.return_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionStepV2, _impl_.error_)
      + sizeof(TransactionStepV2::_impl_.error_)
      - PROTOBUF_FIELD_OFFSET(TransactionStepV2, _impl_.contract_)>(
          reinterpret_cast<char*>(&_impl_.contract_),
          reinterpret_cast<char*>(&other->_impl_.contract_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionStepV2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[40]);
}

// ===================================================================

class ContractV2::_Internal {
 public:
};

ContractV2::ContractV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:executor.v1.ContractV2)
}
ContractV2::ContractV2(const ContractV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContractV2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.caller_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.gas_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.caller_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caller_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_caller().empty()) {
    _this->_impl_.caller_.Set(from._internal_caller(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.gas_ = from._impl_.gas_;
  // @@protoc_insertion_point(copy_constructor:executor.v1.ContractV2)
}

inline void ContractV2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.caller_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.gas_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.caller_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caller_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContractV2::~ContractV2() {
  // @@protoc_insertion_point(destructor:executor.v1.ContractV2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContractV2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
  _impl_.caller_.Destroy();
  _impl_.value_.Destroy();
  _impl_.data_.Destroy();
  _impl_.type_.Destroy();
}

void ContractV2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContractV2::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.ContractV2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _impl_.caller_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  _impl_.gas_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractV2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.ContractV2.address"));
        } else
          goto handle_unusual;
        continue;
      // string caller = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_caller();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.ContractV2.caller"));
        } else
          goto handle_unusual;
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.ContractV2.value"));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gas = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.ContractV2.type"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContractV2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.ContractV2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ContractV2.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // string caller = 2;
  if (!this->_internal_caller().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_caller().data(), static_cast<int>(this->_internal_caller().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ContractV2.caller");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_caller(), target);
  }

  // string value = 3;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ContractV2.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  // uint64 gas = 5;
  if (this->_internal_gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_gas(), target);
  }

  // string type = 6;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ContractV2.type");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.ContractV2)
  return target;
}

size_t ContractV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.ContractV2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string caller = 2;
  if (!this->_internal_caller().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_caller());
  }

  // string value = 3;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string type = 6;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // uint64 gas = 5;
  if (this->_internal_gas() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gas());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContractV2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContractV2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContractV2::GetClassData() const { return &_class_data_; }


void ContractV2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContractV2*>(&to_msg);
  auto& from = static_cast<const ContractV2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.ContractV2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_caller().empty()) {
    _this->_internal_set_caller(from._internal_caller());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_gas() != 0) {
    _this->_internal_set_gas(from._internal_gas());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContractV2::CopyFrom(const ContractV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.ContractV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractV2::IsInitialized() const {
  return true;
}

void ContractV2::InternalSwap(ContractV2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.caller_, lhs_arena,
      &other->_impl_.caller_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  swap(_impl_.gas_, other->_impl_.gas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractV2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[41]);
}

// ===================================================================

class ProcessBlockResponseV2::_Internal {
 public:
};

ProcessBlockResponseV2::ProcessBlockResponseV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:executor.v1.ProcessBlockResponseV2)
}
ProcessBlockResponseV2::ProcessBlockResponseV2(const ProcessBlockResponseV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcessBlockResponseV2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.responses_){from._impl_.responses_}
    , decltype(_impl_.logs_){from._impl_.logs_}
    , decltype(_impl_.parent_hash_){}
    , decltype(_impl_.coinbase_){}
    , decltype(_impl_.ger_){}
    , decltype(_impl_.block_hash_l1_){}
    , decltype(_impl_.block_info_root_){}
    , decltype(_impl_.block_hash_){}
    , decltype(_impl_.gas_limit_){}
    , decltype(_impl_.block_number_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.gas_used_){}
    , decltype(_impl_.error_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.parent_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parent_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parent_hash().empty()) {
    _this->_impl_.parent_hash_.Set(from._internal_parent_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.coinbase_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.coinbase_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_coinbase().empty()) {
    _this->_impl_.coinbase_.Set(from._internal_coinbase(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ger_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ger_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ger().empty()) {
    _this->_impl_.ger_.Set(from._internal_ger(), 
      _this->GetArenaForAllocation());
  }
  _impl_.block_hash_l1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_hash_l1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_hash_l1().empty()) {
    _this->_impl_.block_hash_l1_.Set(from._internal_block_hash_l1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.block_info_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_info_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_info_root().empty()) {
    _this->_impl_.block_info_root_.Set(from._internal_block_info_root(), 
      _this->GetArenaForAllocation());
  }
  _impl_.block_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_hash().empty()) {
    _this->_impl_.block_hash_.Set(from._internal_block_hash(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.gas_limit_, &from._impl_.gas_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.error_) -
    reinterpret_cast<char*>(&_impl_.gas_limit_)) + sizeof(_impl_.error_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.ProcessBlockResponseV2)
}

inline void ProcessBlockResponseV2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.responses_){arena}
    , decltype(_impl_.logs_){arena}
    , decltype(_impl_.parent_hash_){}
    , decltype(_impl_.coinbase_){}
    , decltype(_impl_.ger_){}
    , decltype(_impl_.block_hash_l1_){}
    , decltype(_impl_.block_info_root_){}
    , decltype(_impl_.block_hash_){}
    , decltype(_impl_.gas_limit_){uint64_t{0u}}
    , decltype(_impl_.block_number_){uint64_t{0u}}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.gas_used_){uint64_t{0u}}
    , decltype(_impl_.error_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.parent_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parent_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.coinbase_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.coinbase_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ger_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ger_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.block_hash_l1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_hash_l1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.block_info_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_info_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.block_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProcessBlockResponseV2::~ProcessBlockResponseV2() {
  // @@protoc_insertion_point(destructor:executor.v1.ProcessBlockResponseV2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcessBlockResponseV2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.responses_.~RepeatedPtrField();
  _impl_.logs_.~RepeatedPtrField();
  _impl_.parent_hash_.Destroy();
  _impl_.coinbase_.Destroy();
  _impl_.ger_.Destroy();
  _impl_.block_hash_l1_.Destroy();
  _impl_.block_info_root_.Destroy();
  _impl_.block_hash_.Destroy();
}

void ProcessBlockResponseV2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessBlockResponseV2::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.ProcessBlockResponseV2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.responses_.Clear();
  _impl_.logs_.Clear();
  _impl_.parent_hash_.ClearToEmpty();
  _impl_.coinbase_.ClearToEmpty();
  _impl_.ger_.ClearToEmpty();
  _impl_.block_hash_l1_.ClearToEmpty();
  _impl_.block_info_root_.ClearToEmpty();
  _impl_.block_hash_.ClearToEmpty();
  ::memset(&_impl_.gas_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.error_) -
      reinterpret_cast<char*>(&_impl_.gas_limit_)) + sizeof(_impl_.error_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessBlockResponseV2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes parent_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_parent_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string coinbase = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_coinbase();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.ProcessBlockResponseV2.coinbase"));
        } else
          goto handle_unusual;
        continue;
      // uint64 gas_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.gas_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 block_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.block_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes ger = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_ger();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes block_hash_l1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_block_hash_l1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gas_used = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.gas_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes block_info_root = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_block_info_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes block_hash = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_block_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .executor.v1.ProcessTransactionResponseV2 responses = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .executor.v1.LogV2 logs = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .executor.v1.RomError error = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::executor::v1::RomError>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessBlockResponseV2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.ProcessBlockResponseV2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes parent_hash = 1;
  if (!this->_internal_parent_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_parent_hash(), target);
  }

  // string coinbase = 2;
  if (!this->_internal_coinbase().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_coinbase().data(), static_cast<int>(this->_internal_coinbase().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessBlockResponseV2.coinbase");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_coinbase(), target);
  }

  // uint64 gas_limit = 3;
  if (this->_internal_gas_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_gas_limit(), target);
  }

  // uint64 block_number = 4;
  if (this->_internal_block_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_block_number(), target);
  }

  // uint64 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_timestamp(), target);
  }

  // bytes ger = 6;
  if (!this->_internal_ger().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_ger(), target);
  }

  // bytes block_hash_l1 = 7;
  if (!this->_internal_block_hash_l1().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_block_hash_l1(), target);
  }

  // uint64 gas_used = 8;
  if (this->_internal_gas_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_gas_used(), target);
  }

  // bytes block_info_root = 9;
  if (!this->_internal_block_info_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_block_info_root(), target);
  }

  // bytes block_hash = 10;
  if (!this->_internal_block_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_block_hash(), target);
  }

  // repeated .executor.v1.ProcessTransactionResponseV2 responses = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_responses_size()); i < n; i++) {
    const auto& repfield = this->_internal_responses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .executor.v1.LogV2 logs = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_logs_size()); i < n; i++) {
    const auto& repfield = this->_internal_logs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .executor.v1.RomError error = 13;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.ProcessBlockResponseV2)
  return target;
}

size_t ProcessBlockResponseV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.ProcessBlockResponseV2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .executor.v1.ProcessTransactionResponseV2 responses = 11;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->_impl_.responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .executor.v1.LogV2 logs = 12;
  total_size += 1UL * this->_internal_logs_size();
  for (const auto& msg : this->_impl_.logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes parent_hash = 1;
  if (!this->_internal_parent_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_parent_hash());
  }

  // string coinbase = 2;
  if (!this->_internal_coinbase().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_coinbase());
  }

  // bytes ger = 6;
  if (!this->_internal_ger().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ger());
  }

  // bytes block_hash_l1 = 7;
  if (!this->_internal_block_hash_l1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_hash_l1());
  }

  // bytes block_info_root = 9;
  if (!this->_internal_block_info_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_info_root());
  }

  // bytes block_hash = 10;
  if (!this->_internal_block_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_hash());
  }

  // uint64 gas_limit = 3;
  if (this->_internal_gas_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gas_limit());
  }

  // uint64 block_number = 4;
  if (this->_internal_block_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_block_number());
  }

  // uint64 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // uint64 gas_used = 8;
  if (this->_internal_gas_used() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gas_used());
  }

  // .executor.v1.RomError error = 13;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessBlockResponseV2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcessBlockResponseV2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessBlockResponseV2::GetClassData() const { return &_class_data_; }


void ProcessBlockResponseV2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcessBlockResponseV2*>(&to_msg);
  auto& from = static_cast<const ProcessBlockResponseV2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.ProcessBlockResponseV2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.responses_.MergeFrom(from._impl_.responses_);
  _this->_impl_.logs_.MergeFrom(from._impl_.logs_);
  if (!from._internal_parent_hash().empty()) {
    _this->_internal_set_parent_hash(from._internal_parent_hash());
  }
  if (!from._internal_coinbase().empty()) {
    _this->_internal_set_coinbase(from._internal_coinbase());
  }
  if (!from._internal_ger().empty()) {
    _this->_internal_set_ger(from._internal_ger());
  }
  if (!from._internal_block_hash_l1().empty()) {
    _this->_internal_set_block_hash_l1(from._internal_block_hash_l1());
  }
  if (!from._internal_block_info_root().empty()) {
    _this->_internal_set_block_info_root(from._internal_block_info_root());
  }
  if (!from._internal_block_hash().empty()) {
    _this->_internal_set_block_hash(from._internal_block_hash());
  }
  if (from._internal_gas_limit() != 0) {
    _this->_internal_set_gas_limit(from._internal_gas_limit());
  }
  if (from._internal_block_number() != 0) {
    _this->_internal_set_block_number(from._internal_block_number());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_gas_used() != 0) {
    _this->_internal_set_gas_used(from._internal_gas_used());
  }
  if (from._internal_error() != 0) {
    _this->_internal_set_error(from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessBlockResponseV2::CopyFrom(const ProcessBlockResponseV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.ProcessBlockResponseV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessBlockResponseV2::IsInitialized() const {
  return true;
}

void ProcessBlockResponseV2::InternalSwap(ProcessBlockResponseV2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.responses_.InternalSwap(&other->_impl_.responses_);
  _impl_.logs_.InternalSwap(&other->_impl_.logs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.parent_hash_, lhs_arena,
      &other->_impl_.parent_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.coinbase_, lhs_arena,
      &other->_impl_.coinbase_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ger_, lhs_arena,
      &other->_impl_.ger_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.block_hash_l1_, lhs_arena,
      &other->_impl_.block_hash_l1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.block_info_root_, lhs_arena,
      &other->_impl_.block_info_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.block_hash_, lhs_arena,
      &other->_impl_.block_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessBlockResponseV2, _impl_.error_)
      + sizeof(ProcessBlockResponseV2::_impl_.error_)
      - PROTOBUF_FIELD_OFFSET(ProcessBlockResponseV2, _impl_.gas_limit_)>(
          reinterpret_cast<char*>(&_impl_.gas_limit_),
          reinterpret_cast<char*>(&other->_impl_.gas_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessBlockResponseV2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[42]);
}

// ===================================================================

class ProcessTransactionResponseV2::_Internal {
 public:
  static const ::executor::v1::FullTraceV2& full_trace(const ProcessTransactionResponseV2* msg);
};

const ::executor::v1::FullTraceV2&
ProcessTransactionResponseV2::_Internal::full_trace(const ProcessTransactionResponseV2* msg) {
  return *msg->_impl_.full_trace_;
}
ProcessTransactionResponseV2::ProcessTransactionResponseV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:executor.v1.ProcessTransactionResponseV2)
}
ProcessTransactionResponseV2::ProcessTransactionResponseV2(const ProcessTransactionResponseV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcessTransactionResponseV2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.logs_){from._impl_.logs_}
    , decltype(_impl_.tx_hash_){}
    , decltype(_impl_.tx_hash_l2_){}
    , decltype(_impl_.rlp_tx_){}
    , decltype(_impl_.block_hash_){}
    , decltype(_impl_.return_value_){}
    , decltype(_impl_.create_address_){}
    , decltype(_impl_.state_root_){}
    , decltype(_impl_.effective_gas_price_){}
    , decltype(_impl_.full_trace_){nullptr}
    , decltype(_impl_.block_number_){}
    , decltype(_impl_.gas_left_){}
    , decltype(_impl_.gas_used_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.error_){}
    , decltype(_impl_.cumulative_gas_used_){}
    , decltype(_impl_.gas_refunded_){}
    , decltype(_impl_.effective_percentage_){}
    , decltype(_impl_.has_gasprice_opcode_){}
    , decltype(_impl_.has_balance_opcode_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tx_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx_hash().empty()) {
    _this->_impl_.tx_hash_.Set(from._internal_tx_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tx_hash_l2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_hash_l2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx_hash_l2().empty()) {
    _this->_impl_.tx_hash_l2_.Set(from._internal_tx_hash_l2(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rlp_tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rlp_tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rlp_tx().empty()) {
    _this->_impl_.rlp_tx_.Set(from._internal_rlp_tx(), 
      _this->GetArenaForAllocation());
  }
  _impl_.block_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_hash().empty()) {
    _this->_impl_.block_hash_.Set(from._internal_block_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.return_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.return_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_return_value().empty()) {
    _this->_impl_.return_value_.Set(from._internal_return_value(), 
      _this->GetArenaForAllocation());
  }
  _impl_.create_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.create_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_create_address().empty()) {
    _this->_impl_.create_address_.Set(from._internal_create_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_state_root().empty()) {
    _this->_impl_.state_root_.Set(from._internal_state_root(), 
      _this->GetArenaForAllocation());
  }
  _impl_.effective_gas_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.effective_gas_price_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_effective_gas_price().empty()) {
    _this->_impl_.effective_gas_price_.Set(from._internal_effective_gas_price(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_full_trace()) {
    _this->_impl_.full_trace_ = new ::executor::v1::FullTraceV2(*from._impl_.full_trace_);
  }
  ::memcpy(&_impl_.block_number_, &from._impl_.block_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.block_number_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.ProcessTransactionResponseV2)
}

inline void ProcessTransactionResponseV2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.logs_){arena}
    , decltype(_impl_.tx_hash_){}
    , decltype(_impl_.tx_hash_l2_){}
    , decltype(_impl_.rlp_tx_){}
    , decltype(_impl_.block_hash_){}
    , decltype(_impl_.return_value_){}
    , decltype(_impl_.create_address_){}
    , decltype(_impl_.state_root_){}
    , decltype(_impl_.effective_gas_price_){}
    , decltype(_impl_.full_trace_){nullptr}
    , decltype(_impl_.block_number_){uint64_t{0u}}
    , decltype(_impl_.gas_left_){uint64_t{0u}}
    , decltype(_impl_.gas_used_){uint64_t{0u}}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.error_){0}
    , decltype(_impl_.cumulative_gas_used_){uint64_t{0u}}
    , decltype(_impl_.gas_refunded_){uint64_t{0u}}
    , decltype(_impl_.effective_percentage_){0u}
    , decltype(_impl_.has_gasprice_opcode_){0u}
    , decltype(_impl_.has_balance_opcode_){0u}
    , decltype(_impl_.status_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tx_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tx_hash_l2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_hash_l2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rlp_tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rlp_tx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.block_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.return_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.return_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.create_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.create_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.state_root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.effective_gas_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.effective_gas_price_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProcessTransactionResponseV2::~ProcessTransactionResponseV2() {
  // @@protoc_insertion_point(destructor:executor.v1.ProcessTransactionResponseV2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcessTransactionResponseV2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.logs_.~RepeatedPtrField();
  _impl_.tx_hash_.Destroy();
  _impl_.tx_hash_l2_.Destroy();
  _impl_.rlp_tx_.Destroy();
  _impl_.block_hash_.Destroy();
  _impl_.return_value_.Destroy();
  _impl_.create_address_.Destroy();
  _impl_.state_root_.Destroy();
  _impl_.effective_gas_price_.Destroy();
  if (this != internal_default_instance()) delete _impl_.full_trace_;
}

void ProcessTransactionResponseV2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessTransactionResponseV2::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.ProcessTransactionResponseV2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.logs_.Clear();
  _impl_.tx_hash_.ClearToEmpty();
  _impl_.tx_hash_l2_.ClearToEmpty();
  _impl_.rlp_tx_.ClearToEmpty();
  _impl_.block_hash_.ClearToEmpty();
  _impl_.return_value_.ClearToEmpty();
  _impl_.create_address_.ClearToEmpty();
  _impl_.state_root_.ClearToEmpty();
  _impl_.effective_gas_price_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.full_trace_ != nullptr) {
    delete _impl_.full_trace_;
  }
  _impl_.full_trace_ = nullptr;
  ::memset(&_impl_.block_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.block_number_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessTransactionResponseV2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes tx_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tx_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes tx_hash_l2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tx_hash_l2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes rlp_tx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_rlp_tx();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes block_hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_block_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 block_number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.block_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes return_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_return_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gas_left = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.gas_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gas_used = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.gas_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 cumulative_gas_used = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.cumulative_gas_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gas_refunded = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.gas_refunded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .executor.v1.RomError error = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::executor::v1::RomError>(val));
        } else
          goto handle_unusual;
        continue;
      // string create_address = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_create_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.ProcessTransactionResponseV2.create_address"));
        } else
          goto handle_unusual;
        continue;
      // bytes state_root = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_state_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .executor.v1.LogV2 logs = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .executor.v1.FullTraceV2 full_trace = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_full_trace(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string effective_gas_price = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_effective_gas_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.ProcessTransactionResponseV2.effective_gas_price"));
        } else
          goto handle_unusual;
        continue;
      // uint32 effective_percentage = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.effective_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 has_gasprice_opcode = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.has_gasprice_opcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 has_balance_opcode = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.has_balance_opcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 status = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessTransactionResponseV2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.ProcessTransactionResponseV2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes tx_hash = 1;
  if (!this->_internal_tx_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_tx_hash(), target);
  }

  // bytes tx_hash_l2 = 2;
  if (!this->_internal_tx_hash_l2().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_tx_hash_l2(), target);
  }

  // bytes rlp_tx = 3;
  if (!this->_internal_rlp_tx().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_rlp_tx(), target);
  }

  // bytes block_hash = 4;
  if (!this->_internal_block_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_block_hash(), target);
  }

  // uint64 block_number = 5;
  if (this->_internal_block_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_block_number(), target);
  }

  // uint32 type = 6;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_type(), target);
  }

  // bytes return_value = 7;
  if (!this->_internal_return_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_return_value(), target);
  }

  // uint64 gas_left = 8;
  if (this->_internal_gas_left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_gas_left(), target);
  }

  // uint64 gas_used = 9;
  if (this->_internal_gas_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_gas_used(), target);
  }

  // uint64 cumulative_gas_used = 10;
  if (this->_internal_cumulative_gas_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_cumulative_gas_used(), target);
  }

  // uint64 gas_refunded = 11;
  if (this->_internal_gas_refunded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_gas_refunded(), target);
  }

  // .executor.v1.RomError error = 12;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_error(), target);
  }

  // string create_address = 13;
  if (!this->_internal_create_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_address().data(), static_cast<int>(this->_internal_create_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessTransactionResponseV2.create_address");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_create_address(), target);
  }

  // bytes state_root = 14;
  if (!this->_internal_state_root().empty()) {
    target = stream->WriteBytesMaybeAliased(
        14, this->_internal_state_root(), target);
  }

  // repeated .executor.v1.LogV2 logs = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_logs_size()); i < n; i++) {
    const auto& repfield = this->_internal_logs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .executor.v1.FullTraceV2 full_trace = 16;
  if (this->_internal_has_full_trace()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::full_trace(this),
        _Internal::full_trace(this).GetCachedSize(), target, stream);
  }

  // string effective_gas_price = 17;
  if (!this->_internal_effective_gas_price().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_effective_gas_price().data(), static_cast<int>(this->_internal_effective_gas_price().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessTransactionResponseV2.effective_gas_price");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_effective_gas_price(), target);
  }

  // uint32 effective_percentage = 18;
  if (this->_internal_effective_percentage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_effective_percentage(), target);
  }

  // uint32 has_gasprice_opcode = 19;
  if (this->_internal_has_gasprice_opcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_has_gasprice_opcode(), target);
  }

  // uint32 has_balance_opcode = 20;
  if (this->_internal_has_balance_opcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_has_balance_opcode(), target);
  }

  // uint32 status = 21;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.ProcessTransactionResponseV2)
  return target;
}

size_t ProcessTransactionResponseV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.ProcessTransactionResponseV2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .executor.v1.LogV2 logs = 15;
  total_size += 1UL * this->_internal_logs_size();
  for (const auto& msg : this->_impl_.logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes tx_hash = 1;
  if (!this->_internal_tx_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx_hash());
  }

  // bytes tx_hash_l2 = 2;
  if (!this->_internal_tx_hash_l2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx_hash_l2());
  }

  // bytes rlp_tx = 3;
  if (!this->_internal_rlp_tx().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rlp_tx());
  }

  // bytes block_hash = 4;
  if (!this->_internal_block_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_hash());
  }

  // bytes return_value = 7;
  if (!this->_internal_return_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_return_value());
  }

  // string create_address = 13;
  if (!this->_internal_create_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_address());
  }

  // bytes state_root = 14;
  if (!this->_internal_state_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_state_root());
  }

  // string effective_gas_price = 17;
  if (!this->_internal_effective_gas_price().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_effective_gas_price());
  }

  // .executor.v1.FullTraceV2 full_trace = 16;
  if (this->_internal_has_full_trace()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.full_trace_);
  }

  // uint64 block_number = 5;
  if (this->_internal_block_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_block_number());
  }

  // uint64 gas_left = 8;
  if (this->_internal_gas_left() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gas_left());
  }

  // uint64 gas_used = 9;
  if (this->_internal_gas_used() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gas_used());
  }

  // uint32 type = 6;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // .executor.v1.RomError error = 12;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
  }

  // uint64 cumulative_gas_used = 10;
  if (this->_internal_cumulative_gas_used() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_cumulative_gas_used());
  }

  // uint64 gas_refunded = 11;
  if (this->_internal_gas_refunded() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gas_refunded());
  }

  // uint32 effective_percentage = 18;
  if (this->_internal_effective_percentage() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_effective_percentage());
  }

  // uint32 has_gasprice_opcode = 19;
  if (this->_internal_has_gasprice_opcode() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_has_gasprice_opcode());
  }

  // uint32 has_balance_opcode = 20;
  if (this->_internal_has_balance_opcode() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_has_balance_opcode());
  }

  // uint32 status = 21;
  if (this->_internal_status() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessTransactionResponseV2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcessTransactionResponseV2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessTransactionResponseV2::GetClassData() const { return &_class_data_; }


void ProcessTransactionResponseV2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcessTransactionResponseV2*>(&to_msg);
  auto& from = static_cast<const ProcessTransactionResponseV2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.ProcessTransactionResponseV2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.logs_.MergeFrom(from._impl_.logs_);
  if (!from._internal_tx_hash().empty()) {
    _this->_internal_set_tx_hash(from._internal_tx_hash());
  }
  if (!from._internal_tx_hash_l2().empty()) {
    _this->_internal_set_tx_hash_l2(from._internal_tx_hash_l2());
  }
  if (!from._internal_rlp_tx().empty()) {
    _this->_internal_set_rlp_tx(from._internal_rlp_tx());
  }
  if (!from._internal_block_hash().empty()) {
    _this->_internal_set_block_hash(from._internal_block_hash());
  }
  if (!from._internal_return_value().empty()) {
    _this->_internal_set_return_value(from._internal_return_value());
  }
  if (!from._internal_create_address().empty()) {
    _this->_internal_set_create_address(from._internal_create_address());
  }
  if (!from._internal_state_root().empty()) {
    _this->_internal_set_state_root(from._internal_state_root());
  }
  if (!from._internal_effective_gas_price().empty()) {
    _this->_internal_set_effective_gas_price(from._internal_effective_gas_price());
  }
  if (from._internal_has_full_trace()) {
    _this->_internal_mutable_full_trace()->::executor::v1::FullTraceV2::MergeFrom(
        from._internal_full_trace());
  }
  if (from._internal_block_number() != 0) {
    _this->_internal_set_block_number(from._internal_block_number());
  }
  if (from._internal_gas_left() != 0) {
    _this->_internal_set_gas_left(from._internal_gas_left());
  }
  if (from._internal_gas_used() != 0) {
    _this->_internal_set_gas_used(from._internal_gas_used());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_error() != 0) {
    _this->_internal_set_error(from._internal_error());
  }
  if (from._internal_cumulative_gas_used() != 0) {
    _this->_internal_set_cumulative_gas_used(from._internal_cumulative_gas_used());
  }
  if (from._internal_gas_refunded() != 0) {
    _this->_internal_set_gas_refunded(from._internal_gas_refunded());
  }
  if (from._internal_effective_percentage() != 0) {
    _this->_internal_set_effective_percentage(from._internal_effective_percentage());
  }
  if (from._internal_has_gasprice_opcode() != 0) {
    _this->_internal_set_has_gasprice_opcode(from._internal_has_gasprice_opcode());
  }
  if (from._internal_has_balance_opcode() != 0) {
    _this->_internal_set_has_balance_opcode(from._internal_has_balance_opcode());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessTransactionResponseV2::CopyFrom(const ProcessTransactionResponseV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.ProcessTransactionResponseV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessTransactionResponseV2::IsInitialized() const {
  return true;
}

void ProcessTransactionResponseV2::InternalSwap(ProcessTransactionResponseV2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.logs_.InternalSwap(&other->_impl_.logs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tx_hash_, lhs_arena,
      &other->_impl_.tx_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tx_hash_l2_, lhs_arena,
      &other->_impl_.tx_hash_l2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rlp_tx_, lhs_arena,
      &other->_impl_.rlp_tx_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.block_hash_, lhs_arena,
      &other->_impl_.block_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.return_value_, lhs_arena,
      &other->_impl_.return_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.create_address_, lhs_arena,
      &other->_impl_.create_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.state_root_, lhs_arena,
      &other->_impl_.state_root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.effective_gas_price_, lhs_arena,
      &other->_impl_.effective_gas_price_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessTransactionResponseV2, _impl_.status_)
      + sizeof(ProcessTransactionResponseV2::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(ProcessTransactionResponseV2, _impl_.full_trace_)>(
          reinterpret_cast<char*>(&_impl_.full_trace_),
          reinterpret_cast<char*>(&other->_impl_.full_trace_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessTransactionResponseV2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[43]);
}

// ===================================================================

class LogV2::_Internal {
 public:
};

LogV2::LogV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:executor.v1.LogV2)
}
LogV2::LogV2(const LogV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogV2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.topics_){from._impl_.topics_}
    , decltype(_impl_.address_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.tx_hash_){}
    , decltype(_impl_.tx_hash_l2_){}
    , decltype(_impl_.block_hash_){}
    , decltype(_impl_.block_number_){}
    , decltype(_impl_.tx_index_){}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tx_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx_hash().empty()) {
    _this->_impl_.tx_hash_.Set(from._internal_tx_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tx_hash_l2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_hash_l2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx_hash_l2().empty()) {
    _this->_impl_.tx_hash_l2_.Set(from._internal_tx_hash_l2(), 
      _this->GetArenaForAllocation());
  }
  _impl_.block_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_hash().empty()) {
    _this->_impl_.block_hash_.Set(from._internal_block_hash(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.block_number_, &from._impl_.block_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.index_) -
    reinterpret_cast<char*>(&_impl_.block_number_)) + sizeof(_impl_.index_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.LogV2)
}

inline void LogV2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.topics_){arena}
    , decltype(_impl_.address_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.tx_hash_){}
    , decltype(_impl_.tx_hash_l2_){}
    , decltype(_impl_.block_hash_){}
    , decltype(_impl_.block_number_){uint64_t{0u}}
    , decltype(_impl_.tx_index_){0u}
    , decltype(_impl_.index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tx_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tx_hash_l2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_hash_l2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.block_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.block_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogV2::~LogV2() {
  // @@protoc_insertion_point(destructor:executor.v1.LogV2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogV2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.topics_.~RepeatedPtrField();
  _impl_.address_.Destroy();
  _impl_.data_.Destroy();
  _impl_.tx_hash_.Destroy();
  _impl_.tx_hash_l2_.Destroy();
  _impl_.block_hash_.Destroy();
}

void LogV2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogV2::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.LogV2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.topics_.Clear();
  _impl_.address_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _impl_.tx_hash_.ClearToEmpty();
  _impl_.tx_hash_l2_.ClearToEmpty();
  _impl_.block_hash_.ClearToEmpty();
  ::memset(&_impl_.block_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.index_) -
      reinterpret_cast<char*>(&_impl_.block_number_)) + sizeof(_impl_.index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogV2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "executor.v1.LogV2.address"));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes topics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_topics();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 block_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.block_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes tx_hash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_tx_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes tx_hash_l2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_tx_hash_l2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tx_index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.tx_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes block_hash = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_block_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 index = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogV2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.LogV2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.LogV2.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // repeated bytes topics = 2;
  for (int i = 0, n = this->_internal_topics_size(); i < n; i++) {
    const auto& s = this->_internal_topics(i);
    target = stream->WriteBytes(2, s, target);
  }

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  // uint64 block_number = 4;
  if (this->_internal_block_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_block_number(), target);
  }

  // bytes tx_hash = 5;
  if (!this->_internal_tx_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_tx_hash(), target);
  }

  // bytes tx_hash_l2 = 6;
  if (!this->_internal_tx_hash_l2().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_tx_hash_l2(), target);
  }

  // uint32 tx_index = 7;
  if (this->_internal_tx_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_tx_index(), target);
  }

  // bytes block_hash = 8;
  if (!this->_internal_block_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_block_hash(), target);
  }

  // uint32 index = 9;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.LogV2)
  return target;
}

size_t LogV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.LogV2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes topics = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.topics_.size());
  for (int i = 0, n = _impl_.topics_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.topics_.Get(i));
  }

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // bytes tx_hash = 5;
  if (!this->_internal_tx_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx_hash());
  }

  // bytes tx_hash_l2 = 6;
  if (!this->_internal_tx_hash_l2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx_hash_l2());
  }

  // bytes block_hash = 8;
  if (!this->_internal_block_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_hash());
  }

  // uint64 block_number = 4;
  if (this->_internal_block_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_block_number());
  }

  // uint32 tx_index = 7;
  if (this->_internal_tx_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tx_index());
  }

  // uint32 index = 9;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogV2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogV2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogV2::GetClassData() const { return &_class_data_; }


void LogV2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogV2*>(&to_msg);
  auto& from = static_cast<const LogV2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.LogV2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.topics_.MergeFrom(from._impl_.topics_);
  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_tx_hash().empty()) {
    _this->_internal_set_tx_hash(from._internal_tx_hash());
  }
  if (!from._internal_tx_hash_l2().empty()) {
    _this->_internal_set_tx_hash_l2(from._internal_tx_hash_l2());
  }
  if (!from._internal_block_hash().empty()) {
    _this->_internal_set_block_hash(from._internal_block_hash());
  }
  if (from._internal_block_number() != 0) {
    _this->_internal_set_block_number(from._internal_block_number());
  }
  if (from._internal_tx_index() != 0) {
    _this->_internal_set_tx_index(from._internal_tx_index());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogV2::CopyFrom(const LogV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.LogV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogV2::IsInitialized() const {
  return true;
}

void LogV2::InternalSwap(LogV2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.topics_.InternalSwap(&other->_impl_.topics_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tx_hash_, lhs_arena,
      &other->_impl_.tx_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tx_hash_l2_, lhs_arena,
      &other->_impl_.tx_hash_l2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.block_hash_, lhs_arena,
      &other->_impl_.block_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogV2, _impl_.index_)
      + sizeof(LogV2::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(LogV2, _impl_.block_number_)>(
          reinterpret_cast<char*>(&_impl_.block_number_),
          reinterpret_cast<char*>(&other->_impl_.block_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogV2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_executor_2eproto_getter, &descriptor_table_executor_2eproto_once,
      file_level_metadata_executor_2eproto[44]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace executor
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessBatchRequest_DbEntry_DoNotUse*
Arena::CreateMaybeMessage< ::executor::v1::ProcessBatchRequest_DbEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessBatchRequest_DbEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse*
Arena::CreateMaybeMessage< ::executor::v1::ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessBatchRequest_StateOverrideEntry_DoNotUse*
Arena::CreateMaybeMessage< ::executor::v1::ProcessBatchRequest_StateOverrideEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessBatchRequest_StateOverrideEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessBatchRequest*
Arena::CreateMaybeMessage< ::executor::v1::ProcessBatchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessBatchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::executor::v1::ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessBatchResponse*
Arena::CreateMaybeMessage< ::executor::v1::ProcessBatchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessBatchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::GetFlushStatusResponse*
Arena::CreateMaybeMessage< ::executor::v1::GetFlushStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::GetFlushStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::TraceConfig*
Arena::CreateMaybeMessage< ::executor::v1::TraceConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::TraceConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::OverrideAccount_StateEntry_DoNotUse*
Arena::CreateMaybeMessage< ::executor::v1::OverrideAccount_StateEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::OverrideAccount_StateEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::OverrideAccount_StateDiffEntry_DoNotUse*
Arena::CreateMaybeMessage< ::executor::v1::OverrideAccount_StateDiffEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::OverrideAccount_StateDiffEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::OverrideAccount*
Arena::CreateMaybeMessage< ::executor::v1::OverrideAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::OverrideAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::InfoReadWrite*
Arena::CreateMaybeMessage< ::executor::v1::InfoReadWrite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::InfoReadWrite >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::FullTrace*
Arena::CreateMaybeMessage< ::executor::v1::FullTrace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::FullTrace >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::TransactionContext*
Arena::CreateMaybeMessage< ::executor::v1::TransactionContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::TransactionContext >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::TransactionStep_StorageEntry_DoNotUse*
Arena::CreateMaybeMessage< ::executor::v1::TransactionStep_StorageEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::TransactionStep_StorageEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::TransactionStep*
Arena::CreateMaybeMessage< ::executor::v1::TransactionStep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::TransactionStep >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::Contract*
Arena::CreateMaybeMessage< ::executor::v1::Contract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::Contract >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessTransactionResponse*
Arena::CreateMaybeMessage< ::executor::v1::ProcessTransactionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessTransactionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::Log*
Arena::CreateMaybeMessage< ::executor::v1::Log >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::Log >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::executor::v1::ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessBatchRequestV2_DbEntry_DoNotUse*
Arena::CreateMaybeMessage< ::executor::v1::ProcessBatchRequestV2_DbEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessBatchRequestV2_DbEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse*
Arena::CreateMaybeMessage< ::executor::v1::ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessBatchRequestV2_StateOverrideEntry_DoNotUse*
Arena::CreateMaybeMessage< ::executor::v1::ProcessBatchRequestV2_StateOverrideEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessBatchRequestV2_StateOverrideEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessBatchRequestV2*
Arena::CreateMaybeMessage< ::executor::v1::ProcessBatchRequestV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessBatchRequestV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessStatelessBatchRequestV2_L1InfoTreeIndexMinTimestampEntry_DoNotUse*
Arena::CreateMaybeMessage< ::executor::v1::ProcessStatelessBatchRequestV2_L1InfoTreeIndexMinTimestampEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessStatelessBatchRequestV2_L1InfoTreeIndexMinTimestampEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessStatelessBatchRequestV2*
Arena::CreateMaybeMessage< ::executor::v1::ProcessStatelessBatchRequestV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessStatelessBatchRequestV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::L1DataV2*
Arena::CreateMaybeMessage< ::executor::v1::L1DataV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::L1DataV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::DebugV2*
Arena::CreateMaybeMessage< ::executor::v1::DebugV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::DebugV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::executor::v1::ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessBatchResponseV2*
Arena::CreateMaybeMessage< ::executor::v1::ProcessBatchResponseV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessBatchResponseV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ResponseDebug*
Arena::CreateMaybeMessage< ::executor::v1::ResponseDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ResponseDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::TraceConfigV2*
Arena::CreateMaybeMessage< ::executor::v1::TraceConfigV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::TraceConfigV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::OverrideAccountV2_StateEntry_DoNotUse*
Arena::CreateMaybeMessage< ::executor::v1::OverrideAccountV2_StateEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::OverrideAccountV2_StateEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::OverrideAccountV2_StateDiffEntry_DoNotUse*
Arena::CreateMaybeMessage< ::executor::v1::OverrideAccountV2_StateDiffEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::OverrideAccountV2_StateDiffEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::OverrideAccountV2*
Arena::CreateMaybeMessage< ::executor::v1::OverrideAccountV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::OverrideAccountV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::InfoReadWriteV2_ScStorageEntry_DoNotUse*
Arena::CreateMaybeMessage< ::executor::v1::InfoReadWriteV2_ScStorageEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::InfoReadWriteV2_ScStorageEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::InfoReadWriteV2*
Arena::CreateMaybeMessage< ::executor::v1::InfoReadWriteV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::InfoReadWriteV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::FullTraceV2*
Arena::CreateMaybeMessage< ::executor::v1::FullTraceV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::FullTraceV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::TransactionContextV2*
Arena::CreateMaybeMessage< ::executor::v1::TransactionContextV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::TransactionContextV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::TransactionStepV2_StorageEntry_DoNotUse*
Arena::CreateMaybeMessage< ::executor::v1::TransactionStepV2_StorageEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::TransactionStepV2_StorageEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::TransactionStepV2*
Arena::CreateMaybeMessage< ::executor::v1::TransactionStepV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::TransactionStepV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ContractV2*
Arena::CreateMaybeMessage< ::executor::v1::ContractV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ContractV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessBlockResponseV2*
Arena::CreateMaybeMessage< ::executor::v1::ProcessBlockResponseV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessBlockResponseV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessTransactionResponseV2*
Arena::CreateMaybeMessage< ::executor::v1::ProcessTransactionResponseV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessTransactionResponseV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::LogV2*
Arena::CreateMaybeMessage< ::executor::v1::LogV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::LogV2 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
