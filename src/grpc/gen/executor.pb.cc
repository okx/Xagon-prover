// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: executor.proto

#include "executor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Contract_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractV2_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DebugV2_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FullTrace_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FullTraceV2_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InfoReadWrite_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InfoReadWriteV2_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_L1DataV2_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Log_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogV2_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OverrideAccount_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OverrideAccount_StateDiffEntry_DoNotUse_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OverrideAccount_StateEntry_DoNotUse_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OverrideAccountV2_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OverrideAccountV2_StateDiffEntry_DoNotUse_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OverrideAccountV2_StateEntry_DoNotUse_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessBatchRequest_DbEntry_DoNotUse_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProcessBatchRequest_StateOverrideEntry_DoNotUse_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessBatchRequestV2_DbEntry_DoNotUse_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProcessBatchRequestV2_StateOverrideEntry_DoNotUse_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProcessBlockResponseV2_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProcessTransactionResponse_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProcessTransactionResponseV2_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceConfig_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceConfigV2_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionContext_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionContextV2_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TransactionStep_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionStep_StorageEntry_DoNotUse_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TransactionStepV2_executor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_executor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionStepV2_StorageEntry_DoNotUse_executor_2eproto;
namespace executor {
namespace v1 {
class ProcessBatchRequest_DbEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessBatchRequest_DbEntry_DoNotUse> _instance;
} _ProcessBatchRequest_DbEntry_DoNotUse_default_instance_;
class ProcessBatchRequest_ContractsBytecodeEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse> _instance;
} _ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse_default_instance_;
class ProcessBatchRequest_StateOverrideEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessBatchRequest_StateOverrideEntry_DoNotUse> _instance;
} _ProcessBatchRequest_StateOverrideEntry_DoNotUse_default_instance_;
class ProcessBatchRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessBatchRequest> _instance;
} _ProcessBatchRequest_default_instance_;
class ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse> _instance;
} _ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse_default_instance_;
class ProcessBatchResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessBatchResponse> _instance;
} _ProcessBatchResponse_default_instance_;
class GetFlushStatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetFlushStatusResponse> _instance;
} _GetFlushStatusResponse_default_instance_;
class TraceConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TraceConfig> _instance;
} _TraceConfig_default_instance_;
class OverrideAccount_StateEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OverrideAccount_StateEntry_DoNotUse> _instance;
} _OverrideAccount_StateEntry_DoNotUse_default_instance_;
class OverrideAccount_StateDiffEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OverrideAccount_StateDiffEntry_DoNotUse> _instance;
} _OverrideAccount_StateDiffEntry_DoNotUse_default_instance_;
class OverrideAccountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OverrideAccount> _instance;
} _OverrideAccount_default_instance_;
class InfoReadWriteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InfoReadWrite> _instance;
} _InfoReadWrite_default_instance_;
class FullTraceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FullTrace> _instance;
} _FullTrace_default_instance_;
class TransactionContextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionContext> _instance;
} _TransactionContext_default_instance_;
class TransactionStep_StorageEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionStep_StorageEntry_DoNotUse> _instance;
} _TransactionStep_StorageEntry_DoNotUse_default_instance_;
class TransactionStepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionStep> _instance;
} _TransactionStep_default_instance_;
class ContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Contract> _instance;
} _Contract_default_instance_;
class ProcessTransactionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessTransactionResponse> _instance;
} _ProcessTransactionResponse_default_instance_;
class LogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Log> _instance;
} _Log_default_instance_;
class ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse> _instance;
} _ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse_default_instance_;
class ProcessBatchRequestV2_DbEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessBatchRequestV2_DbEntry_DoNotUse> _instance;
} _ProcessBatchRequestV2_DbEntry_DoNotUse_default_instance_;
class ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse> _instance;
} _ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse_default_instance_;
class ProcessBatchRequestV2_StateOverrideEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessBatchRequestV2_StateOverrideEntry_DoNotUse> _instance;
} _ProcessBatchRequestV2_StateOverrideEntry_DoNotUse_default_instance_;
class ProcessBatchRequestV2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessBatchRequestV2> _instance;
} _ProcessBatchRequestV2_default_instance_;
class ProcessStatelessBatchRequestV2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessStatelessBatchRequestV2> _instance;
} _ProcessStatelessBatchRequestV2_default_instance_;
class L1DataV2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<L1DataV2> _instance;
} _L1DataV2_default_instance_;
class DebugV2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DebugV2> _instance;
} _DebugV2_default_instance_;
class ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse> _instance;
} _ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse_default_instance_;
class ProcessBatchResponseV2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessBatchResponseV2> _instance;
} _ProcessBatchResponseV2_default_instance_;
class TraceConfigV2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TraceConfigV2> _instance;
} _TraceConfigV2_default_instance_;
class OverrideAccountV2_StateEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OverrideAccountV2_StateEntry_DoNotUse> _instance;
} _OverrideAccountV2_StateEntry_DoNotUse_default_instance_;
class OverrideAccountV2_StateDiffEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OverrideAccountV2_StateDiffEntry_DoNotUse> _instance;
} _OverrideAccountV2_StateDiffEntry_DoNotUse_default_instance_;
class OverrideAccountV2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OverrideAccountV2> _instance;
} _OverrideAccountV2_default_instance_;
class InfoReadWriteV2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InfoReadWriteV2> _instance;
} _InfoReadWriteV2_default_instance_;
class FullTraceV2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FullTraceV2> _instance;
} _FullTraceV2_default_instance_;
class TransactionContextV2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionContextV2> _instance;
} _TransactionContextV2_default_instance_;
class TransactionStepV2_StorageEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionStepV2_StorageEntry_DoNotUse> _instance;
} _TransactionStepV2_StorageEntry_DoNotUse_default_instance_;
class TransactionStepV2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionStepV2> _instance;
} _TransactionStepV2_default_instance_;
class ContractV2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractV2> _instance;
} _ContractV2_default_instance_;
class ProcessBlockResponseV2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessBlockResponseV2> _instance;
} _ProcessBlockResponseV2_default_instance_;
class ProcessTransactionResponseV2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessTransactionResponseV2> _instance;
} _ProcessTransactionResponseV2_default_instance_;
class LogV2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogV2> _instance;
} _LogV2_default_instance_;
}  // namespace v1
}  // namespace executor
static void InitDefaultsscc_info_Contract_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_Contract_default_instance_;
    new (ptr) ::executor::v1::Contract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::Contract::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Contract_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Contract_executor_2eproto}, {}};

static void InitDefaultsscc_info_ContractV2_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_ContractV2_default_instance_;
    new (ptr) ::executor::v1::ContractV2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::ContractV2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractV2_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContractV2_executor_2eproto}, {}};

static void InitDefaultsscc_info_DebugV2_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_DebugV2_default_instance_;
    new (ptr) ::executor::v1::DebugV2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::DebugV2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DebugV2_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DebugV2_executor_2eproto}, {}};

static void InitDefaultsscc_info_FullTrace_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_FullTrace_default_instance_;
    new (ptr) ::executor::v1::FullTrace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::FullTrace::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FullTrace_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FullTrace_executor_2eproto}, {
      &scc_info_TransactionContext_executor_2eproto.base,
      &scc_info_TransactionStep_executor_2eproto.base,}};

static void InitDefaultsscc_info_FullTraceV2_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_FullTraceV2_default_instance_;
    new (ptr) ::executor::v1::FullTraceV2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::FullTraceV2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FullTraceV2_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FullTraceV2_executor_2eproto}, {
      &scc_info_TransactionContextV2_executor_2eproto.base,
      &scc_info_TransactionStepV2_executor_2eproto.base,}};

static void InitDefaultsscc_info_GetFlushStatusResponse_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_GetFlushStatusResponse_default_instance_;
    new (ptr) ::executor::v1::GetFlushStatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::GetFlushStatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetFlushStatusResponse_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetFlushStatusResponse_executor_2eproto}, {}};

static void InitDefaultsscc_info_InfoReadWrite_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_InfoReadWrite_default_instance_;
    new (ptr) ::executor::v1::InfoReadWrite();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::InfoReadWrite::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InfoReadWrite_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InfoReadWrite_executor_2eproto}, {}};

static void InitDefaultsscc_info_InfoReadWriteV2_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_InfoReadWriteV2_default_instance_;
    new (ptr) ::executor::v1::InfoReadWriteV2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::InfoReadWriteV2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InfoReadWriteV2_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InfoReadWriteV2_executor_2eproto}, {}};

static void InitDefaultsscc_info_L1DataV2_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_L1DataV2_default_instance_;
    new (ptr) ::executor::v1::L1DataV2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::L1DataV2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_L1DataV2_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_L1DataV2_executor_2eproto}, {}};

static void InitDefaultsscc_info_Log_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_Log_default_instance_;
    new (ptr) ::executor::v1::Log();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::Log::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Log_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Log_executor_2eproto}, {}};

static void InitDefaultsscc_info_LogV2_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_LogV2_default_instance_;
    new (ptr) ::executor::v1::LogV2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::LogV2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogV2_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogV2_executor_2eproto}, {}};

static void InitDefaultsscc_info_OverrideAccount_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_OverrideAccount_default_instance_;
    new (ptr) ::executor::v1::OverrideAccount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::OverrideAccount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OverrideAccount_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_OverrideAccount_executor_2eproto}, {
      &scc_info_OverrideAccount_StateEntry_DoNotUse_executor_2eproto.base,
      &scc_info_OverrideAccount_StateDiffEntry_DoNotUse_executor_2eproto.base,}};

static void InitDefaultsscc_info_OverrideAccount_StateDiffEntry_DoNotUse_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_OverrideAccount_StateDiffEntry_DoNotUse_default_instance_;
    new (ptr) ::executor::v1::OverrideAccount_StateDiffEntry_DoNotUse();
  }
  ::executor::v1::OverrideAccount_StateDiffEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OverrideAccount_StateDiffEntry_DoNotUse_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OverrideAccount_StateDiffEntry_DoNotUse_executor_2eproto}, {}};

static void InitDefaultsscc_info_OverrideAccount_StateEntry_DoNotUse_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_OverrideAccount_StateEntry_DoNotUse_default_instance_;
    new (ptr) ::executor::v1::OverrideAccount_StateEntry_DoNotUse();
  }
  ::executor::v1::OverrideAccount_StateEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OverrideAccount_StateEntry_DoNotUse_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OverrideAccount_StateEntry_DoNotUse_executor_2eproto}, {}};

static void InitDefaultsscc_info_OverrideAccountV2_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_OverrideAccountV2_default_instance_;
    new (ptr) ::executor::v1::OverrideAccountV2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::OverrideAccountV2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OverrideAccountV2_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_OverrideAccountV2_executor_2eproto}, {
      &scc_info_OverrideAccountV2_StateEntry_DoNotUse_executor_2eproto.base,
      &scc_info_OverrideAccountV2_StateDiffEntry_DoNotUse_executor_2eproto.base,}};

static void InitDefaultsscc_info_OverrideAccountV2_StateDiffEntry_DoNotUse_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_OverrideAccountV2_StateDiffEntry_DoNotUse_default_instance_;
    new (ptr) ::executor::v1::OverrideAccountV2_StateDiffEntry_DoNotUse();
  }
  ::executor::v1::OverrideAccountV2_StateDiffEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OverrideAccountV2_StateDiffEntry_DoNotUse_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OverrideAccountV2_StateDiffEntry_DoNotUse_executor_2eproto}, {}};

static void InitDefaultsscc_info_OverrideAccountV2_StateEntry_DoNotUse_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_OverrideAccountV2_StateEntry_DoNotUse_default_instance_;
    new (ptr) ::executor::v1::OverrideAccountV2_StateEntry_DoNotUse();
  }
  ::executor::v1::OverrideAccountV2_StateEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OverrideAccountV2_StateEntry_DoNotUse_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OverrideAccountV2_StateEntry_DoNotUse_executor_2eproto}, {}};

static void InitDefaultsscc_info_ProcessBatchRequest_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_ProcessBatchRequest_default_instance_;
    new (ptr) ::executor::v1::ProcessBatchRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::ProcessBatchRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ProcessBatchRequest_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ProcessBatchRequest_executor_2eproto}, {
      &scc_info_ProcessBatchRequest_DbEntry_DoNotUse_executor_2eproto.base,
      &scc_info_ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse_executor_2eproto.base,
      &scc_info_TraceConfig_executor_2eproto.base,
      &scc_info_ProcessBatchRequest_StateOverrideEntry_DoNotUse_executor_2eproto.base,}};

static void InitDefaultsscc_info_ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse_default_instance_;
    new (ptr) ::executor::v1::ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse();
  }
  ::executor::v1::ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse_executor_2eproto}, {}};

static void InitDefaultsscc_info_ProcessBatchRequest_DbEntry_DoNotUse_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_ProcessBatchRequest_DbEntry_DoNotUse_default_instance_;
    new (ptr) ::executor::v1::ProcessBatchRequest_DbEntry_DoNotUse();
  }
  ::executor::v1::ProcessBatchRequest_DbEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessBatchRequest_DbEntry_DoNotUse_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcessBatchRequest_DbEntry_DoNotUse_executor_2eproto}, {}};

static void InitDefaultsscc_info_ProcessBatchRequest_StateOverrideEntry_DoNotUse_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_ProcessBatchRequest_StateOverrideEntry_DoNotUse_default_instance_;
    new (ptr) ::executor::v1::ProcessBatchRequest_StateOverrideEntry_DoNotUse();
  }
  ::executor::v1::ProcessBatchRequest_StateOverrideEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProcessBatchRequest_StateOverrideEntry_DoNotUse_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProcessBatchRequest_StateOverrideEntry_DoNotUse_executor_2eproto}, {
      &scc_info_OverrideAccount_executor_2eproto.base,}};

static void InitDefaultsscc_info_ProcessBatchRequestV2_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_ProcessBatchRequestV2_default_instance_;
    new (ptr) ::executor::v1::ProcessBatchRequestV2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::ProcessBatchRequestV2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ProcessBatchRequestV2_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_ProcessBatchRequestV2_executor_2eproto}, {
      &scc_info_ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse_executor_2eproto.base,
      &scc_info_ProcessBatchRequestV2_DbEntry_DoNotUse_executor_2eproto.base,
      &scc_info_ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse_executor_2eproto.base,
      &scc_info_TraceConfigV2_executor_2eproto.base,
      &scc_info_ProcessBatchRequestV2_StateOverrideEntry_DoNotUse_executor_2eproto.base,
      &scc_info_DebugV2_executor_2eproto.base,}};

static void InitDefaultsscc_info_ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse_default_instance_;
    new (ptr) ::executor::v1::ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse();
  }
  ::executor::v1::ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse_executor_2eproto}, {}};

static void InitDefaultsscc_info_ProcessBatchRequestV2_DbEntry_DoNotUse_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_ProcessBatchRequestV2_DbEntry_DoNotUse_default_instance_;
    new (ptr) ::executor::v1::ProcessBatchRequestV2_DbEntry_DoNotUse();
  }
  ::executor::v1::ProcessBatchRequestV2_DbEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessBatchRequestV2_DbEntry_DoNotUse_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcessBatchRequestV2_DbEntry_DoNotUse_executor_2eproto}, {}};

static void InitDefaultsscc_info_ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse_default_instance_;
    new (ptr) ::executor::v1::ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse();
  }
  ::executor::v1::ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse_executor_2eproto}, {
      &scc_info_L1DataV2_executor_2eproto.base,}};

static void InitDefaultsscc_info_ProcessBatchRequestV2_StateOverrideEntry_DoNotUse_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_ProcessBatchRequestV2_StateOverrideEntry_DoNotUse_default_instance_;
    new (ptr) ::executor::v1::ProcessBatchRequestV2_StateOverrideEntry_DoNotUse();
  }
  ::executor::v1::ProcessBatchRequestV2_StateOverrideEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProcessBatchRequestV2_StateOverrideEntry_DoNotUse_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProcessBatchRequestV2_StateOverrideEntry_DoNotUse_executor_2eproto}, {
      &scc_info_OverrideAccountV2_executor_2eproto.base,}};

static void InitDefaultsscc_info_ProcessBatchResponse_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_ProcessBatchResponse_default_instance_;
    new (ptr) ::executor::v1::ProcessBatchResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::ProcessBatchResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProcessBatchResponse_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ProcessBatchResponse_executor_2eproto}, {
      &scc_info_ProcessTransactionResponse_executor_2eproto.base,
      &scc_info_ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse_executor_2eproto.base,}};

static void InitDefaultsscc_info_ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse_default_instance_;
    new (ptr) ::executor::v1::ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse();
  }
  ::executor::v1::ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse_executor_2eproto}, {
      &scc_info_InfoReadWrite_executor_2eproto.base,}};

static void InitDefaultsscc_info_ProcessBatchResponseV2_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_ProcessBatchResponseV2_default_instance_;
    new (ptr) ::executor::v1::ProcessBatchResponseV2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::ProcessBatchResponseV2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProcessBatchResponseV2_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ProcessBatchResponseV2_executor_2eproto}, {
      &scc_info_ProcessBlockResponseV2_executor_2eproto.base,
      &scc_info_ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse_executor_2eproto.base,}};

static void InitDefaultsscc_info_ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse_default_instance_;
    new (ptr) ::executor::v1::ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse();
  }
  ::executor::v1::ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse_executor_2eproto}, {
      &scc_info_InfoReadWriteV2_executor_2eproto.base,}};

static void InitDefaultsscc_info_ProcessBlockResponseV2_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_ProcessBlockResponseV2_default_instance_;
    new (ptr) ::executor::v1::ProcessBlockResponseV2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::ProcessBlockResponseV2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProcessBlockResponseV2_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ProcessBlockResponseV2_executor_2eproto}, {
      &scc_info_ProcessTransactionResponseV2_executor_2eproto.base,
      &scc_info_LogV2_executor_2eproto.base,}};

static void InitDefaultsscc_info_ProcessStatelessBatchRequestV2_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_ProcessStatelessBatchRequestV2_default_instance_;
    new (ptr) ::executor::v1::ProcessStatelessBatchRequestV2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::ProcessStatelessBatchRequestV2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessStatelessBatchRequestV2_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcessStatelessBatchRequestV2_executor_2eproto}, {}};

static void InitDefaultsscc_info_ProcessTransactionResponse_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_ProcessTransactionResponse_default_instance_;
    new (ptr) ::executor::v1::ProcessTransactionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::ProcessTransactionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProcessTransactionResponse_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ProcessTransactionResponse_executor_2eproto}, {
      &scc_info_Log_executor_2eproto.base,
      &scc_info_FullTrace_executor_2eproto.base,}};

static void InitDefaultsscc_info_ProcessTransactionResponseV2_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_ProcessTransactionResponseV2_default_instance_;
    new (ptr) ::executor::v1::ProcessTransactionResponseV2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::ProcessTransactionResponseV2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProcessTransactionResponseV2_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ProcessTransactionResponseV2_executor_2eproto}, {
      &scc_info_LogV2_executor_2eproto.base,
      &scc_info_FullTraceV2_executor_2eproto.base,}};

static void InitDefaultsscc_info_TraceConfig_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_TraceConfig_default_instance_;
    new (ptr) ::executor::v1::TraceConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::TraceConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceConfig_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TraceConfig_executor_2eproto}, {}};

static void InitDefaultsscc_info_TraceConfigV2_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_TraceConfigV2_default_instance_;
    new (ptr) ::executor::v1::TraceConfigV2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::TraceConfigV2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceConfigV2_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TraceConfigV2_executor_2eproto}, {}};

static void InitDefaultsscc_info_TransactionContext_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_TransactionContext_default_instance_;
    new (ptr) ::executor::v1::TransactionContext();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::TransactionContext::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionContext_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransactionContext_executor_2eproto}, {}};

static void InitDefaultsscc_info_TransactionContextV2_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_TransactionContextV2_default_instance_;
    new (ptr) ::executor::v1::TransactionContextV2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::TransactionContextV2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionContextV2_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransactionContextV2_executor_2eproto}, {}};

static void InitDefaultsscc_info_TransactionStep_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_TransactionStep_default_instance_;
    new (ptr) ::executor::v1::TransactionStep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::TransactionStep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TransactionStep_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TransactionStep_executor_2eproto}, {
      &scc_info_Contract_executor_2eproto.base,
      &scc_info_TransactionStep_StorageEntry_DoNotUse_executor_2eproto.base,}};

static void InitDefaultsscc_info_TransactionStep_StorageEntry_DoNotUse_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_TransactionStep_StorageEntry_DoNotUse_default_instance_;
    new (ptr) ::executor::v1::TransactionStep_StorageEntry_DoNotUse();
  }
  ::executor::v1::TransactionStep_StorageEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionStep_StorageEntry_DoNotUse_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransactionStep_StorageEntry_DoNotUse_executor_2eproto}, {}};

static void InitDefaultsscc_info_TransactionStepV2_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_TransactionStepV2_default_instance_;
    new (ptr) ::executor::v1::TransactionStepV2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::executor::v1::TransactionStepV2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TransactionStepV2_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TransactionStepV2_executor_2eproto}, {
      &scc_info_ContractV2_executor_2eproto.base,
      &scc_info_TransactionStepV2_StorageEntry_DoNotUse_executor_2eproto.base,}};

static void InitDefaultsscc_info_TransactionStepV2_StorageEntry_DoNotUse_executor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::executor::v1::_TransactionStepV2_StorageEntry_DoNotUse_default_instance_;
    new (ptr) ::executor::v1::TransactionStepV2_StorageEntry_DoNotUse();
  }
  ::executor::v1::TransactionStepV2_StorageEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionStepV2_StorageEntry_DoNotUse_executor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransactionStepV2_StorageEntry_DoNotUse_executor_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_executor_2eproto[42];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_executor_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_executor_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_executor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest_DbEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest_DbEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest_DbEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest_DbEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest_StateOverrideEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest_StateOverrideEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest_StateOverrideEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest_StateOverrideEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, old_state_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, old_acc_input_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, old_batch_num_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, chain_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, fork_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, batch_l2_data_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, global_exit_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, eth_timestamp_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, coinbase_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, update_merkle_tree_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, no_counters_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, from_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, db_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, contracts_bytecode_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, trace_config_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, context_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequest, state_override_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, new_state_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, new_acc_input_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, new_local_exit_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, new_batch_num_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, cnt_keccak_hashes_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, cnt_poseidon_hashes_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, cnt_poseidon_paddings_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, cnt_mem_aligns_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, cnt_arithmetics_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, cnt_binaries_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, cnt_steps_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, cumulative_gas_used_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, responses_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, error_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, read_write_addresses_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, flush_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, stored_flush_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, prover_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponse, fork_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::GetFlushStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::GetFlushStatusResponse, stored_flush_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::GetFlushStatusResponse, storing_flush_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::GetFlushStatusResponse, last_flush_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::GetFlushStatusResponse, pending_to_flush_nodes_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::GetFlushStatusResponse, pending_to_flush_program_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::GetFlushStatusResponse, storing_nodes_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::GetFlushStatusResponse, storing_program_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::GetFlushStatusResponse, prover_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::TraceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::TraceConfig, disable_storage_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TraceConfig, disable_stack_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TraceConfig, enable_memory_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TraceConfig, enable_return_data_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TraceConfig, tx_hash_to_generate_full_trace_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccount_StateEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccount_StateEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccount_StateEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccount_StateEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccount_StateDiffEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccount_StateDiffEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccount_StateDiffEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccount_StateDiffEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccount, balance_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccount, nonce_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccount, code_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccount, state_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccount, state_diff_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::InfoReadWrite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::InfoReadWrite, nonce_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::InfoReadWrite, balance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::FullTrace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::FullTrace, context_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::FullTrace, steps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, type_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, from_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, to_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, data_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, gas_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, value_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, batch_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, output_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, gas_used_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, gas_price_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, execution_time_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContext, old_state_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep_StorageEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep_StorageEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep_StorageEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep_StorageEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, state_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, depth_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, pc_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, gas_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, gas_cost_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, gas_refund_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, op_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, stack_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, memory_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, memory_size_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, memory_offset_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, return_data_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, contract_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, error_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStep, storage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::Contract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::Contract, address_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Contract, caller_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Contract, value_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Contract, data_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Contract, gas_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Contract, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, tx_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, rlp_tx_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, type_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, return_value_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, gas_left_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, gas_used_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, gas_refunded_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, error_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, create_address_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, state_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, logs_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, full_trace_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, effective_gas_price_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, effective_percentage_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, has_gasprice_opcode_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponse, has_balance_opcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::Log, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::Log, address_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Log, topics_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Log, data_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Log, batch_number_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Log, tx_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Log, tx_index_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Log, batch_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::Log, index_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2_DbEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2_DbEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2_DbEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2_DbEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2_StateOverrideEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2_StateOverrideEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2_StateOverrideEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2_StateOverrideEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, old_state_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, old_acc_input_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, old_batch_num_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, chain_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, fork_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, batch_l2_data_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, l1_info_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, timestamp_limit_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, coinbase_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, forced_blockhash_l1_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, update_merkle_tree_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, no_counters_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, from_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, skip_verify_l1_info_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, skip_first_change_l2_block_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, skip_write_block_info_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, l1_info_tree_data_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, db_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, contracts_bytecode_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, trace_config_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, context_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, get_keys_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, state_override_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, debug_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchRequestV2, execution_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessStatelessBatchRequestV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessStatelessBatchRequestV2, witness_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessStatelessBatchRequestV2, data_stream_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessStatelessBatchRequestV2, chain_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessStatelessBatchRequestV2, coinbase_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessStatelessBatchRequestV2, old_acc_input_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessStatelessBatchRequestV2, l1_info_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessStatelessBatchRequestV2, timestamp_limit_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessStatelessBatchRequestV2, forced_blockhash_l1_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessStatelessBatchRequestV2, context_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::L1DataV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::L1DataV2, global_exit_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::L1DataV2, block_hash_l1_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::L1DataV2, min_timestamp_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::L1DataV2, smt_proof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::DebugV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::DebugV2, gas_limit_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::DebugV2, new_state_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::DebugV2, new_acc_input_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::DebugV2, new_local_exit_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::DebugV2, new_batch_num_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, new_state_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, new_acc_input_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, new_local_exit_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, new_batch_num_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, cnt_keccak_hashes_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, cnt_poseidon_hashes_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, cnt_poseidon_paddings_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, cnt_mem_aligns_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, cnt_arithmetics_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, cnt_binaries_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, cnt_steps_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, cnt_sha256_hashes_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, block_responses_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, error_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, read_write_addresses_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, flush_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, stored_flush_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, prover_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, gas_used_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, smt_keys_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, program_keys_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, fork_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, invalid_batch_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBatchResponseV2, error_rom_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::TraceConfigV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::TraceConfigV2, disable_storage_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TraceConfigV2, disable_stack_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TraceConfigV2, enable_memory_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TraceConfigV2, enable_return_data_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TraceConfigV2, tx_hash_to_generate_full_trace_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccountV2_StateEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccountV2_StateEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccountV2_StateEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccountV2_StateEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccountV2_StateDiffEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccountV2_StateDiffEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccountV2_StateDiffEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccountV2_StateDiffEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccountV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccountV2, balance_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccountV2, nonce_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccountV2, code_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccountV2, state_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::OverrideAccountV2, state_diff_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::InfoReadWriteV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::InfoReadWriteV2, nonce_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::InfoReadWriteV2, balance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::FullTraceV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::FullTraceV2, context_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::FullTraceV2, steps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContextV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContextV2, type_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContextV2, from_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContextV2, to_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContextV2, data_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContextV2, gas_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContextV2, value_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContextV2, block_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContextV2, output_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContextV2, gas_used_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContextV2, gas_price_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContextV2, execution_time_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContextV2, old_state_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContextV2, nonce_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContextV2, tx_index_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionContextV2, chain_id_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2_StorageEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2_StorageEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2_StorageEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2_StorageEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2, state_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2, depth_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2, pc_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2, gas_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2, gas_cost_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2, gas_refund_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2, op_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2, stack_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2, memory_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2, memory_size_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2, memory_offset_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2, return_data_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2, contract_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2, error_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::TransactionStepV2, storage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ContractV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ContractV2, address_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ContractV2, caller_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ContractV2, value_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ContractV2, data_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ContractV2, gas_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ContractV2, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBlockResponseV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBlockResponseV2, parent_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBlockResponseV2, coinbase_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBlockResponseV2, gas_limit_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBlockResponseV2, block_number_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBlockResponseV2, timestamp_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBlockResponseV2, ger_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBlockResponseV2, block_hash_l1_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBlockResponseV2, gas_used_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBlockResponseV2, block_info_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBlockResponseV2, block_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBlockResponseV2, responses_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBlockResponseV2, logs_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessBlockResponseV2, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, tx_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, tx_hash_l2_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, rlp_tx_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, block_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, block_number_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, type_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, return_value_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, gas_left_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, gas_used_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, cumulative_gas_used_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, gas_refunded_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, error_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, create_address_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, state_root_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, logs_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, full_trace_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, effective_gas_price_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, effective_percentage_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, has_gasprice_opcode_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::ProcessTransactionResponseV2, has_balance_opcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::executor::v1::LogV2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::executor::v1::LogV2, address_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::LogV2, topics_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::LogV2, data_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::LogV2, block_number_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::LogV2, tx_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::LogV2, tx_hash_l2_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::LogV2, tx_index_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::LogV2, block_hash_),
  PROTOBUF_FIELD_OFFSET(::executor::v1::LogV2, index_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::executor::v1::ProcessBatchRequest_DbEntry_DoNotUse)},
  { 9, 16, sizeof(::executor::v1::ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse)},
  { 18, 25, sizeof(::executor::v1::ProcessBatchRequest_StateOverrideEntry_DoNotUse)},
  { 27, -1, sizeof(::executor::v1::ProcessBatchRequest)},
  { 49, 56, sizeof(::executor::v1::ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse)},
  { 58, -1, sizeof(::executor::v1::ProcessBatchResponse)},
  { 82, -1, sizeof(::executor::v1::GetFlushStatusResponse)},
  { 95, -1, sizeof(::executor::v1::TraceConfig)},
  { 105, 112, sizeof(::executor::v1::OverrideAccount_StateEntry_DoNotUse)},
  { 114, 121, sizeof(::executor::v1::OverrideAccount_StateDiffEntry_DoNotUse)},
  { 123, -1, sizeof(::executor::v1::OverrideAccount)},
  { 133, -1, sizeof(::executor::v1::InfoReadWrite)},
  { 140, -1, sizeof(::executor::v1::FullTrace)},
  { 147, -1, sizeof(::executor::v1::TransactionContext)},
  { 164, 171, sizeof(::executor::v1::TransactionStep_StorageEntry_DoNotUse)},
  { 173, -1, sizeof(::executor::v1::TransactionStep)},
  { 193, -1, sizeof(::executor::v1::Contract)},
  { 204, -1, sizeof(::executor::v1::ProcessTransactionResponse)},
  { 225, -1, sizeof(::executor::v1::Log)},
  { 238, 245, sizeof(::executor::v1::ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse)},
  { 247, 254, sizeof(::executor::v1::ProcessBatchRequestV2_DbEntry_DoNotUse)},
  { 256, 263, sizeof(::executor::v1::ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse)},
  { 265, 272, sizeof(::executor::v1::ProcessBatchRequestV2_StateOverrideEntry_DoNotUse)},
  { 274, -1, sizeof(::executor::v1::ProcessBatchRequestV2)},
  { 304, -1, sizeof(::executor::v1::ProcessStatelessBatchRequestV2)},
  { 318, -1, sizeof(::executor::v1::L1DataV2)},
  { 327, -1, sizeof(::executor::v1::DebugV2)},
  { 337, 344, sizeof(::executor::v1::ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse)},
  { 346, -1, sizeof(::executor::v1::ProcessBatchResponseV2)},
  { 375, -1, sizeof(::executor::v1::TraceConfigV2)},
  { 385, 392, sizeof(::executor::v1::OverrideAccountV2_StateEntry_DoNotUse)},
  { 394, 401, sizeof(::executor::v1::OverrideAccountV2_StateDiffEntry_DoNotUse)},
  { 403, -1, sizeof(::executor::v1::OverrideAccountV2)},
  { 413, -1, sizeof(::executor::v1::InfoReadWriteV2)},
  { 420, -1, sizeof(::executor::v1::FullTraceV2)},
  { 427, -1, sizeof(::executor::v1::TransactionContextV2)},
  { 447, 454, sizeof(::executor::v1::TransactionStepV2_StorageEntry_DoNotUse)},
  { 456, -1, sizeof(::executor::v1::TransactionStepV2)},
  { 476, -1, sizeof(::executor::v1::ContractV2)},
  { 487, -1, sizeof(::executor::v1::ProcessBlockResponseV2)},
  { 505, -1, sizeof(::executor::v1::ProcessTransactionResponseV2)},
  { 530, -1, sizeof(::executor::v1::LogV2)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_ProcessBatchRequest_DbEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_ProcessBatchRequest_StateOverrideEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_ProcessBatchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_ProcessBatchResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_GetFlushStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_TraceConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_OverrideAccount_StateEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_OverrideAccount_StateDiffEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_OverrideAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_InfoReadWrite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_FullTrace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_TransactionContext_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_TransactionStep_StorageEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_TransactionStep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_Contract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_ProcessTransactionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_Log_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_ProcessBatchRequestV2_DbEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_ProcessBatchRequestV2_StateOverrideEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_ProcessBatchRequestV2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_ProcessStatelessBatchRequestV2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_L1DataV2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_DebugV2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_ProcessBatchResponseV2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_TraceConfigV2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_OverrideAccountV2_StateEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_OverrideAccountV2_StateDiffEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_OverrideAccountV2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_InfoReadWriteV2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_FullTraceV2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_TransactionContextV2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_TransactionStepV2_StorageEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_TransactionStepV2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_ContractV2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_ProcessBlockResponseV2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_ProcessTransactionResponseV2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::executor::v1::_LogV2_default_instance_),
};

const char descriptor_table_protodef_executor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016executor.proto\022\013executor.v1\032\033google/pr"
  "otobuf/empty.proto\"\361\005\n\023ProcessBatchReque"
  "st\022\026\n\016old_state_root\030\001 \001(\014\022\032\n\022old_acc_in"
  "put_hash\030\002 \001(\014\022\025\n\rold_batch_num\030\003 \001(\004\022\020\n"
  "\010chain_id\030\004 \001(\004\022\017\n\007fork_id\030\005 \001(\004\022\025\n\rbatc"
  "h_l2_data\030\006 \001(\014\022\030\n\020global_exit_root\030\007 \001("
  "\014\022\025\n\reth_timestamp\030\010 \001(\004\022\020\n\010coinbase\030\t \001"
  "(\t\022\032\n\022update_merkle_tree\030\n \001(\r\022\023\n\013no_cou"
  "nters\030\013 \001(\004\022\014\n\004from\030\014 \001(\t\0224\n\002db\030\r \003(\0132(."
  "executor.v1.ProcessBatchRequest.DbEntry\022"
  "S\n\022contracts_bytecode\030\016 \003(\01327.executor.v"
  "1.ProcessBatchRequest.ContractsBytecodeE"
  "ntry\022.\n\014trace_config\030\017 \001(\0132\030.executor.v1"
  ".TraceConfig\022\022\n\ncontext_id\030\020 \001(\t\022K\n\016stat"
  "e_override\030\021 \003(\01323.executor.v1.ProcessBa"
  "tchRequest.StateOverrideEntry\032)\n\007DbEntry"
  "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\0328\n\026Cont"
  "ractsBytecodeEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\t:\0028\001\032R\n\022StateOverrideEntry\022\013\n\003key\030"
  "\001 \001(\t\022+\n\005value\030\002 \001(\0132\034.executor.v1.Overr"
  "ideAccount:\0028\001\"\262\005\n\024ProcessBatchResponse\022"
  "\026\n\016new_state_root\030\001 \001(\014\022\032\n\022new_acc_input"
  "_hash\030\002 \001(\014\022\033\n\023new_local_exit_root\030\003 \001(\014"
  "\022\025\n\rnew_batch_num\030\004 \001(\004\022\031\n\021cnt_keccak_ha"
  "shes\030\005 \001(\r\022\033\n\023cnt_poseidon_hashes\030\006 \001(\r\022"
  "\035\n\025cnt_poseidon_paddings\030\007 \001(\r\022\026\n\016cnt_me"
  "m_aligns\030\010 \001(\r\022\027\n\017cnt_arithmetics\030\t \001(\r\022"
  "\024\n\014cnt_binaries\030\n \001(\r\022\021\n\tcnt_steps\030\013 \001(\r"
  "\022\033\n\023cumulative_gas_used\030\014 \001(\004\022:\n\trespons"
  "es\030\r \003(\0132\'.executor.v1.ProcessTransactio"
  "nResponse\022)\n\005error\030\016 \001(\0162\032.executor.v1.E"
  "xecutorError\022W\n\024read_write_addresses\030\017 \003"
  "(\01329.executor.v1.ProcessBatchResponse.Re"
  "adWriteAddressesEntry\022\020\n\010flush_id\030\020 \001(\004\022"
  "\027\n\017stored_flush_id\030\021 \001(\004\022\021\n\tprover_id\030\022 "
  "\001(\t\022\017\n\007fork_id\030\023 \001(\004\032U\n\027ReadWriteAddress"
  "esEntry\022\013\n\003key\030\001 \001(\t\022)\n\005value\030\002 \001(\0132\032.ex"
  "ecutor.v1.InfoReadWrite:\0028\001\"\347\001\n\026GetFlush"
  "StatusResponse\022\027\n\017stored_flush_id\030\001 \001(\004\022"
  "\030\n\020storing_flush_id\030\002 \001(\004\022\025\n\rlast_flush_"
  "id\030\003 \001(\004\022\036\n\026pending_to_flush_nodes\030\004 \001(\004"
  "\022 \n\030pending_to_flush_program\030\005 \001(\004\022\025\n\rst"
  "oring_nodes\030\006 \001(\004\022\027\n\017storing_program\030\007 \001"
  "(\004\022\021\n\tprover_id\030\010 \001(\t\"\230\001\n\013TraceConfig\022\027\n"
  "\017disable_storage\030\001 \001(\r\022\025\n\rdisable_stack\030"
  "\002 \001(\r\022\025\n\renable_memory\030\003 \001(\r\022\032\n\022enable_r"
  "eturn_data\030\004 \001(\r\022&\n\036tx_hash_to_generate_"
  "full_trace\030\005 \001(\014\"\230\002\n\017OverrideAccount\022\017\n\007"
  "balance\030\001 \001(\014\022\r\n\005nonce\030\002 \001(\004\022\014\n\004code\030\003 \001"
  "(\014\0226\n\005state\030\004 \003(\0132\'.executor.v1.Override"
  "Account.StateEntry\022\?\n\nstate_diff\030\005 \003(\0132+"
  ".executor.v1.OverrideAccount.StateDiffEn"
  "try\032,\n\nStateEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030"
  "\002 \001(\t:\0028\001\0320\n\016StateDiffEntry\022\013\n\003key\030\001 \001(\t"
  "\022\r\n\005value\030\002 \001(\t:\0028\001\"/\n\rInfoReadWrite\022\r\n\005"
  "nonce\030\001 \001(\t\022\017\n\007balance\030\002 \001(\t\"j\n\tFullTrac"
  "e\0220\n\007context\030\001 \001(\0132\037.executor.v1.Transac"
  "tionContext\022+\n\005steps\030\002 \003(\0132\034.executor.v1"
  ".TransactionStep\"\332\001\n\022TransactionContext\022"
  "\014\n\004type\030\001 \001(\t\022\014\n\004from\030\002 \001(\t\022\n\n\002to\030\003 \001(\t\022"
  "\014\n\004data\030\004 \001(\014\022\013\n\003gas\030\005 \001(\004\022\r\n\005value\030\006 \001("
  "\t\022\r\n\005batch\030\007 \001(\014\022\016\n\006output\030\010 \001(\014\022\020\n\010gas_"
  "used\030\t \001(\004\022\021\n\tgas_price\030\n \001(\t\022\026\n\016executi"
  "on_time\030\013 \001(\r\022\026\n\016old_state_root\030\014 \001(\014\"\232\003"
  "\n\017TransactionStep\022\022\n\nstate_root\030\001 \001(\014\022\r\n"
  "\005depth\030\002 \001(\r\022\n\n\002pc\030\003 \001(\004\022\013\n\003gas\030\004 \001(\004\022\020\n"
  "\010gas_cost\030\005 \001(\004\022\022\n\ngas_refund\030\006 \001(\004\022\n\n\002o"
  "p\030\007 \001(\r\022\r\n\005stack\030\010 \003(\t\022\016\n\006memory\030\t \001(\014\022\023"
  "\n\013memory_size\030\n \001(\r\022\025\n\rmemory_offset\030\013 \001"
  "(\r\022\023\n\013return_data\030\014 \001(\014\022\'\n\010contract\030\r \001("
  "\0132\025.executor.v1.Contract\022$\n\005error\030\016 \001(\0162"
  "\025.executor.v1.RomError\022:\n\007storage\030\017 \003(\0132"
  ").executor.v1.TransactionStep.StorageEnt"
  "ry\032.\n\014StorageEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\t:\0028\001\"c\n\010Contract\022\017\n\007address\030\001 \001(\t\022"
  "\016\n\006caller\030\002 \001(\t\022\r\n\005value\030\003 \001(\t\022\014\n\004data\030\004"
  " \001(\014\022\013\n\003gas\030\005 \001(\004\022\014\n\004type\030\006 \001(\t\"\255\003\n\032Proc"
  "essTransactionResponse\022\017\n\007tx_hash\030\001 \001(\014\022"
  "\016\n\006rlp_tx\030\002 \001(\014\022\014\n\004type\030\003 \001(\r\022\024\n\014return_"
  "value\030\004 \001(\014\022\020\n\010gas_left\030\005 \001(\004\022\020\n\010gas_use"
  "d\030\006 \001(\004\022\024\n\014gas_refunded\030\007 \001(\004\022$\n\005error\030\010"
  " \001(\0162\025.executor.v1.RomError\022\026\n\016create_ad"
  "dress\030\t \001(\t\022\022\n\nstate_root\030\n \001(\014\022\036\n\004logs\030"
  "\013 \003(\0132\020.executor.v1.Log\022*\n\nfull_trace\030\016 "
  "\001(\0132\026.executor.v1.FullTrace\022\033\n\023effective"
  "_gas_price\030\017 \001(\t\022\034\n\024effective_percentage"
  "\030\020 \001(\r\022\033\n\023has_gasprice_opcode\030\021 \001(\r\022\032\n\022h"
  "as_balance_opcode\030\022 \001(\r\"\220\001\n\003Log\022\017\n\007addre"
  "ss\030\001 \001(\t\022\016\n\006topics\030\002 \003(\014\022\014\n\004data\030\003 \001(\014\022\024"
  "\n\014batch_number\030\004 \001(\004\022\017\n\007tx_hash\030\005 \001(\014\022\020\n"
  "\010tx_index\030\006 \001(\r\022\022\n\nbatch_hash\030\007 \001(\014\022\r\n\005i"
  "ndex\030\010 \001(\r\"\362\010\n\025ProcessBatchRequestV2\022\026\n\016"
  "old_state_root\030\001 \001(\014\022\032\n\022old_acc_input_ha"
  "sh\030\002 \001(\014\022\025\n\rold_batch_num\030\003 \001(\004\022\020\n\010chain"
  "_id\030\004 \001(\004\022\017\n\007fork_id\030\005 \001(\004\022\025\n\rbatch_l2_d"
  "ata\030\006 \001(\014\022\024\n\014l1_info_root\030\007 \001(\014\022\027\n\017times"
  "tamp_limit\030\010 \001(\004\022\020\n\010coinbase\030\t \001(\t\022\033\n\023fo"
  "rced_blockhash_l1\030\n \001(\014\022\032\n\022update_merkle"
  "_tree\030\013 \001(\r\022\023\n\013no_counters\030\014 \001(\r\022\014\n\004from"
  "\030\r \001(\t\022 \n\030skip_verify_l1_info_root\030\016 \001(\r"
  "\022\"\n\032skip_first_change_l2_block\030\017 \001(\r\022\"\n\032"
  "skip_write_block_info_root\030\020 \001(\r\022Q\n\021l1_i"
  "nfo_tree_data\030\021 \003(\01326.executor.v1.Proces"
  "sBatchRequestV2.L1InfoTreeDataEntry\0226\n\002d"
  "b\030\022 \003(\0132*.executor.v1.ProcessBatchReques"
  "tV2.DbEntry\022U\n\022contracts_bytecode\030\023 \003(\0132"
  "9.executor.v1.ProcessBatchRequestV2.Cont"
  "ractsBytecodeEntry\0220\n\014trace_config\030\024 \001(\013"
  "2\032.executor.v1.TraceConfigV2\022\022\n\ncontext_"
  "id\030\025 \001(\t\022\020\n\010get_keys\030\026 \001(\r\022M\n\016state_over"
  "ride\030\027 \003(\01325.executor.v1.ProcessBatchReq"
  "uestV2.StateOverrideEntry\022#\n\005debug\030\030 \001(\013"
  "2\024.executor.v1.DebugV2\022\026\n\016execution_mode"
  "\030\031 \001(\004\032L\n\023L1InfoTreeDataEntry\022\013\n\003key\030\001 \001"
  "(\r\022$\n\005value\030\002 \001(\0132\025.executor.v1.L1DataV2"
  ":\0028\001\032)\n\007DbEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 "
  "\001(\t:\0028\001\0328\n\026ContractsBytecodeEntry\022\013\n\003key"
  "\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032T\n\022StateOverri"
  "deEntry\022\013\n\003key\030\001 \001(\t\022-\n\005value\030\002 \001(\0132\036.ex"
  "ecutor.v1.OverrideAccountV2:\0028\001\"\346\001\n\036Proc"
  "essStatelessBatchRequestV2\022\017\n\007witness\030\001 "
  "\001(\014\022\023\n\013data_stream\030\002 \001(\014\022\020\n\010chain_id\030\003 \001"
  "(\004\022\020\n\010coinbase\030\004 \001(\t\022\032\n\022old_acc_input_ha"
  "sh\030\005 \001(\014\022\024\n\014l1_info_root\030\006 \001(\014\022\027\n\017timest"
  "amp_limit\030\007 \001(\004\022\033\n\023forced_blockhash_l1\030\010"
  " \001(\014\022\022\n\ncontext_id\030\t \001(\t\"e\n\010L1DataV2\022\030\n\020"
  "global_exit_root\030\001 \001(\014\022\025\n\rblock_hash_l1\030"
  "\002 \001(\014\022\025\n\rmin_timestamp\030\003 \001(\004\022\021\n\tsmt_proo"
  "f\030\004 \003(\014\"\204\001\n\007DebugV2\022\021\n\tgas_limit\030\001 \001(\004\022\026"
  "\n\016new_state_root\030\002 \001(\014\022\032\n\022new_acc_input_"
  "hash\030\003 \001(\014\022\033\n\023new_local_exit_root\030\004 \001(\014\022"
  "\025\n\rnew_batch_num\030\005 \001(\004\"\263\006\n\026ProcessBatchR"
  "esponseV2\022\026\n\016new_state_root\030\001 \001(\014\022\032\n\022new"
  "_acc_input_hash\030\002 \001(\014\022\033\n\023new_local_exit_"
  "root\030\003 \001(\014\022\025\n\rnew_batch_num\030\004 \001(\004\022\031\n\021cnt"
  "_keccak_hashes\030\005 \001(\r\022\033\n\023cnt_poseidon_has"
  "hes\030\006 \001(\r\022\035\n\025cnt_poseidon_paddings\030\007 \001(\r"
  "\022\026\n\016cnt_mem_aligns\030\010 \001(\r\022\027\n\017cnt_arithmet"
  "ics\030\t \001(\r\022\024\n\014cnt_binaries\030\n \001(\r\022\021\n\tcnt_s"
  "teps\030\013 \001(\r\022\031\n\021cnt_sha256_hashes\030\014 \001(\r\022<\n"
  "\017block_responses\030\r \003(\0132#.executor.v1.Pro"
  "cessBlockResponseV2\022)\n\005error\030\016 \001(\0162\032.exe"
  "cutor.v1.ExecutorError\022Y\n\024read_write_add"
  "resses\030\017 \003(\0132;.executor.v1.ProcessBatchR"
  "esponseV2.ReadWriteAddressesEntry\022\020\n\010flu"
  "sh_id\030\020 \001(\004\022\027\n\017stored_flush_id\030\021 \001(\004\022\021\n\t"
  "prover_id\030\022 \001(\t\022\020\n\010gas_used\030\023 \001(\004\022\020\n\010smt"
  "_keys\030\024 \003(\014\022\024\n\014program_keys\030\025 \003(\014\022\017\n\007for"
  "k_id\030\026 \001(\004\022\025\n\rinvalid_batch\030\027 \001(\r\022(\n\terr"
  "or_rom\030\030 \001(\0162\025.executor.v1.RomError\032W\n\027R"
  "eadWriteAddressesEntry\022\013\n\003key\030\001 \001(\t\022+\n\005v"
  "alue\030\002 \001(\0132\034.executor.v1.InfoReadWriteV2"
  ":\0028\001\"\232\001\n\rTraceConfigV2\022\027\n\017disable_storag"
  "e\030\001 \001(\r\022\025\n\rdisable_stack\030\002 \001(\r\022\025\n\renable"
  "_memory\030\003 \001(\r\022\032\n\022enable_return_data\030\004 \001("
  "\r\022&\n\036tx_hash_to_generate_full_trace\030\005 \001("
  "\014\"\236\002\n\021OverrideAccountV2\022\017\n\007balance\030\001 \001(\014"
  "\022\r\n\005nonce\030\002 \001(\004\022\014\n\004code\030\003 \001(\014\0228\n\005state\030\004"
  " \003(\0132).executor.v1.OverrideAccountV2.Sta"
  "teEntry\022A\n\nstate_diff\030\005 \003(\0132-.executor.v"
  "1.OverrideAccountV2.StateDiffEntry\032,\n\nSt"
  "ateEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001"
  "\0320\n\016StateDiffEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\t:\0028\001\"1\n\017InfoReadWriteV2\022\r\n\005nonce\030\001"
  " \001(\t\022\017\n\007balance\030\002 \001(\t\"p\n\013FullTraceV2\0222\n\007"
  "context\030\001 \001(\0132!.executor.v1.TransactionC"
  "ontextV2\022-\n\005steps\030\002 \003(\0132\036.executor.v1.Tr"
  "ansactionStepV2\"\224\002\n\024TransactionContextV2"
  "\022\014\n\004type\030\001 \001(\t\022\014\n\004from\030\002 \001(\t\022\n\n\002to\030\003 \001(\t"
  "\022\014\n\004data\030\004 \001(\014\022\013\n\003gas\030\005 \001(\004\022\r\n\005value\030\006 \001"
  "(\t\022\022\n\nblock_hash\030\007 \001(\014\022\016\n\006output\030\010 \001(\014\022\020"
  "\n\010gas_used\030\t \001(\004\022\021\n\tgas_price\030\n \001(\t\022\026\n\016e"
  "xecution_time\030\013 \001(\r\022\026\n\016old_state_root\030\014 "
  "\001(\014\022\r\n\005nonce\030\r \001(\004\022\020\n\010tx_index\030\016 \001(\004\022\020\n\010"
  "chain_id\030\017 \001(\004\"\240\003\n\021TransactionStepV2\022\022\n\n"
  "state_root\030\001 \001(\014\022\r\n\005depth\030\002 \001(\r\022\n\n\002pc\030\003 "
  "\001(\004\022\013\n\003gas\030\004 \001(\004\022\020\n\010gas_cost\030\005 \001(\004\022\022\n\nga"
  "s_refund\030\006 \001(\004\022\n\n\002op\030\007 \001(\r\022\r\n\005stack\030\010 \003("
  "\t\022\016\n\006memory\030\t \001(\014\022\023\n\013memory_size\030\n \001(\r\022\025"
  "\n\rmemory_offset\030\013 \001(\r\022\023\n\013return_data\030\014 \001"
  "(\014\022)\n\010contract\030\r \001(\0132\027.executor.v1.Contr"
  "actV2\022$\n\005error\030\016 \001(\0162\025.executor.v1.RomEr"
  "ror\022<\n\007storage\030\017 \003(\0132+.executor.v1.Trans"
  "actionStepV2.StorageEntry\032.\n\014StorageEntr"
  "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"e\n\nCon"
  "tractV2\022\017\n\007address\030\001 \001(\t\022\016\n\006caller\030\002 \001(\t"
  "\022\r\n\005value\030\003 \001(\t\022\014\n\004data\030\004 \001(\014\022\013\n\003gas\030\005 \001"
  "(\004\022\014\n\004type\030\006 \001(\t\"\344\002\n\026ProcessBlockRespons"
  "eV2\022\023\n\013parent_hash\030\001 \001(\014\022\020\n\010coinbase\030\002 \001"
  "(\t\022\021\n\tgas_limit\030\003 \001(\004\022\024\n\014block_number\030\004 "
  "\001(\004\022\021\n\ttimestamp\030\005 \001(\004\022\013\n\003ger\030\006 \001(\014\022\025\n\rb"
  "lock_hash_l1\030\007 \001(\014\022\020\n\010gas_used\030\010 \001(\004\022\027\n\017"
  "block_info_root\030\t \001(\014\022\022\n\nblock_hash\030\n \001("
  "\014\022<\n\tresponses\030\013 \003(\0132).executor.v1.Proce"
  "ssTransactionResponseV2\022 \n\004logs\030\014 \003(\0132\022."
  "executor.v1.LogV2\022$\n\005error\030\r \001(\0162\025.execu"
  "tor.v1.RomError\"\216\004\n\034ProcessTransactionRe"
  "sponseV2\022\017\n\007tx_hash\030\001 \001(\014\022\022\n\ntx_hash_l2\030"
  "\002 \001(\014\022\016\n\006rlp_tx\030\003 \001(\014\022\022\n\nblock_hash\030\004 \001("
  "\014\022\024\n\014block_number\030\005 \001(\004\022\014\n\004type\030\006 \001(\r\022\024\n"
  "\014return_value\030\007 \001(\014\022\020\n\010gas_left\030\010 \001(\004\022\020\n"
  "\010gas_used\030\t \001(\004\022\033\n\023cumulative_gas_used\030\n"
  " \001(\004\022\024\n\014gas_refunded\030\013 \001(\004\022$\n\005error\030\014 \001("
  "\0162\025.executor.v1.RomError\022\026\n\016create_addre"
  "ss\030\r \001(\t\022\022\n\nstate_root\030\016 \001(\014\022 \n\004logs\030\017 \003"
  "(\0132\022.executor.v1.LogV2\022,\n\nfull_trace\030\020 \001"
  "(\0132\030.executor.v1.FullTraceV2\022\033\n\023effectiv"
  "e_gas_price\030\021 \001(\t\022\034\n\024effective_percentag"
  "e\030\022 \001(\r\022\033\n\023has_gasprice_opcode\030\023 \001(\r\022\032\n\022"
  "has_balance_opcode\030\024 \001(\r\"\246\001\n\005LogV2\022\017\n\007ad"
  "dress\030\001 \001(\t\022\016\n\006topics\030\002 \003(\014\022\014\n\004data\030\003 \001("
  "\014\022\024\n\014block_number\030\004 \001(\004\022\017\n\007tx_hash\030\005 \001(\014"
  "\022\022\n\ntx_hash_l2\030\006 \001(\014\022\020\n\010tx_index\030\007 \001(\r\022\022"
  "\n\nblock_hash\030\010 \001(\014\022\r\n\005index\030\t \001(\r*\275\n\n\010Ro"
  "mError\022\031\n\025ROM_ERROR_UNSPECIFIED\020\000\022\026\n\022ROM"
  "_ERROR_NO_ERROR\020\001\022\030\n\024ROM_ERROR_OUT_OF_GA"
  "S\020\002\022\034\n\030ROM_ERROR_STACK_OVERFLOW\020\003\022\035\n\031ROM"
  "_ERROR_STACK_UNDERFLOW\020\004\022$\n ROM_ERROR_MA"
  "X_CODE_SIZE_EXCEEDED\020\005\022(\n$ROM_ERROR_CONT"
  "RACT_ADDRESS_COLLISION\020\006\022 \n\034ROM_ERROR_EX"
  "ECUTION_REVERTED\020\007\022\"\n\036ROM_ERROR_OUT_OF_C"
  "OUNTERS_STEP\020\010\022$\n ROM_ERROR_OUT_OF_COUNT"
  "ERS_KECCAK\020\t\022$\n ROM_ERROR_OUT_OF_COUNTER"
  "S_BINARY\020\n\022!\n\035ROM_ERROR_OUT_OF_COUNTERS_"
  "MEM\020\013\022#\n\037ROM_ERROR_OUT_OF_COUNTERS_ARITH"
  "\020\014\022%\n!ROM_ERROR_OUT_OF_COUNTERS_PADDING\020"
  "\r\022&\n\"ROM_ERROR_OUT_OF_COUNTERS_POSEIDON\020"
  "\016\022!\n\035ROM_ERROR_OUT_OF_COUNTERS_SHA\020\017\022\032\n\026"
  "ROM_ERROR_INVALID_JUMP\020\020\022\034\n\030ROM_ERROR_IN"
  "VALID_OPCODE\020\021\022\034\n\030ROM_ERROR_INVALID_STAT"
  "IC\020\022\022(\n$ROM_ERROR_INVALID_BYTECODE_START"
  "S_EF\020\023\022)\n%ROM_ERROR_INTRINSIC_INVALID_SI"
  "GNATURE\020\024\022(\n$ROM_ERROR_INTRINSIC_INVALID"
  "_CHAIN_ID\020\025\022%\n!ROM_ERROR_INTRINSIC_INVAL"
  "ID_NONCE\020\026\022)\n%ROM_ERROR_INTRINSIC_INVALI"
  "D_GAS_LIMIT\020\027\022\'\n#ROM_ERROR_INTRINSIC_INV"
  "ALID_BALANCE\020\030\022/\n+ROM_ERROR_INTRINSIC_IN"
  "VALID_BATCH_GAS_LIMIT\020\031\022+\n\'ROM_ERROR_INT"
  "RINSIC_INVALID_SENDER_CODE\020\032\022\'\n#ROM_ERRO"
  "R_INTRINSIC_TX_GAS_OVERFLOW\020\033\022 \n\034ROM_ERR"
  "OR_BATCH_DATA_TOO_BIG\020\034\022!\n\035ROM_ERROR_UNS"
  "UPPORTED_FORK_ID\020\035\022\031\n\025ROM_ERROR_INVALID_"
  "RLP\020\036\022,\n(ROM_ERROR_INVALID_DECODE_CHANGE"
  "_L2_BLOCK\020\037\0222\n.ROM_ERROR_INVALID_NOT_FIR"
  "ST_TX_CHANGE_L2_BLOCK\020 \0228\n4ROM_ERROR_INV"
  "ALID_TX_CHANGE_L2_BLOCK_LIMIT_TIMESTAMP\020"
  "!\0226\n2ROM_ERROR_INVALID_TX_CHANGE_L2_BLOC"
  "K_MIN_TIMESTAMP\020\"*\237,\n\rExecutorError\022\036\n\032E"
  "XECUTOR_ERROR_UNSPECIFIED\020\000\022\033\n\027EXECUTOR_"
  "ERROR_NO_ERROR\020\001\022\033\n\027EXECUTOR_ERROR_DB_ER"
  "ROR\020\002\0222\n.EXECUTOR_ERROR_SM_MAIN_COUNTERS"
  "_OVERFLOW_STEPS\020\003\0223\n/EXECUTOR_ERROR_SM_M"
  "AIN_COUNTERS_OVERFLOW_KECCAK\020\004\0223\n/EXECUT"
  "OR_ERROR_SM_MAIN_COUNTERS_OVERFLOW_BINAR"
  "Y\020\005\0220\n,EXECUTOR_ERROR_SM_MAIN_COUNTERS_O"
  "VERFLOW_MEM\020\006\0222\n.EXECUTOR_ERROR_SM_MAIN_"
  "COUNTERS_OVERFLOW_ARITH\020\007\0224\n0EXECUTOR_ER"
  "ROR_SM_MAIN_COUNTERS_OVERFLOW_PADDING\020\010\022"
  "5\n1EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERF"
  "LOW_POSEIDON\020\t\022&\n\"EXECUTOR_ERROR_UNSUPPO"
  "RTED_FORK_ID\020\n\022#\n\037EXECUTOR_ERROR_BALANCE"
  "_MISMATCH\020\013\022\035\n\031EXECUTOR_ERROR_FEA2SCALAR"
  "\020\014\022\030\n\024EXECUTOR_ERROR_TOS32\020\r\022.\n*EXECUTOR"
  "_ERROR_SM_MAIN_INVALID_UNSIGNED_TX\020\016\022.\n*"
  "EXECUTOR_ERROR_SM_MAIN_INVALID_NO_COUNTE"
  "RS\020\017\0229\n5EXECUTOR_ERROR_SM_MAIN_ARITH_ECR"
  "ECOVER_DIVIDE_BY_ZERO\020\020\022/\n+EXECUTOR_ERRO"
  "R_SM_MAIN_ADDRESS_OUT_OF_RANGE\020\021\022+\n\'EXEC"
  "UTOR_ERROR_SM_MAIN_ADDRESS_NEGATIVE\020\022\022.\n"
  "*EXECUTOR_ERROR_SM_MAIN_STORAGE_INVALID_"
  "KEY\020\023\022 \n\034EXECUTOR_ERROR_SM_MAIN_HASHK\020\024\022"
  "2\n.EXECUTOR_ERROR_SM_MAIN_HASHK_SIZE_OUT"
  "_OF_RANGE\020\025\0222\n.EXECUTOR_ERROR_SM_MAIN_HA"
  "SHK_POSITION_NEGATIVE\020\026\022@\n<EXECUTOR_ERRO"
  "R_SM_MAIN_HASHK_POSITION_PLUS_SIZE_OUT_O"
  "F_RANGE\020\027\0228\n4EXECUTOR_ERROR_SM_MAIN_HASH"
  "KDIGEST_ADDRESS_NOT_FOUND\020\030\0224\n0EXECUTOR_"
  "ERROR_SM_MAIN_HASHKDIGEST_NOT_COMPLETED\020"
  "\031\022 \n\034EXECUTOR_ERROR_SM_MAIN_HASHP\020\032\0222\n.E"
  "XECUTOR_ERROR_SM_MAIN_HASHP_SIZE_OUT_OF_"
  "RANGE\020\033\0222\n.EXECUTOR_ERROR_SM_MAIN_HASHP_"
  "POSITION_NEGATIVE\020\034\022@\n<EXECUTOR_ERROR_SM"
  "_MAIN_HASHP_POSITION_PLUS_SIZE_OUT_OF_RA"
  "NGE\020\035\0228\n4EXECUTOR_ERROR_SM_MAIN_HASHPDIG"
  "EST_ADDRESS_NOT_FOUND\020\036\0224\n0EXECUTOR_ERRO"
  "R_SM_MAIN_HASHPDIGEST_NOT_COMPLETED\020\037\0227\n"
  "3EXECUTOR_ERROR_SM_MAIN_MEMALIGN_OFFSET_"
  "OUT_OF_RANGE\020 \022*\n&EXECUTOR_ERROR_SM_MAIN"
  "_MULTIPLE_FREEIN\020!\022!\n\035EXECUTOR_ERROR_SM_"
  "MAIN_ASSERT\020\"\022!\n\035EXECUTOR_ERROR_SM_MAIN_"
  "MEMORY\020#\0220\n,EXECUTOR_ERROR_SM_MAIN_STORA"
  "GE_READ_MISMATCH\020$\0221\n-EXECUTOR_ERROR_SM_"
  "MAIN_STORAGE_WRITE_MISMATCH\020%\022/\n+EXECUTO"
  "R_ERROR_SM_MAIN_HASHK_VALUE_MISMATCH\020&\0221"
  "\n-EXECUTOR_ERROR_SM_MAIN_HASHK_PADDING_M"
  "ISMATCH\020\'\022.\n*EXECUTOR_ERROR_SM_MAIN_HASH"
  "K_SIZE_MISMATCH\020(\0223\n/EXECUTOR_ERROR_SM_M"
  "AIN_HASHKLEN_LENGTH_MISMATCH\020)\0220\n,EXECUT"
  "OR_ERROR_SM_MAIN_HASHKLEN_CALLED_TWICE\020*"
  "\0220\n,EXECUTOR_ERROR_SM_MAIN_HASHKDIGEST_N"
  "OT_FOUND\020+\0226\n2EXECUTOR_ERROR_SM_MAIN_HAS"
  "HKDIGEST_DIGEST_MISMATCH\020,\0223\n/EXECUTOR_E"
  "RROR_SM_MAIN_HASHKDIGEST_CALLED_TWICE\020-\022"
  "/\n+EXECUTOR_ERROR_SM_MAIN_HASHP_VALUE_MI"
  "SMATCH\020.\0221\n-EXECUTOR_ERROR_SM_MAIN_HASHP"
  "_PADDING_MISMATCH\020/\022.\n*EXECUTOR_ERROR_SM"
  "_MAIN_HASHP_SIZE_MISMATCH\0200\0223\n/EXECUTOR_"
  "ERROR_SM_MAIN_HASHPLEN_LENGTH_MISMATCH\0201"
  "\0220\n,EXECUTOR_ERROR_SM_MAIN_HASHPLEN_CALL"
  "ED_TWICE\0202\0226\n2EXECUTOR_ERROR_SM_MAIN_HAS"
  "HPDIGEST_DIGEST_MISMATCH\0203\0223\n/EXECUTOR_E"
  "RROR_SM_MAIN_HASHPDIGEST_CALLED_TWICE\0204\022"
  ")\n%EXECUTOR_ERROR_SM_MAIN_ARITH_MISMATCH"
  "\0205\0223\n/EXECUTOR_ERROR_SM_MAIN_ARITH_ECREC"
  "OVER_MISMATCH\0206\022.\n*EXECUTOR_ERROR_SM_MAI"
  "N_BINARY_ADD_MISMATCH\0207\022.\n*EXECUTOR_ERRO"
  "R_SM_MAIN_BINARY_SUB_MISMATCH\0208\022-\n)EXECU"
  "TOR_ERROR_SM_MAIN_BINARY_LT_MISMATCH\0209\022."
  "\n*EXECUTOR_ERROR_SM_MAIN_BINARY_SLT_MISM"
  "ATCH\020:\022-\n)EXECUTOR_ERROR_SM_MAIN_BINARY_"
  "EQ_MISMATCH\020;\022.\n*EXECUTOR_ERROR_SM_MAIN_"
  "BINARY_AND_MISMATCH\020<\022-\n)EXECUTOR_ERROR_"
  "SM_MAIN_BINARY_OR_MISMATCH\020=\022.\n*EXECUTOR"
  "_ERROR_SM_MAIN_BINARY_XOR_MISMATCH\020>\0222\n."
  "EXECUTOR_ERROR_SM_MAIN_MEMALIGN_WRITE_MI"
  "SMATCH\020\?\0223\n/EXECUTOR_ERROR_SM_MAIN_MEMAL"
  "IGN_WRITE8_MISMATCH\020@\0221\n-EXECUTOR_ERROR_"
  "SM_MAIN_MEMALIGN_READ_MISMATCH\020A\022,\n(EXEC"
  "UTOR_ERROR_SM_MAIN_JMPN_OUT_OF_RANGE\020B\0222"
  "\n.EXECUTOR_ERROR_SM_MAIN_HASHK_READ_OUT_"
  "OF_RANGE\020C\0222\n.EXECUTOR_ERROR_SM_MAIN_HAS"
  "HP_READ_OUT_OF_RANGE\020D\022)\n%EXECUTOR_ERROR"
  "_INVALID_OLD_STATE_ROOT\020E\022-\n)EXECUTOR_ER"
  "ROR_INVALID_OLD_ACC_INPUT_HASH\020F\022#\n\037EXEC"
  "UTOR_ERROR_INVALID_CHAIN_ID\020G\022(\n$EXECUTO"
  "R_ERROR_INVALID_BATCH_L2_DATA\020H\022+\n\'EXECU"
  "TOR_ERROR_INVALID_GLOBAL_EXIT_ROOT\020I\022#\n\037"
  "EXECUTOR_ERROR_INVALID_COINBASE\020J\022\037\n\033EXE"
  "CUTOR_ERROR_INVALID_FROM\020K\022!\n\035EXECUTOR_E"
  "RROR_INVALID_DB_KEY\020L\022#\n\037EXECUTOR_ERROR_"
  "INVALID_DB_VALUE\020M\0221\n-EXECUTOR_ERROR_INV"
  "ALID_CONTRACTS_BYTECODE_KEY\020N\0223\n/EXECUTO"
  "R_ERROR_INVALID_CONTRACTS_BYTECODE_VALUE"
  "\020O\022\"\n\036EXECUTOR_ERROR_INVALID_GET_KEY\020P\0223"
  "\n/EXECUTOR_ERROR_SM_MAIN_COUNTERS_OVERFL"
  "OW_SHA256\020Q\022 \n\034EXECUTOR_ERROR_SM_MAIN_HA"
  "SHS\020R\0222\n.EXECUTOR_ERROR_SM_MAIN_HASHS_SI"
  "ZE_OUT_OF_RANGE\020S\0222\n.EXECUTOR_ERROR_SM_M"
  "AIN_HASHS_POSITION_NEGATIVE\020T\022@\n<EXECUTO"
  "R_ERROR_SM_MAIN_HASHS_POSITION_PLUS_SIZE"
  "_OUT_OF_RANGE\020U\0228\n4EXECUTOR_ERROR_SM_MAI"
  "N_HASHSDIGEST_ADDRESS_NOT_FOUND\020V\0224\n0EXE"
  "CUTOR_ERROR_SM_MAIN_HASHSDIGEST_NOT_COMP"
  "LETED\020W\022/\n+EXECUTOR_ERROR_SM_MAIN_HASHS_"
  "VALUE_MISMATCH\020X\0221\n-EXECUTOR_ERROR_SM_MA"
  "IN_HASHS_PADDING_MISMATCH\020Y\022.\n*EXECUTOR_"
  "ERROR_SM_MAIN_HASHS_SIZE_MISMATCH\020Z\0223\n/E"
  "XECUTOR_ERROR_SM_MAIN_HASHSLEN_LENGTH_MI"
  "SMATCH\020[\0220\n,EXECUTOR_ERROR_SM_MAIN_HASHS"
  "LEN_CALLED_TWICE\020\\\0220\n,EXECUTOR_ERROR_SM_"
  "MAIN_HASHSDIGEST_NOT_FOUND\020]\0226\n2EXECUTOR"
  "_ERROR_SM_MAIN_HASHSDIGEST_DIGEST_MISMAT"
  "CH\020^\0223\n/EXECUTOR_ERROR_SM_MAIN_HASHSDIGE"
  "ST_CALLED_TWICE\020_\0222\n.EXECUTOR_ERROR_SM_M"
  "AIN_HASHS_READ_OUT_OF_RANGE\020`\022\'\n#EXECUTO"
  "R_ERROR_INVALID_L1_INFO_ROOT\020a\022.\n*EXECUT"
  "OR_ERROR_INVALID_FORCED_BLOCKHASH_L1\020b\0226"
  "\n2EXECUTOR_ERROR_INVALID_L1_DATA_V2_GLOB"
  "AL_EXIT_ROOT\020c\0223\n/EXECUTOR_ERROR_INVALID"
  "_L1_DATA_V2_BLOCK_HASH_L1\020d\022\'\n#EXECUTOR_"
  "ERROR_INVALID_L1_SMT_PROOF\020e\022\"\n\036EXECUTOR"
  "_ERROR_INVALID_BALANCE\020f\022.\n*EXECUTOR_ERR"
  "OR_SM_MAIN_BINARY_LT4_MISMATCH\020g\022)\n%EXEC"
  "UTOR_ERROR_INVALID_NEW_STATE_ROOT\020h\022-\n)E"
  "XECUTOR_ERROR_INVALID_NEW_ACC_INPUT_HASH"
  "\020i\022.\n*EXECUTOR_ERROR_INVALID_NEW_LOCAL_E"
  "XIT_ROOT\020j\022#\n\037EXECUTOR_ERROR_DB_KEY_NOT_"
  "FOUND\020k\022(\n$EXECUTOR_ERROR_SMT_INVALID_DA"
  "TA_SIZE\020l\022$\n EXECUTOR_ERROR_HASHDB_GRPC_"
  "ERROR\020m\022 \n\034EXECUTOR_ERROR_STATE_MANAGER\020"
  "n\022-\n)EXECUTOR_ERROR_INVALID_L1_INFO_TREE"
  "_INDEX\020o\0227\n3EXECUTOR_ERROR_INVALID_L1_IN"
  "FO_TREE_SMT_PROOF_VALUE\020p\022\"\n\036EXECUTOR_ER"
  "ROR_INVALID_WITNESS\020q\022\037\n\033EXECUTOR_ERROR_"
  "INVALID_CBOR\020r\022&\n\"EXECUTOR_ERROR_INVALID"
  "_DATA_STREAM\020s\022-\n)EXECUTOR_ERROR_INVALID"
  "_UPDATE_MERKLE_TREE\020t\022*\n&EXECUTOR_ERROR_"
  "UNSUPPORTED_PRECOMPILED\020u\022\030\n\024EXECUTOR_ER"
  "ROR_OOG_2\020v\022\036\n\032EXECUTOR_ERROR_CLOSE_BATC"
  "H\020w2\205\003\n\017ExecutorService\022U\n\014ProcessBatch\022"
  " .executor.v1.ProcessBatchRequest\032!.exec"
  "utor.v1.ProcessBatchResponse\"\000\022[\n\016Proces"
  "sBatchV2\022\".executor.v1.ProcessBatchReque"
  "stV2\032#.executor.v1.ProcessBatchResponseV"
  "2\"\000\022m\n\027ProcessStatelessBatchV2\022+.executo"
  "r.v1.ProcessStatelessBatchRequestV2\032#.ex"
  "ecutor.v1.ProcessBatchResponseV2\"\000\022O\n\016Ge"
  "tFlushStatus\022\026.google.protobuf.Empty\032#.e"
  "xecutor.v1.GetFlushStatusResponse\"\000B>Z<g"
  "ithub.com/0xPolygonHermez/zkevm-node/sta"
  "te/runtime/executorb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_executor_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_executor_2eproto_sccs[42] = {
  &scc_info_Contract_executor_2eproto.base,
  &scc_info_ContractV2_executor_2eproto.base,
  &scc_info_DebugV2_executor_2eproto.base,
  &scc_info_FullTrace_executor_2eproto.base,
  &scc_info_FullTraceV2_executor_2eproto.base,
  &scc_info_GetFlushStatusResponse_executor_2eproto.base,
  &scc_info_InfoReadWrite_executor_2eproto.base,
  &scc_info_InfoReadWriteV2_executor_2eproto.base,
  &scc_info_L1DataV2_executor_2eproto.base,
  &scc_info_Log_executor_2eproto.base,
  &scc_info_LogV2_executor_2eproto.base,
  &scc_info_OverrideAccount_executor_2eproto.base,
  &scc_info_OverrideAccount_StateDiffEntry_DoNotUse_executor_2eproto.base,
  &scc_info_OverrideAccount_StateEntry_DoNotUse_executor_2eproto.base,
  &scc_info_OverrideAccountV2_executor_2eproto.base,
  &scc_info_OverrideAccountV2_StateDiffEntry_DoNotUse_executor_2eproto.base,
  &scc_info_OverrideAccountV2_StateEntry_DoNotUse_executor_2eproto.base,
  &scc_info_ProcessBatchRequest_executor_2eproto.base,
  &scc_info_ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse_executor_2eproto.base,
  &scc_info_ProcessBatchRequest_DbEntry_DoNotUse_executor_2eproto.base,
  &scc_info_ProcessBatchRequest_StateOverrideEntry_DoNotUse_executor_2eproto.base,
  &scc_info_ProcessBatchRequestV2_executor_2eproto.base,
  &scc_info_ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse_executor_2eproto.base,
  &scc_info_ProcessBatchRequestV2_DbEntry_DoNotUse_executor_2eproto.base,
  &scc_info_ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse_executor_2eproto.base,
  &scc_info_ProcessBatchRequestV2_StateOverrideEntry_DoNotUse_executor_2eproto.base,
  &scc_info_ProcessBatchResponse_executor_2eproto.base,
  &scc_info_ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse_executor_2eproto.base,
  &scc_info_ProcessBatchResponseV2_executor_2eproto.base,
  &scc_info_ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse_executor_2eproto.base,
  &scc_info_ProcessBlockResponseV2_executor_2eproto.base,
  &scc_info_ProcessStatelessBatchRequestV2_executor_2eproto.base,
  &scc_info_ProcessTransactionResponse_executor_2eproto.base,
  &scc_info_ProcessTransactionResponseV2_executor_2eproto.base,
  &scc_info_TraceConfig_executor_2eproto.base,
  &scc_info_TraceConfigV2_executor_2eproto.base,
  &scc_info_TransactionContext_executor_2eproto.base,
  &scc_info_TransactionContextV2_executor_2eproto.base,
  &scc_info_TransactionStep_executor_2eproto.base,
  &scc_info_TransactionStep_StorageEntry_DoNotUse_executor_2eproto.base,
  &scc_info_TransactionStepV2_executor_2eproto.base,
  &scc_info_TransactionStepV2_StorageEntry_DoNotUse_executor_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_executor_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_executor_2eproto = {
  false, false, descriptor_table_protodef_executor_2eproto, "executor.proto", 16027,
  &descriptor_table_executor_2eproto_once, descriptor_table_executor_2eproto_sccs, descriptor_table_executor_2eproto_deps, 42, 1,
  schemas, file_default_instances, TableStruct_executor_2eproto::offsets,
  file_level_metadata_executor_2eproto, 42, file_level_enum_descriptors_executor_2eproto, file_level_service_descriptors_executor_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_executor_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_executor_2eproto)), true);
namespace executor {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RomError_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_executor_2eproto);
  return file_level_enum_descriptors_executor_2eproto[0];
}
bool RomError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExecutorError_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_executor_2eproto);
  return file_level_enum_descriptors_executor_2eproto[1];
}
bool ExecutorError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
      return true;
    default:
      return false;
  }
}


// ===================================================================

ProcessBatchRequest_DbEntry_DoNotUse::ProcessBatchRequest_DbEntry_DoNotUse() {}
ProcessBatchRequest_DbEntry_DoNotUse::ProcessBatchRequest_DbEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProcessBatchRequest_DbEntry_DoNotUse::MergeFrom(const ProcessBatchRequest_DbEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProcessBatchRequest_DbEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ProcessBatchRequest_DbEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse::ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse() {}
ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse::ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse::MergeFrom(const ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

ProcessBatchRequest_StateOverrideEntry_DoNotUse::ProcessBatchRequest_StateOverrideEntry_DoNotUse() {}
ProcessBatchRequest_StateOverrideEntry_DoNotUse::ProcessBatchRequest_StateOverrideEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProcessBatchRequest_StateOverrideEntry_DoNotUse::MergeFrom(const ProcessBatchRequest_StateOverrideEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProcessBatchRequest_StateOverrideEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ProcessBatchRequest_StateOverrideEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ProcessBatchRequest::InitAsDefaultInstance() {
  ::executor::v1::_ProcessBatchRequest_default_instance_._instance.get_mutable()->trace_config_ = const_cast< ::executor::v1::TraceConfig*>(
      ::executor::v1::TraceConfig::internal_default_instance());
}
class ProcessBatchRequest::_Internal {
 public:
  static const ::executor::v1::TraceConfig& trace_config(const ProcessBatchRequest* msg);
};

const ::executor::v1::TraceConfig&
ProcessBatchRequest::_Internal::trace_config(const ProcessBatchRequest* msg) {
  return *msg->trace_config_;
}
ProcessBatchRequest::ProcessBatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  db_(arena),
  contracts_bytecode_(arena),
  state_override_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.ProcessBatchRequest)
}
ProcessBatchRequest::ProcessBatchRequest(const ProcessBatchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  db_.MergeFrom(from.db_);
  contracts_bytecode_.MergeFrom(from.contracts_bytecode_);
  state_override_.MergeFrom(from.state_override_);
  old_state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_old_state_root().empty()) {
    old_state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_old_state_root(),
      GetArena());
  }
  old_acc_input_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_old_acc_input_hash().empty()) {
    old_acc_input_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_old_acc_input_hash(),
      GetArena());
  }
  batch_l2_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_batch_l2_data().empty()) {
    batch_l2_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_batch_l2_data(),
      GetArena());
  }
  global_exit_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_global_exit_root().empty()) {
    global_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_global_exit_root(),
      GetArena());
  }
  coinbase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_coinbase().empty()) {
    coinbase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_coinbase(),
      GetArena());
  }
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_from(),
      GetArena());
  }
  context_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_context_id().empty()) {
    context_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_context_id(),
      GetArena());
  }
  if (from._internal_has_trace_config()) {
    trace_config_ = new ::executor::v1::TraceConfig(*from.trace_config_);
  } else {
    trace_config_ = nullptr;
  }
  ::memcpy(&old_batch_num_, &from.old_batch_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&update_merkle_tree_) -
    reinterpret_cast<char*>(&old_batch_num_)) + sizeof(update_merkle_tree_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.ProcessBatchRequest)
}

void ProcessBatchRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessBatchRequest_executor_2eproto.base);
  old_state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_acc_input_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  batch_l2_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  global_exit_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coinbase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  context_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&trace_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_merkle_tree_) -
      reinterpret_cast<char*>(&trace_config_)) + sizeof(update_merkle_tree_));
}

ProcessBatchRequest::~ProcessBatchRequest() {
  // @@protoc_insertion_point(destructor:executor.v1.ProcessBatchRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProcessBatchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  old_state_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_acc_input_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  batch_l2_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  global_exit_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coinbase_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  context_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete trace_config_;
}

void ProcessBatchRequest::ArenaDtor(void* object) {
  ProcessBatchRequest* _this = reinterpret_cast< ProcessBatchRequest* >(object);
  (void)_this;
}
void ProcessBatchRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessBatchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessBatchRequest& ProcessBatchRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessBatchRequest_executor_2eproto.base);
  return *internal_default_instance();
}


void ProcessBatchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.ProcessBatchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  db_.Clear();
  contracts_bytecode_.Clear();
  state_override_.Clear();
  old_state_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  old_acc_input_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  batch_l2_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  global_exit_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  coinbase_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  from_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  context_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && trace_config_ != nullptr) {
    delete trace_config_;
  }
  trace_config_ = nullptr;
  ::memset(&old_batch_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_merkle_tree_) -
      reinterpret_cast<char*>(&old_batch_num_)) + sizeof(update_merkle_tree_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessBatchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes old_state_root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_old_state_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes old_acc_input_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_old_acc_input_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 old_batch_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          old_batch_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 chain_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          chain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 fork_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          fork_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes batch_l2_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_batch_l2_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes global_exit_root = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_global_exit_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 eth_timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          eth_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string coinbase = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_coinbase();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.ProcessBatchRequest.coinbase"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 update_merkle_tree = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          update_merkle_tree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 no_counters = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          no_counters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string from = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.ProcessBatchRequest.from"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> db = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&db_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> contracts_bytecode = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&contracts_bytecode_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // .executor.v1.TraceConfig trace_config = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_trace_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string context_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_context_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.ProcessBatchRequest.context_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .executor.v1.OverrideAccount> state_override = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&state_override_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessBatchRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.ProcessBatchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes old_state_root = 1;
  if (this->old_state_root().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_old_state_root(), target);
  }

  // bytes old_acc_input_hash = 2;
  if (this->old_acc_input_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_old_acc_input_hash(), target);
  }

  // uint64 old_batch_num = 3;
  if (this->old_batch_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_old_batch_num(), target);
  }

  // uint64 chain_id = 4;
  if (this->chain_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_chain_id(), target);
  }

  // uint64 fork_id = 5;
  if (this->fork_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_fork_id(), target);
  }

  // bytes batch_l2_data = 6;
  if (this->batch_l2_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_batch_l2_data(), target);
  }

  // bytes global_exit_root = 7;
  if (this->global_exit_root().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_global_exit_root(), target);
  }

  // uint64 eth_timestamp = 8;
  if (this->eth_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_eth_timestamp(), target);
  }

  // string coinbase = 9;
  if (this->coinbase().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_coinbase().data(), static_cast<int>(this->_internal_coinbase().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessBatchRequest.coinbase");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_coinbase(), target);
  }

  // uint32 update_merkle_tree = 10;
  if (this->update_merkle_tree() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_update_merkle_tree(), target);
  }

  // uint64 no_counters = 11;
  if (this->no_counters() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_no_counters(), target);
  }

  // string from = 12;
  if (this->from().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessBatchRequest.from");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_from(), target);
  }

  // map<string, string> db = 13;
  if (!this->_internal_db().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "executor.v1.ProcessBatchRequest.DbEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "executor.v1.ProcessBatchRequest.DbEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_db().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_db().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_db().begin();
          it != this->_internal_db().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ProcessBatchRequest_DbEntry_DoNotUse::Funcs::InternalSerialize(13, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_db().begin();
          it != this->_internal_db().end(); ++it) {
        target = ProcessBatchRequest_DbEntry_DoNotUse::Funcs::InternalSerialize(13, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> contracts_bytecode = 14;
  if (!this->_internal_contracts_bytecode().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "executor.v1.ProcessBatchRequest.ContractsBytecodeEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "executor.v1.ProcessBatchRequest.ContractsBytecodeEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_contracts_bytecode().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_contracts_bytecode().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_contracts_bytecode().begin();
          it != this->_internal_contracts_bytecode().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse::Funcs::InternalSerialize(14, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_contracts_bytecode().begin();
          it != this->_internal_contracts_bytecode().end(); ++it) {
        target = ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse::Funcs::InternalSerialize(14, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .executor.v1.TraceConfig trace_config = 15;
  if (this->has_trace_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::trace_config(this), target, stream);
  }

  // string context_id = 16;
  if (this->context_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_context_id().data(), static_cast<int>(this->_internal_context_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessBatchRequest.context_id");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_context_id(), target);
  }

  // map<string, .executor.v1.OverrideAccount> state_override = 17;
  if (!this->_internal_state_override().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::executor::v1::OverrideAccount >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "executor.v1.ProcessBatchRequest.StateOverrideEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_state_override().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_state_override().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::executor::v1::OverrideAccount >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::executor::v1::OverrideAccount >::const_iterator
          it = this->_internal_state_override().begin();
          it != this->_internal_state_override().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ProcessBatchRequest_StateOverrideEntry_DoNotUse::Funcs::InternalSerialize(17, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::executor::v1::OverrideAccount >::const_iterator
          it = this->_internal_state_override().begin();
          it != this->_internal_state_override().end(); ++it) {
        target = ProcessBatchRequest_StateOverrideEntry_DoNotUse::Funcs::InternalSerialize(17, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.ProcessBatchRequest)
  return target;
}

size_t ProcessBatchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.ProcessBatchRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> db = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_db_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_db().begin();
      it != this->_internal_db().end(); ++it) {
    total_size += ProcessBatchRequest_DbEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> contracts_bytecode = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_contracts_bytecode_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_contracts_bytecode().begin();
      it != this->_internal_contracts_bytecode().end(); ++it) {
    total_size += ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .executor.v1.OverrideAccount> state_override = 17;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_state_override_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::executor::v1::OverrideAccount >::const_iterator
      it = this->_internal_state_override().begin();
      it != this->_internal_state_override().end(); ++it) {
    total_size += ProcessBatchRequest_StateOverrideEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes old_state_root = 1;
  if (this->old_state_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_old_state_root());
  }

  // bytes old_acc_input_hash = 2;
  if (this->old_acc_input_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_old_acc_input_hash());
  }

  // bytes batch_l2_data = 6;
  if (this->batch_l2_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_batch_l2_data());
  }

  // bytes global_exit_root = 7;
  if (this->global_exit_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_global_exit_root());
  }

  // string coinbase = 9;
  if (this->coinbase().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_coinbase());
  }

  // string from = 12;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  // string context_id = 16;
  if (this->context_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_context_id());
  }

  // .executor.v1.TraceConfig trace_config = 15;
  if (this->has_trace_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trace_config_);
  }

  // uint64 old_batch_num = 3;
  if (this->old_batch_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_old_batch_num());
  }

  // uint64 chain_id = 4;
  if (this->chain_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_chain_id());
  }

  // uint64 fork_id = 5;
  if (this->fork_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_fork_id());
  }

  // uint64 eth_timestamp = 8;
  if (this->eth_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_eth_timestamp());
  }

  // uint64 no_counters = 11;
  if (this->no_counters() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_no_counters());
  }

  // uint32 update_merkle_tree = 10;
  if (this->update_merkle_tree() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_update_merkle_tree());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessBatchRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.ProcessBatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessBatchRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessBatchRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.ProcessBatchRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.ProcessBatchRequest)
    MergeFrom(*source);
  }
}

void ProcessBatchRequest::MergeFrom(const ProcessBatchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.ProcessBatchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  db_.MergeFrom(from.db_);
  contracts_bytecode_.MergeFrom(from.contracts_bytecode_);
  state_override_.MergeFrom(from.state_override_);
  if (from.old_state_root().size() > 0) {
    _internal_set_old_state_root(from._internal_old_state_root());
  }
  if (from.old_acc_input_hash().size() > 0) {
    _internal_set_old_acc_input_hash(from._internal_old_acc_input_hash());
  }
  if (from.batch_l2_data().size() > 0) {
    _internal_set_batch_l2_data(from._internal_batch_l2_data());
  }
  if (from.global_exit_root().size() > 0) {
    _internal_set_global_exit_root(from._internal_global_exit_root());
  }
  if (from.coinbase().size() > 0) {
    _internal_set_coinbase(from._internal_coinbase());
  }
  if (from.from().size() > 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.context_id().size() > 0) {
    _internal_set_context_id(from._internal_context_id());
  }
  if (from.has_trace_config()) {
    _internal_mutable_trace_config()->::executor::v1::TraceConfig::MergeFrom(from._internal_trace_config());
  }
  if (from.old_batch_num() != 0) {
    _internal_set_old_batch_num(from._internal_old_batch_num());
  }
  if (from.chain_id() != 0) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  if (from.fork_id() != 0) {
    _internal_set_fork_id(from._internal_fork_id());
  }
  if (from.eth_timestamp() != 0) {
    _internal_set_eth_timestamp(from._internal_eth_timestamp());
  }
  if (from.no_counters() != 0) {
    _internal_set_no_counters(from._internal_no_counters());
  }
  if (from.update_merkle_tree() != 0) {
    _internal_set_update_merkle_tree(from._internal_update_merkle_tree());
  }
}

void ProcessBatchRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.ProcessBatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessBatchRequest::CopyFrom(const ProcessBatchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.ProcessBatchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessBatchRequest::IsInitialized() const {
  return true;
}

void ProcessBatchRequest::InternalSwap(ProcessBatchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  db_.Swap(&other->db_);
  contracts_bytecode_.Swap(&other->contracts_bytecode_);
  state_override_.Swap(&other->state_override_);
  old_state_root_.Swap(&other->old_state_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  old_acc_input_hash_.Swap(&other->old_acc_input_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  batch_l2_data_.Swap(&other->batch_l2_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  global_exit_root_.Swap(&other->global_exit_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  coinbase_.Swap(&other->coinbase_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  context_id_.Swap(&other->context_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessBatchRequest, update_merkle_tree_)
      + sizeof(ProcessBatchRequest::update_merkle_tree_)
      - PROTOBUF_FIELD_OFFSET(ProcessBatchRequest, trace_config_)>(
          reinterpret_cast<char*>(&trace_config_),
          reinterpret_cast<char*>(&other->trace_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessBatchRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse::ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse() {}
ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse::ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse::MergeFrom(const ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ProcessBatchResponse::InitAsDefaultInstance() {
}
class ProcessBatchResponse::_Internal {
 public:
};

ProcessBatchResponse::ProcessBatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  responses_(arena),
  read_write_addresses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.ProcessBatchResponse)
}
ProcessBatchResponse::ProcessBatchResponse(const ProcessBatchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  read_write_addresses_.MergeFrom(from.read_write_addresses_);
  new_state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_state_root().empty()) {
    new_state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_new_state_root(),
      GetArena());
  }
  new_acc_input_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_acc_input_hash().empty()) {
    new_acc_input_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_new_acc_input_hash(),
      GetArena());
  }
  new_local_exit_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_local_exit_root().empty()) {
    new_local_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_new_local_exit_root(),
      GetArena());
  }
  prover_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prover_id().empty()) {
    prover_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prover_id(),
      GetArena());
  }
  ::memcpy(&new_batch_num_, &from.new_batch_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&fork_id_) -
    reinterpret_cast<char*>(&new_batch_num_)) + sizeof(fork_id_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.ProcessBatchResponse)
}

void ProcessBatchResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessBatchResponse_executor_2eproto.base);
  new_state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_acc_input_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_local_exit_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prover_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&new_batch_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fork_id_) -
      reinterpret_cast<char*>(&new_batch_num_)) + sizeof(fork_id_));
}

ProcessBatchResponse::~ProcessBatchResponse() {
  // @@protoc_insertion_point(destructor:executor.v1.ProcessBatchResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProcessBatchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  new_state_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_acc_input_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_local_exit_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prover_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProcessBatchResponse::ArenaDtor(void* object) {
  ProcessBatchResponse* _this = reinterpret_cast< ProcessBatchResponse* >(object);
  (void)_this;
}
void ProcessBatchResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessBatchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessBatchResponse& ProcessBatchResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessBatchResponse_executor_2eproto.base);
  return *internal_default_instance();
}


void ProcessBatchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.ProcessBatchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  read_write_addresses_.Clear();
  new_state_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_acc_input_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_local_exit_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prover_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&new_batch_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fork_id_) -
      reinterpret_cast<char*>(&new_batch_num_)) + sizeof(fork_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessBatchResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes new_state_root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_new_state_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes new_acc_input_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_new_acc_input_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes new_local_exit_root = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_new_local_exit_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 new_batch_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          new_batch_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cnt_keccak_hashes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          cnt_keccak_hashes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cnt_poseidon_hashes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          cnt_poseidon_hashes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cnt_poseidon_paddings = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          cnt_poseidon_paddings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cnt_mem_aligns = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          cnt_mem_aligns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cnt_arithmetics = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          cnt_arithmetics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cnt_binaries = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          cnt_binaries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cnt_steps = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          cnt_steps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 cumulative_gas_used = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          cumulative_gas_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .executor.v1.ProcessTransactionResponse responses = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // .executor.v1.ExecutorError error = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::executor::v1::ExecutorError>(val));
        } else goto handle_unusual;
        continue;
      // map<string, .executor.v1.InfoReadWrite> read_write_addresses = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&read_write_addresses_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 flush_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          flush_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 stored_flush_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          stored_flush_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prover_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_prover_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.ProcessBatchResponse.prover_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 fork_id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          fork_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessBatchResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.ProcessBatchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes new_state_root = 1;
  if (this->new_state_root().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_new_state_root(), target);
  }

  // bytes new_acc_input_hash = 2;
  if (this->new_acc_input_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_new_acc_input_hash(), target);
  }

  // bytes new_local_exit_root = 3;
  if (this->new_local_exit_root().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_new_local_exit_root(), target);
  }

  // uint64 new_batch_num = 4;
  if (this->new_batch_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_new_batch_num(), target);
  }

  // uint32 cnt_keccak_hashes = 5;
  if (this->cnt_keccak_hashes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_cnt_keccak_hashes(), target);
  }

  // uint32 cnt_poseidon_hashes = 6;
  if (this->cnt_poseidon_hashes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_cnt_poseidon_hashes(), target);
  }

  // uint32 cnt_poseidon_paddings = 7;
  if (this->cnt_poseidon_paddings() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_cnt_poseidon_paddings(), target);
  }

  // uint32 cnt_mem_aligns = 8;
  if (this->cnt_mem_aligns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_cnt_mem_aligns(), target);
  }

  // uint32 cnt_arithmetics = 9;
  if (this->cnt_arithmetics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_cnt_arithmetics(), target);
  }

  // uint32 cnt_binaries = 10;
  if (this->cnt_binaries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_cnt_binaries(), target);
  }

  // uint32 cnt_steps = 11;
  if (this->cnt_steps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_cnt_steps(), target);
  }

  // uint64 cumulative_gas_used = 12;
  if (this->cumulative_gas_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_cumulative_gas_used(), target);
  }

  // repeated .executor.v1.ProcessTransactionResponse responses = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_responses(i), target, stream);
  }

  // .executor.v1.ExecutorError error = 14;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_error(), target);
  }

  // map<string, .executor.v1.InfoReadWrite> read_write_addresses = 15;
  if (!this->_internal_read_write_addresses().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::executor::v1::InfoReadWrite >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "executor.v1.ProcessBatchResponse.ReadWriteAddressesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_read_write_addresses().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_read_write_addresses().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::executor::v1::InfoReadWrite >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::executor::v1::InfoReadWrite >::const_iterator
          it = this->_internal_read_write_addresses().begin();
          it != this->_internal_read_write_addresses().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse::Funcs::InternalSerialize(15, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::executor::v1::InfoReadWrite >::const_iterator
          it = this->_internal_read_write_addresses().begin();
          it != this->_internal_read_write_addresses().end(); ++it) {
        target = ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse::Funcs::InternalSerialize(15, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // uint64 flush_id = 16;
  if (this->flush_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_flush_id(), target);
  }

  // uint64 stored_flush_id = 17;
  if (this->stored_flush_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_stored_flush_id(), target);
  }

  // string prover_id = 18;
  if (this->prover_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prover_id().data(), static_cast<int>(this->_internal_prover_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessBatchResponse.prover_id");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_prover_id(), target);
  }

  // uint64 fork_id = 19;
  if (this->fork_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(19, this->_internal_fork_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.ProcessBatchResponse)
  return target;
}

size_t ProcessBatchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.ProcessBatchResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .executor.v1.ProcessTransactionResponse responses = 13;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .executor.v1.InfoReadWrite> read_write_addresses = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_read_write_addresses_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::executor::v1::InfoReadWrite >::const_iterator
      it = this->_internal_read_write_addresses().begin();
      it != this->_internal_read_write_addresses().end(); ++it) {
    total_size += ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes new_state_root = 1;
  if (this->new_state_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_new_state_root());
  }

  // bytes new_acc_input_hash = 2;
  if (this->new_acc_input_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_new_acc_input_hash());
  }

  // bytes new_local_exit_root = 3;
  if (this->new_local_exit_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_new_local_exit_root());
  }

  // string prover_id = 18;
  if (this->prover_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prover_id());
  }

  // uint64 new_batch_num = 4;
  if (this->new_batch_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_new_batch_num());
  }

  // uint32 cnt_keccak_hashes = 5;
  if (this->cnt_keccak_hashes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cnt_keccak_hashes());
  }

  // uint32 cnt_poseidon_hashes = 6;
  if (this->cnt_poseidon_hashes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cnt_poseidon_hashes());
  }

  // uint32 cnt_poseidon_paddings = 7;
  if (this->cnt_poseidon_paddings() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cnt_poseidon_paddings());
  }

  // uint32 cnt_mem_aligns = 8;
  if (this->cnt_mem_aligns() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cnt_mem_aligns());
  }

  // uint32 cnt_arithmetics = 9;
  if (this->cnt_arithmetics() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cnt_arithmetics());
  }

  // uint32 cnt_binaries = 10;
  if (this->cnt_binaries() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cnt_binaries());
  }

  // uint64 cumulative_gas_used = 12;
  if (this->cumulative_gas_used() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_cumulative_gas_used());
  }

  // uint32 cnt_steps = 11;
  if (this->cnt_steps() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cnt_steps());
  }

  // .executor.v1.ExecutorError error = 14;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  // uint64 flush_id = 16;
  if (this->flush_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_flush_id());
  }

  // uint64 stored_flush_id = 17;
  if (this->stored_flush_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_stored_flush_id());
  }

  // uint64 fork_id = 19;
  if (this->fork_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_fork_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessBatchResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.ProcessBatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessBatchResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessBatchResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.ProcessBatchResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.ProcessBatchResponse)
    MergeFrom(*source);
  }
}

void ProcessBatchResponse::MergeFrom(const ProcessBatchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.ProcessBatchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  read_write_addresses_.MergeFrom(from.read_write_addresses_);
  if (from.new_state_root().size() > 0) {
    _internal_set_new_state_root(from._internal_new_state_root());
  }
  if (from.new_acc_input_hash().size() > 0) {
    _internal_set_new_acc_input_hash(from._internal_new_acc_input_hash());
  }
  if (from.new_local_exit_root().size() > 0) {
    _internal_set_new_local_exit_root(from._internal_new_local_exit_root());
  }
  if (from.prover_id().size() > 0) {
    _internal_set_prover_id(from._internal_prover_id());
  }
  if (from.new_batch_num() != 0) {
    _internal_set_new_batch_num(from._internal_new_batch_num());
  }
  if (from.cnt_keccak_hashes() != 0) {
    _internal_set_cnt_keccak_hashes(from._internal_cnt_keccak_hashes());
  }
  if (from.cnt_poseidon_hashes() != 0) {
    _internal_set_cnt_poseidon_hashes(from._internal_cnt_poseidon_hashes());
  }
  if (from.cnt_poseidon_paddings() != 0) {
    _internal_set_cnt_poseidon_paddings(from._internal_cnt_poseidon_paddings());
  }
  if (from.cnt_mem_aligns() != 0) {
    _internal_set_cnt_mem_aligns(from._internal_cnt_mem_aligns());
  }
  if (from.cnt_arithmetics() != 0) {
    _internal_set_cnt_arithmetics(from._internal_cnt_arithmetics());
  }
  if (from.cnt_binaries() != 0) {
    _internal_set_cnt_binaries(from._internal_cnt_binaries());
  }
  if (from.cumulative_gas_used() != 0) {
    _internal_set_cumulative_gas_used(from._internal_cumulative_gas_used());
  }
  if (from.cnt_steps() != 0) {
    _internal_set_cnt_steps(from._internal_cnt_steps());
  }
  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
  if (from.flush_id() != 0) {
    _internal_set_flush_id(from._internal_flush_id());
  }
  if (from.stored_flush_id() != 0) {
    _internal_set_stored_flush_id(from._internal_stored_flush_id());
  }
  if (from.fork_id() != 0) {
    _internal_set_fork_id(from._internal_fork_id());
  }
}

void ProcessBatchResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.ProcessBatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessBatchResponse::CopyFrom(const ProcessBatchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.ProcessBatchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessBatchResponse::IsInitialized() const {
  return true;
}

void ProcessBatchResponse::InternalSwap(ProcessBatchResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
  read_write_addresses_.Swap(&other->read_write_addresses_);
  new_state_root_.Swap(&other->new_state_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_acc_input_hash_.Swap(&other->new_acc_input_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_local_exit_root_.Swap(&other->new_local_exit_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prover_id_.Swap(&other->prover_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessBatchResponse, fork_id_)
      + sizeof(ProcessBatchResponse::fork_id_)
      - PROTOBUF_FIELD_OFFSET(ProcessBatchResponse, new_batch_num_)>(
          reinterpret_cast<char*>(&new_batch_num_),
          reinterpret_cast<char*>(&other->new_batch_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessBatchResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetFlushStatusResponse::InitAsDefaultInstance() {
}
class GetFlushStatusResponse::_Internal {
 public:
};

GetFlushStatusResponse::GetFlushStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.GetFlushStatusResponse)
}
GetFlushStatusResponse::GetFlushStatusResponse(const GetFlushStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prover_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prover_id().empty()) {
    prover_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prover_id(),
      GetArena());
  }
  ::memcpy(&stored_flush_id_, &from.stored_flush_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&storing_program_) -
    reinterpret_cast<char*>(&stored_flush_id_)) + sizeof(storing_program_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.GetFlushStatusResponse)
}

void GetFlushStatusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetFlushStatusResponse_executor_2eproto.base);
  prover_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&stored_flush_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&storing_program_) -
      reinterpret_cast<char*>(&stored_flush_id_)) + sizeof(storing_program_));
}

GetFlushStatusResponse::~GetFlushStatusResponse() {
  // @@protoc_insertion_point(destructor:executor.v1.GetFlushStatusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetFlushStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  prover_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetFlushStatusResponse::ArenaDtor(void* object) {
  GetFlushStatusResponse* _this = reinterpret_cast< GetFlushStatusResponse* >(object);
  (void)_this;
}
void GetFlushStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetFlushStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFlushStatusResponse& GetFlushStatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetFlushStatusResponse_executor_2eproto.base);
  return *internal_default_instance();
}


void GetFlushStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.GetFlushStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prover_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&stored_flush_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&storing_program_) -
      reinterpret_cast<char*>(&stored_flush_id_)) + sizeof(storing_program_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFlushStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 stored_flush_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          stored_flush_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 storing_flush_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          storing_flush_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 last_flush_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          last_flush_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 pending_to_flush_nodes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pending_to_flush_nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 pending_to_flush_program = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pending_to_flush_program_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 storing_nodes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          storing_nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 storing_program = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          storing_program_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prover_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_prover_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.GetFlushStatusResponse.prover_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFlushStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.GetFlushStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 stored_flush_id = 1;
  if (this->stored_flush_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_stored_flush_id(), target);
  }

  // uint64 storing_flush_id = 2;
  if (this->storing_flush_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_storing_flush_id(), target);
  }

  // uint64 last_flush_id = 3;
  if (this->last_flush_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_last_flush_id(), target);
  }

  // uint64 pending_to_flush_nodes = 4;
  if (this->pending_to_flush_nodes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_pending_to_flush_nodes(), target);
  }

  // uint64 pending_to_flush_program = 5;
  if (this->pending_to_flush_program() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_pending_to_flush_program(), target);
  }

  // uint64 storing_nodes = 6;
  if (this->storing_nodes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_storing_nodes(), target);
  }

  // uint64 storing_program = 7;
  if (this->storing_program() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_storing_program(), target);
  }

  // string prover_id = 8;
  if (this->prover_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prover_id().data(), static_cast<int>(this->_internal_prover_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.GetFlushStatusResponse.prover_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_prover_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.GetFlushStatusResponse)
  return target;
}

size_t GetFlushStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.GetFlushStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string prover_id = 8;
  if (this->prover_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prover_id());
  }

  // uint64 stored_flush_id = 1;
  if (this->stored_flush_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_stored_flush_id());
  }

  // uint64 storing_flush_id = 2;
  if (this->storing_flush_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_storing_flush_id());
  }

  // uint64 last_flush_id = 3;
  if (this->last_flush_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_last_flush_id());
  }

  // uint64 pending_to_flush_nodes = 4;
  if (this->pending_to_flush_nodes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pending_to_flush_nodes());
  }

  // uint64 pending_to_flush_program = 5;
  if (this->pending_to_flush_program() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pending_to_flush_program());
  }

  // uint64 storing_nodes = 6;
  if (this->storing_nodes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_storing_nodes());
  }

  // uint64 storing_program = 7;
  if (this->storing_program() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_storing_program());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFlushStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.GetFlushStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFlushStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetFlushStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.GetFlushStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.GetFlushStatusResponse)
    MergeFrom(*source);
  }
}

void GetFlushStatusResponse::MergeFrom(const GetFlushStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.GetFlushStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prover_id().size() > 0) {
    _internal_set_prover_id(from._internal_prover_id());
  }
  if (from.stored_flush_id() != 0) {
    _internal_set_stored_flush_id(from._internal_stored_flush_id());
  }
  if (from.storing_flush_id() != 0) {
    _internal_set_storing_flush_id(from._internal_storing_flush_id());
  }
  if (from.last_flush_id() != 0) {
    _internal_set_last_flush_id(from._internal_last_flush_id());
  }
  if (from.pending_to_flush_nodes() != 0) {
    _internal_set_pending_to_flush_nodes(from._internal_pending_to_flush_nodes());
  }
  if (from.pending_to_flush_program() != 0) {
    _internal_set_pending_to_flush_program(from._internal_pending_to_flush_program());
  }
  if (from.storing_nodes() != 0) {
    _internal_set_storing_nodes(from._internal_storing_nodes());
  }
  if (from.storing_program() != 0) {
    _internal_set_storing_program(from._internal_storing_program());
  }
}

void GetFlushStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.GetFlushStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFlushStatusResponse::CopyFrom(const GetFlushStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.GetFlushStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFlushStatusResponse::IsInitialized() const {
  return true;
}

void GetFlushStatusResponse::InternalSwap(GetFlushStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  prover_id_.Swap(&other->prover_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetFlushStatusResponse, storing_program_)
      + sizeof(GetFlushStatusResponse::storing_program_)
      - PROTOBUF_FIELD_OFFSET(GetFlushStatusResponse, stored_flush_id_)>(
          reinterpret_cast<char*>(&stored_flush_id_),
          reinterpret_cast<char*>(&other->stored_flush_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFlushStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TraceConfig::InitAsDefaultInstance() {
}
class TraceConfig::_Internal {
 public:
};

TraceConfig::TraceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.TraceConfig)
}
TraceConfig::TraceConfig(const TraceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tx_hash_to_generate_full_trace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tx_hash_to_generate_full_trace().empty()) {
    tx_hash_to_generate_full_trace_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tx_hash_to_generate_full_trace(),
      GetArena());
  }
  ::memcpy(&disable_storage_, &from.disable_storage_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_return_data_) -
    reinterpret_cast<char*>(&disable_storage_)) + sizeof(enable_return_data_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.TraceConfig)
}

void TraceConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TraceConfig_executor_2eproto.base);
  tx_hash_to_generate_full_trace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&disable_storage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_return_data_) -
      reinterpret_cast<char*>(&disable_storage_)) + sizeof(enable_return_data_));
}

TraceConfig::~TraceConfig() {
  // @@protoc_insertion_point(destructor:executor.v1.TraceConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TraceConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tx_hash_to_generate_full_trace_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TraceConfig::ArenaDtor(void* object) {
  TraceConfig* _this = reinterpret_cast< TraceConfig* >(object);
  (void)_this;
}
void TraceConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TraceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TraceConfig& TraceConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TraceConfig_executor_2eproto.base);
  return *internal_default_instance();
}


void TraceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.TraceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_hash_to_generate_full_trace_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&disable_storage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_return_data_) -
      reinterpret_cast<char*>(&disable_storage_)) + sizeof(enable_return_data_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 disable_storage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          disable_storage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 disable_stack = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          disable_stack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 enable_memory = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          enable_memory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 enable_return_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          enable_return_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes tx_hash_to_generate_full_trace = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_tx_hash_to_generate_full_trace();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TraceConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.TraceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 disable_storage = 1;
  if (this->disable_storage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_disable_storage(), target);
  }

  // uint32 disable_stack = 2;
  if (this->disable_stack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_disable_stack(), target);
  }

  // uint32 enable_memory = 3;
  if (this->enable_memory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_enable_memory(), target);
  }

  // uint32 enable_return_data = 4;
  if (this->enable_return_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_enable_return_data(), target);
  }

  // bytes tx_hash_to_generate_full_trace = 5;
  if (this->tx_hash_to_generate_full_trace().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_tx_hash_to_generate_full_trace(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.TraceConfig)
  return target;
}

size_t TraceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.TraceConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes tx_hash_to_generate_full_trace = 5;
  if (this->tx_hash_to_generate_full_trace().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx_hash_to_generate_full_trace());
  }

  // uint32 disable_storage = 1;
  if (this->disable_storage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_disable_storage());
  }

  // uint32 disable_stack = 2;
  if (this->disable_stack() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_disable_stack());
  }

  // uint32 enable_memory = 3;
  if (this->enable_memory() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_enable_memory());
  }

  // uint32 enable_return_data = 4;
  if (this->enable_return_data() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_enable_return_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.TraceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TraceConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TraceConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.TraceConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.TraceConfig)
    MergeFrom(*source);
  }
}

void TraceConfig::MergeFrom(const TraceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.TraceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tx_hash_to_generate_full_trace().size() > 0) {
    _internal_set_tx_hash_to_generate_full_trace(from._internal_tx_hash_to_generate_full_trace());
  }
  if (from.disable_storage() != 0) {
    _internal_set_disable_storage(from._internal_disable_storage());
  }
  if (from.disable_stack() != 0) {
    _internal_set_disable_stack(from._internal_disable_stack());
  }
  if (from.enable_memory() != 0) {
    _internal_set_enable_memory(from._internal_enable_memory());
  }
  if (from.enable_return_data() != 0) {
    _internal_set_enable_return_data(from._internal_enable_return_data());
  }
}

void TraceConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.TraceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraceConfig::CopyFrom(const TraceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.TraceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfig::IsInitialized() const {
  return true;
}

void TraceConfig::InternalSwap(TraceConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tx_hash_to_generate_full_trace_.Swap(&other->tx_hash_to_generate_full_trace_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceConfig, enable_return_data_)
      + sizeof(TraceConfig::enable_return_data_)
      - PROTOBUF_FIELD_OFFSET(TraceConfig, disable_storage_)>(
          reinterpret_cast<char*>(&disable_storage_),
          reinterpret_cast<char*>(&other->disable_storage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

OverrideAccount_StateEntry_DoNotUse::OverrideAccount_StateEntry_DoNotUse() {}
OverrideAccount_StateEntry_DoNotUse::OverrideAccount_StateEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void OverrideAccount_StateEntry_DoNotUse::MergeFrom(const OverrideAccount_StateEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata OverrideAccount_StateEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void OverrideAccount_StateEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

OverrideAccount_StateDiffEntry_DoNotUse::OverrideAccount_StateDiffEntry_DoNotUse() {}
OverrideAccount_StateDiffEntry_DoNotUse::OverrideAccount_StateDiffEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void OverrideAccount_StateDiffEntry_DoNotUse::MergeFrom(const OverrideAccount_StateDiffEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata OverrideAccount_StateDiffEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void OverrideAccount_StateDiffEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void OverrideAccount::InitAsDefaultInstance() {
}
class OverrideAccount::_Internal {
 public:
};

OverrideAccount::OverrideAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  state_(arena),
  state_diff_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.OverrideAccount)
}
OverrideAccount::OverrideAccount(const OverrideAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_.MergeFrom(from.state_);
  state_diff_.MergeFrom(from.state_diff_);
  balance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_balance().empty()) {
    balance_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_balance(),
      GetArena());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_code(),
      GetArena());
  }
  nonce_ = from.nonce_;
  // @@protoc_insertion_point(copy_constructor:executor.v1.OverrideAccount)
}

void OverrideAccount::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OverrideAccount_executor_2eproto.base);
  balance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nonce_ = PROTOBUF_ULONGLONG(0);
}

OverrideAccount::~OverrideAccount() {
  // @@protoc_insertion_point(destructor:executor.v1.OverrideAccount)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OverrideAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  balance_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OverrideAccount::ArenaDtor(void* object) {
  OverrideAccount* _this = reinterpret_cast< OverrideAccount* >(object);
  (void)_this;
}
void OverrideAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OverrideAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OverrideAccount& OverrideAccount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OverrideAccount_executor_2eproto.base);
  return *internal_default_instance();
}


void OverrideAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.OverrideAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_.Clear();
  state_diff_.Clear();
  balance_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nonce_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OverrideAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes balance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_balance();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 nonce = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&state_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> state_diff = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&state_diff_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OverrideAccount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.OverrideAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes balance = 1;
  if (this->balance().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_balance(), target);
  }

  // uint64 nonce = 2;
  if (this->nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_nonce(), target);
  }

  // bytes code = 3;
  if (this->code().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_code(), target);
  }

  // map<string, string> state = 4;
  if (!this->_internal_state().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "executor.v1.OverrideAccount.StateEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "executor.v1.OverrideAccount.StateEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_state().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_state().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_state().begin();
          it != this->_internal_state().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = OverrideAccount_StateEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_state().begin();
          it != this->_internal_state().end(); ++it) {
        target = OverrideAccount_StateEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> state_diff = 5;
  if (!this->_internal_state_diff().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "executor.v1.OverrideAccount.StateDiffEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "executor.v1.OverrideAccount.StateDiffEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_state_diff().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_state_diff().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_state_diff().begin();
          it != this->_internal_state_diff().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = OverrideAccount_StateDiffEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_state_diff().begin();
          it != this->_internal_state_diff().end(); ++it) {
        target = OverrideAccount_StateDiffEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.OverrideAccount)
  return target;
}

size_t OverrideAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.OverrideAccount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> state = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_state_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_state().begin();
      it != this->_internal_state().end(); ++it) {
    total_size += OverrideAccount_StateEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> state_diff = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_state_diff_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_state_diff().begin();
      it != this->_internal_state_diff().end(); ++it) {
    total_size += OverrideAccount_StateDiffEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes balance = 1;
  if (this->balance().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_balance());
  }

  // bytes code = 3;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_code());
  }

  // uint64 nonce = 2;
  if (this->nonce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_nonce());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OverrideAccount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.OverrideAccount)
  GOOGLE_DCHECK_NE(&from, this);
  const OverrideAccount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OverrideAccount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.OverrideAccount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.OverrideAccount)
    MergeFrom(*source);
  }
}

void OverrideAccount::MergeFrom(const OverrideAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.OverrideAccount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  state_.MergeFrom(from.state_);
  state_diff_.MergeFrom(from.state_diff_);
  if (from.balance().size() > 0) {
    _internal_set_balance(from._internal_balance());
  }
  if (from.code().size() > 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
}

void OverrideAccount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.OverrideAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OverrideAccount::CopyFrom(const OverrideAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.OverrideAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OverrideAccount::IsInitialized() const {
  return true;
}

void OverrideAccount::InternalSwap(OverrideAccount* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  state_.Swap(&other->state_);
  state_diff_.Swap(&other->state_diff_);
  balance_.Swap(&other->balance_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(nonce_, other->nonce_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OverrideAccount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InfoReadWrite::InitAsDefaultInstance() {
}
class InfoReadWrite::_Internal {
 public:
};

InfoReadWrite::InfoReadWrite(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.InfoReadWrite)
}
InfoReadWrite::InfoReadWrite(const InfoReadWrite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nonce().empty()) {
    nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_nonce(),
      GetArena());
  }
  balance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_balance().empty()) {
    balance_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_balance(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:executor.v1.InfoReadWrite)
}

void InfoReadWrite::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InfoReadWrite_executor_2eproto.base);
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  balance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InfoReadWrite::~InfoReadWrite() {
  // @@protoc_insertion_point(destructor:executor.v1.InfoReadWrite)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InfoReadWrite::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nonce_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  balance_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InfoReadWrite::ArenaDtor(void* object) {
  InfoReadWrite* _this = reinterpret_cast< InfoReadWrite* >(object);
  (void)_this;
}
void InfoReadWrite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InfoReadWrite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InfoReadWrite& InfoReadWrite::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InfoReadWrite_executor_2eproto.base);
  return *internal_default_instance();
}


void InfoReadWrite::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.InfoReadWrite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nonce_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  balance_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InfoReadWrite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string nonce = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_nonce();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.InfoReadWrite.nonce"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string balance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_balance();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.InfoReadWrite.balance"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InfoReadWrite::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.InfoReadWrite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string nonce = 1;
  if (this->nonce().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nonce().data(), static_cast<int>(this->_internal_nonce().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.InfoReadWrite.nonce");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nonce(), target);
  }

  // string balance = 2;
  if (this->balance().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_balance().data(), static_cast<int>(this->_internal_balance().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.InfoReadWrite.balance");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.InfoReadWrite)
  return target;
}

size_t InfoReadWrite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.InfoReadWrite)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nonce = 1;
  if (this->nonce().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nonce());
  }

  // string balance = 2;
  if (this->balance().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_balance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InfoReadWrite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.InfoReadWrite)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoReadWrite* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InfoReadWrite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.InfoReadWrite)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.InfoReadWrite)
    MergeFrom(*source);
  }
}

void InfoReadWrite::MergeFrom(const InfoReadWrite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.InfoReadWrite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nonce().size() > 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  if (from.balance().size() > 0) {
    _internal_set_balance(from._internal_balance());
  }
}

void InfoReadWrite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.InfoReadWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoReadWrite::CopyFrom(const InfoReadWrite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.InfoReadWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoReadWrite::IsInitialized() const {
  return true;
}

void InfoReadWrite::InternalSwap(InfoReadWrite* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nonce_.Swap(&other->nonce_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  balance_.Swap(&other->balance_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata InfoReadWrite::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FullTrace::InitAsDefaultInstance() {
  ::executor::v1::_FullTrace_default_instance_._instance.get_mutable()->context_ = const_cast< ::executor::v1::TransactionContext*>(
      ::executor::v1::TransactionContext::internal_default_instance());
}
class FullTrace::_Internal {
 public:
  static const ::executor::v1::TransactionContext& context(const FullTrace* msg);
};

const ::executor::v1::TransactionContext&
FullTrace::_Internal::context(const FullTrace* msg) {
  return *msg->context_;
}
FullTrace::FullTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  steps_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.FullTrace)
}
FullTrace::FullTrace(const FullTrace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      steps_(from.steps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_context()) {
    context_ = new ::executor::v1::TransactionContext(*from.context_);
  } else {
    context_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:executor.v1.FullTrace)
}

void FullTrace::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FullTrace_executor_2eproto.base);
  context_ = nullptr;
}

FullTrace::~FullTrace() {
  // @@protoc_insertion_point(destructor:executor.v1.FullTrace)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FullTrace::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete context_;
}

void FullTrace::ArenaDtor(void* object) {
  FullTrace* _this = reinterpret_cast< FullTrace* >(object);
  (void)_this;
}
void FullTrace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FullTrace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FullTrace& FullTrace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FullTrace_executor_2eproto.base);
  return *internal_default_instance();
}


void FullTrace::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.FullTrace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steps_.Clear();
  if (GetArena() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FullTrace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .executor.v1.TransactionContext context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .executor.v1.TransactionStep steps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_steps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FullTrace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.FullTrace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .executor.v1.TransactionContext context = 1;
  if (this->has_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::context(this), target, stream);
  }

  // repeated .executor.v1.TransactionStep steps = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_steps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_steps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.FullTrace)
  return target;
}

size_t FullTrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.FullTrace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .executor.v1.TransactionStep steps = 2;
  total_size += 1UL * this->_internal_steps_size();
  for (const auto& msg : this->steps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .executor.v1.TransactionContext context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *context_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FullTrace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.FullTrace)
  GOOGLE_DCHECK_NE(&from, this);
  const FullTrace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FullTrace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.FullTrace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.FullTrace)
    MergeFrom(*source);
  }
}

void FullTrace::MergeFrom(const FullTrace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.FullTrace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  steps_.MergeFrom(from.steps_);
  if (from.has_context()) {
    _internal_mutable_context()->::executor::v1::TransactionContext::MergeFrom(from._internal_context());
  }
}

void FullTrace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.FullTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FullTrace::CopyFrom(const FullTrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.FullTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullTrace::IsInitialized() const {
  return true;
}

void FullTrace::InternalSwap(FullTrace* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  steps_.InternalSwap(&other->steps_);
  swap(context_, other->context_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FullTrace::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransactionContext::InitAsDefaultInstance() {
}
class TransactionContext::_Internal {
 public:
};

TransactionContext::TransactionContext(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.TransactionContext)
}
TransactionContext::TransactionContext(const TransactionContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_from(),
      GetArena());
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to().empty()) {
    to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_to(),
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  batch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_batch().empty()) {
    batch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_batch(),
      GetArena());
  }
  output_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_output().empty()) {
    output_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_output(),
      GetArena());
  }
  gas_price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gas_price().empty()) {
    gas_price_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gas_price(),
      GetArena());
  }
  old_state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_old_state_root().empty()) {
    old_state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_old_state_root(),
      GetArena());
  }
  ::memcpy(&gas_, &from.gas_,
    static_cast<size_t>(reinterpret_cast<char*>(&execution_time_) -
    reinterpret_cast<char*>(&gas_)) + sizeof(execution_time_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.TransactionContext)
}

void TransactionContext::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionContext_executor_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  batch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gas_price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gas_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&execution_time_) -
      reinterpret_cast<char*>(&gas_)) + sizeof(execution_time_));
}

TransactionContext::~TransactionContext() {
  // @@protoc_insertion_point(destructor:executor.v1.TransactionContext)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransactionContext::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  batch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gas_price_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_state_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionContext::ArenaDtor(void* object) {
  TransactionContext* _this = reinterpret_cast< TransactionContext* >(object);
  (void)_this;
}
void TransactionContext::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionContext& TransactionContext::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionContext_executor_2eproto.base);
  return *internal_default_instance();
}


void TransactionContext::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.TransactionContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  from_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  batch_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  output_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gas_price_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  old_state_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&gas_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&execution_time_) -
      reinterpret_cast<char*>(&gas_)) + sizeof(execution_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionContext::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.TransactionContext.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string from = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.TransactionContext.from"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string to = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.TransactionContext.to"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.TransactionContext.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes batch = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_batch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes output = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_output();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas_used = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          gas_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gas_price = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_gas_price();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.TransactionContext.gas_price"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 execution_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          execution_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes old_state_root = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_old_state_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionContext::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.TransactionContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.TransactionContext.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // string from = 2;
  if (this->from().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.TransactionContext.from");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_from(), target);
  }

  // string to = 3;
  if (this->to().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.TransactionContext.to");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_to(), target);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  // uint64 gas = 5;
  if (this->gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_gas(), target);
  }

  // string value = 6;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.TransactionContext.value");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_value(), target);
  }

  // bytes batch = 7;
  if (this->batch().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_batch(), target);
  }

  // bytes output = 8;
  if (this->output().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_output(), target);
  }

  // uint64 gas_used = 9;
  if (this->gas_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_gas_used(), target);
  }

  // string gas_price = 10;
  if (this->gas_price().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gas_price().data(), static_cast<int>(this->_internal_gas_price().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.TransactionContext.gas_price");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_gas_price(), target);
  }

  // uint32 execution_time = 11;
  if (this->execution_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_execution_time(), target);
  }

  // bytes old_state_root = 12;
  if (this->old_state_root().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_old_state_root(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.TransactionContext)
  return target;
}

size_t TransactionContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.TransactionContext)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string from = 2;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  // string to = 3;
  if (this->to().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string value = 6;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // bytes batch = 7;
  if (this->batch().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_batch());
  }

  // bytes output = 8;
  if (this->output().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_output());
  }

  // string gas_price = 10;
  if (this->gas_price().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gas_price());
  }

  // bytes old_state_root = 12;
  if (this->old_state_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_old_state_root());
  }

  // uint64 gas = 5;
  if (this->gas() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas());
  }

  // uint64 gas_used = 9;
  if (this->gas_used() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas_used());
  }

  // uint32 execution_time = 11;
  if (this->execution_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_execution_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionContext::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.TransactionContext)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionContext* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionContext>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.TransactionContext)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.TransactionContext)
    MergeFrom(*source);
  }
}

void TransactionContext::MergeFrom(const TransactionContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.TransactionContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.from().size() > 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to().size() > 0) {
    _internal_set_to(from._internal_to());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.batch().size() > 0) {
    _internal_set_batch(from._internal_batch());
  }
  if (from.output().size() > 0) {
    _internal_set_output(from._internal_output());
  }
  if (from.gas_price().size() > 0) {
    _internal_set_gas_price(from._internal_gas_price());
  }
  if (from.old_state_root().size() > 0) {
    _internal_set_old_state_root(from._internal_old_state_root());
  }
  if (from.gas() != 0) {
    _internal_set_gas(from._internal_gas());
  }
  if (from.gas_used() != 0) {
    _internal_set_gas_used(from._internal_gas_used());
  }
  if (from.execution_time() != 0) {
    _internal_set_execution_time(from._internal_execution_time());
  }
}

void TransactionContext::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.TransactionContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionContext::CopyFrom(const TransactionContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.TransactionContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionContext::IsInitialized() const {
  return true;
}

void TransactionContext::InternalSwap(TransactionContext* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_.Swap(&other->to_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  batch_.Swap(&other->batch_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  output_.Swap(&other->output_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gas_price_.Swap(&other->gas_price_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  old_state_root_.Swap(&other->old_state_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionContext, execution_time_)
      + sizeof(TransactionContext::execution_time_)
      - PROTOBUF_FIELD_OFFSET(TransactionContext, gas_)>(
          reinterpret_cast<char*>(&gas_),
          reinterpret_cast<char*>(&other->gas_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionContext::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

TransactionStep_StorageEntry_DoNotUse::TransactionStep_StorageEntry_DoNotUse() {}
TransactionStep_StorageEntry_DoNotUse::TransactionStep_StorageEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TransactionStep_StorageEntry_DoNotUse::MergeFrom(const TransactionStep_StorageEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TransactionStep_StorageEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TransactionStep_StorageEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void TransactionStep::InitAsDefaultInstance() {
  ::executor::v1::_TransactionStep_default_instance_._instance.get_mutable()->contract_ = const_cast< ::executor::v1::Contract*>(
      ::executor::v1::Contract::internal_default_instance());
}
class TransactionStep::_Internal {
 public:
  static const ::executor::v1::Contract& contract(const TransactionStep* msg);
};

const ::executor::v1::Contract&
TransactionStep::_Internal::contract(const TransactionStep* msg) {
  return *msg->contract_;
}
TransactionStep::TransactionStep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stack_(arena),
  storage_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.TransactionStep)
}
TransactionStep::TransactionStep(const TransactionStep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stack_(from.stack_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  storage_.MergeFrom(from.storage_);
  state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state_root().empty()) {
    state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_state_root(),
      GetArena());
  }
  memory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_memory().empty()) {
    memory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_memory(),
      GetArena());
  }
  return_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_return_data().empty()) {
    return_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_return_data(),
      GetArena());
  }
  if (from._internal_has_contract()) {
    contract_ = new ::executor::v1::Contract(*from.contract_);
  } else {
    contract_ = nullptr;
  }
  ::memcpy(&pc_, &from.pc_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&pc_)) + sizeof(error_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.TransactionStep)
}

void TransactionStep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionStep_executor_2eproto.base);
  state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  return_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&contract_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&contract_)) + sizeof(error_));
}

TransactionStep::~TransactionStep() {
  // @@protoc_insertion_point(destructor:executor.v1.TransactionStep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransactionStep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  state_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  return_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete contract_;
}

void TransactionStep::ArenaDtor(void* object) {
  TransactionStep* _this = reinterpret_cast< TransactionStep* >(object);
  (void)_this;
}
void TransactionStep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionStep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionStep& TransactionStep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionStep_executor_2eproto.base);
  return *internal_default_instance();
}


void TransactionStep::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.TransactionStep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stack_.Clear();
  storage_.Clear();
  state_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  memory_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  return_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && contract_ != nullptr) {
    delete contract_;
  }
  contract_ = nullptr;
  ::memset(&pc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&pc_)) + sizeof(error_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionStep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes state_root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_state_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 depth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 pc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas_cost = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          gas_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas_refund = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          gas_refund_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 op = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          op_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string stack = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_stack();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.TransactionStep.stack"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes memory = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_memory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 memory_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          memory_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 memory_offset = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          memory_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes return_data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_return_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .executor.v1.Contract contract = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_contract(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .executor.v1.RomError error = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::executor::v1::RomError>(val));
        } else goto handle_unusual;
        continue;
      // map<string, string> storage = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&storage_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionStep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.TransactionStep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes state_root = 1;
  if (this->state_root().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_state_root(), target);
  }

  // uint32 depth = 2;
  if (this->depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_depth(), target);
  }

  // uint64 pc = 3;
  if (this->pc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_pc(), target);
  }

  // uint64 gas = 4;
  if (this->gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_gas(), target);
  }

  // uint64 gas_cost = 5;
  if (this->gas_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_gas_cost(), target);
  }

  // uint64 gas_refund = 6;
  if (this->gas_refund() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_gas_refund(), target);
  }

  // uint32 op = 7;
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_op(), target);
  }

  // repeated string stack = 8;
  for (int i = 0, n = this->_internal_stack_size(); i < n; i++) {
    const auto& s = this->_internal_stack(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.TransactionStep.stack");
    target = stream->WriteString(8, s, target);
  }

  // bytes memory = 9;
  if (this->memory().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_memory(), target);
  }

  // uint32 memory_size = 10;
  if (this->memory_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_memory_size(), target);
  }

  // uint32 memory_offset = 11;
  if (this->memory_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_memory_offset(), target);
  }

  // bytes return_data = 12;
  if (this->return_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_return_data(), target);
  }

  // .executor.v1.Contract contract = 13;
  if (this->has_contract()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::contract(this), target, stream);
  }

  // .executor.v1.RomError error = 14;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_error(), target);
  }

  // map<string, string> storage = 15;
  if (!this->_internal_storage().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "executor.v1.TransactionStep.StorageEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "executor.v1.TransactionStep.StorageEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_storage().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_storage().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_storage().begin();
          it != this->_internal_storage().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TransactionStep_StorageEntry_DoNotUse::Funcs::InternalSerialize(15, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_storage().begin();
          it != this->_internal_storage().end(); ++it) {
        target = TransactionStep_StorageEntry_DoNotUse::Funcs::InternalSerialize(15, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.TransactionStep)
  return target;
}

size_t TransactionStep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.TransactionStep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string stack = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(stack_.size());
  for (int i = 0, n = stack_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      stack_.Get(i));
  }

  // map<string, string> storage = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_storage_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_storage().begin();
      it != this->_internal_storage().end(); ++it) {
    total_size += TransactionStep_StorageEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes state_root = 1;
  if (this->state_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_state_root());
  }

  // bytes memory = 9;
  if (this->memory().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_memory());
  }

  // bytes return_data = 12;
  if (this->return_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_return_data());
  }

  // .executor.v1.Contract contract = 13;
  if (this->has_contract()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *contract_);
  }

  // uint64 pc = 3;
  if (this->pc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pc());
  }

  // uint64 gas = 4;
  if (this->gas() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas());
  }

  // uint32 depth = 2;
  if (this->depth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_depth());
  }

  // uint32 op = 7;
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_op());
  }

  // uint64 gas_cost = 5;
  if (this->gas_cost() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas_cost());
  }

  // uint64 gas_refund = 6;
  if (this->gas_refund() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas_refund());
  }

  // uint32 memory_size = 10;
  if (this->memory_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_memory_size());
  }

  // uint32 memory_offset = 11;
  if (this->memory_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_memory_offset());
  }

  // .executor.v1.RomError error = 14;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionStep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.TransactionStep)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionStep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionStep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.TransactionStep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.TransactionStep)
    MergeFrom(*source);
  }
}

void TransactionStep::MergeFrom(const TransactionStep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.TransactionStep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stack_.MergeFrom(from.stack_);
  storage_.MergeFrom(from.storage_);
  if (from.state_root().size() > 0) {
    _internal_set_state_root(from._internal_state_root());
  }
  if (from.memory().size() > 0) {
    _internal_set_memory(from._internal_memory());
  }
  if (from.return_data().size() > 0) {
    _internal_set_return_data(from._internal_return_data());
  }
  if (from.has_contract()) {
    _internal_mutable_contract()->::executor::v1::Contract::MergeFrom(from._internal_contract());
  }
  if (from.pc() != 0) {
    _internal_set_pc(from._internal_pc());
  }
  if (from.gas() != 0) {
    _internal_set_gas(from._internal_gas());
  }
  if (from.depth() != 0) {
    _internal_set_depth(from._internal_depth());
  }
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
  if (from.gas_cost() != 0) {
    _internal_set_gas_cost(from._internal_gas_cost());
  }
  if (from.gas_refund() != 0) {
    _internal_set_gas_refund(from._internal_gas_refund());
  }
  if (from.memory_size() != 0) {
    _internal_set_memory_size(from._internal_memory_size());
  }
  if (from.memory_offset() != 0) {
    _internal_set_memory_offset(from._internal_memory_offset());
  }
  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
}

void TransactionStep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.TransactionStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionStep::CopyFrom(const TransactionStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.TransactionStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionStep::IsInitialized() const {
  return true;
}

void TransactionStep::InternalSwap(TransactionStep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stack_.InternalSwap(&other->stack_);
  storage_.Swap(&other->storage_);
  state_root_.Swap(&other->state_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  memory_.Swap(&other->memory_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  return_data_.Swap(&other->return_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionStep, error_)
      + sizeof(TransactionStep::error_)
      - PROTOBUF_FIELD_OFFSET(TransactionStep, contract_)>(
          reinterpret_cast<char*>(&contract_),
          reinterpret_cast<char*>(&other->contract_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionStep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Contract::InitAsDefaultInstance() {
}
class Contract::_Internal {
 public:
};

Contract::Contract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.Contract)
}
Contract::Contract(const Contract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  caller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_caller().empty()) {
    caller_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_caller(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  gas_ = from.gas_;
  // @@protoc_insertion_point(copy_constructor:executor.v1.Contract)
}

void Contract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Contract_executor_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  caller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gas_ = PROTOBUF_ULONGLONG(0);
}

Contract::~Contract() {
  // @@protoc_insertion_point(destructor:executor.v1.Contract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Contract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  caller_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Contract::ArenaDtor(void* object) {
  Contract* _this = reinterpret_cast< Contract* >(object);
  (void)_this;
}
void Contract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Contract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Contract& Contract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Contract_executor_2eproto.base);
  return *internal_default_instance();
}


void Contract::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.Contract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  caller_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gas_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Contract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.Contract.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string caller = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_caller();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.Contract.caller"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.Contract.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.Contract.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Contract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.Contract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.Contract.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // string caller = 2;
  if (this->caller().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_caller().data(), static_cast<int>(this->_internal_caller().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.Contract.caller");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_caller(), target);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.Contract.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  // uint64 gas = 5;
  if (this->gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_gas(), target);
  }

  // string type = 6;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.Contract.type");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.Contract)
  return target;
}

size_t Contract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.Contract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string caller = 2;
  if (this->caller().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_caller());
  }

  // string value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string type = 6;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // uint64 gas = 5;
  if (this->gas() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Contract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.Contract)
  GOOGLE_DCHECK_NE(&from, this);
  const Contract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Contract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.Contract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.Contract)
    MergeFrom(*source);
  }
}

void Contract::MergeFrom(const Contract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.Contract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.caller().size() > 0) {
    _internal_set_caller(from._internal_caller());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.gas() != 0) {
    _internal_set_gas(from._internal_gas());
  }
}

void Contract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.Contract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Contract::CopyFrom(const Contract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.Contract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Contract::IsInitialized() const {
  return true;
}

void Contract::InternalSwap(Contract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  caller_.Swap(&other->caller_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(gas_, other->gas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Contract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcessTransactionResponse::InitAsDefaultInstance() {
  ::executor::v1::_ProcessTransactionResponse_default_instance_._instance.get_mutable()->full_trace_ = const_cast< ::executor::v1::FullTrace*>(
      ::executor::v1::FullTrace::internal_default_instance());
}
class ProcessTransactionResponse::_Internal {
 public:
  static const ::executor::v1::FullTrace& full_trace(const ProcessTransactionResponse* msg);
};

const ::executor::v1::FullTrace&
ProcessTransactionResponse::_Internal::full_trace(const ProcessTransactionResponse* msg) {
  return *msg->full_trace_;
}
ProcessTransactionResponse::ProcessTransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  logs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.ProcessTransactionResponse)
}
ProcessTransactionResponse::ProcessTransactionResponse(const ProcessTransactionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      logs_(from.logs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tx_hash().empty()) {
    tx_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tx_hash(),
      GetArena());
  }
  rlp_tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rlp_tx().empty()) {
    rlp_tx_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_rlp_tx(),
      GetArena());
  }
  return_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_return_value().empty()) {
    return_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_return_value(),
      GetArena());
  }
  create_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_address().empty()) {
    create_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_create_address(),
      GetArena());
  }
  state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state_root().empty()) {
    state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_state_root(),
      GetArena());
  }
  effective_gas_price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_effective_gas_price().empty()) {
    effective_gas_price_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_effective_gas_price(),
      GetArena());
  }
  if (from._internal_has_full_trace()) {
    full_trace_ = new ::executor::v1::FullTrace(*from.full_trace_);
  } else {
    full_trace_ = nullptr;
  }
  ::memcpy(&gas_left_, &from.gas_left_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_balance_opcode_) -
    reinterpret_cast<char*>(&gas_left_)) + sizeof(has_balance_opcode_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.ProcessTransactionResponse)
}

void ProcessTransactionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessTransactionResponse_executor_2eproto.base);
  tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rlp_tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  return_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  effective_gas_price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&full_trace_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_balance_opcode_) -
      reinterpret_cast<char*>(&full_trace_)) + sizeof(has_balance_opcode_));
}

ProcessTransactionResponse::~ProcessTransactionResponse() {
  // @@protoc_insertion_point(destructor:executor.v1.ProcessTransactionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProcessTransactionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tx_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rlp_tx_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  return_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  effective_gas_price_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete full_trace_;
}

void ProcessTransactionResponse::ArenaDtor(void* object) {
  ProcessTransactionResponse* _this = reinterpret_cast< ProcessTransactionResponse* >(object);
  (void)_this;
}
void ProcessTransactionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessTransactionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessTransactionResponse& ProcessTransactionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessTransactionResponse_executor_2eproto.base);
  return *internal_default_instance();
}


void ProcessTransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.ProcessTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logs_.Clear();
  tx_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rlp_tx_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  return_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  create_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  state_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  effective_gas_price_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && full_trace_ != nullptr) {
    delete full_trace_;
  }
  full_trace_ = nullptr;
  ::memset(&gas_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_balance_opcode_) -
      reinterpret_cast<char*>(&gas_left_)) + sizeof(has_balance_opcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessTransactionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes tx_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tx_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes rlp_tx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_rlp_tx();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes return_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_return_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas_left = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          gas_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas_used = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          gas_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas_refunded = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          gas_refunded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .executor.v1.RomError error = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::executor::v1::RomError>(val));
        } else goto handle_unusual;
        continue;
      // string create_address = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_create_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.ProcessTransactionResponse.create_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes state_root = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_state_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .executor.v1.Log logs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // .executor.v1.FullTrace full_trace = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_full_trace(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string effective_gas_price = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_effective_gas_price();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.ProcessTransactionResponse.effective_gas_price"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 effective_percentage = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          effective_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 has_gasprice_opcode = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          has_gasprice_opcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 has_balance_opcode = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          has_balance_opcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessTransactionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.ProcessTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes tx_hash = 1;
  if (this->tx_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_tx_hash(), target);
  }

  // bytes rlp_tx = 2;
  if (this->rlp_tx().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_rlp_tx(), target);
  }

  // uint32 type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_type(), target);
  }

  // bytes return_value = 4;
  if (this->return_value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_return_value(), target);
  }

  // uint64 gas_left = 5;
  if (this->gas_left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_gas_left(), target);
  }

  // uint64 gas_used = 6;
  if (this->gas_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_gas_used(), target);
  }

  // uint64 gas_refunded = 7;
  if (this->gas_refunded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_gas_refunded(), target);
  }

  // .executor.v1.RomError error = 8;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_error(), target);
  }

  // string create_address = 9;
  if (this->create_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_address().data(), static_cast<int>(this->_internal_create_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessTransactionResponse.create_address");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_create_address(), target);
  }

  // bytes state_root = 10;
  if (this->state_root().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_state_root(), target);
  }

  // repeated .executor.v1.Log logs = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_logs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_logs(i), target, stream);
  }

  // .executor.v1.FullTrace full_trace = 14;
  if (this->has_full_trace()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::full_trace(this), target, stream);
  }

  // string effective_gas_price = 15;
  if (this->effective_gas_price().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_effective_gas_price().data(), static_cast<int>(this->_internal_effective_gas_price().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessTransactionResponse.effective_gas_price");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_effective_gas_price(), target);
  }

  // uint32 effective_percentage = 16;
  if (this->effective_percentage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_effective_percentage(), target);
  }

  // uint32 has_gasprice_opcode = 17;
  if (this->has_gasprice_opcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_has_gasprice_opcode(), target);
  }

  // uint32 has_balance_opcode = 18;
  if (this->has_balance_opcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_has_balance_opcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.ProcessTransactionResponse)
  return target;
}

size_t ProcessTransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.ProcessTransactionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .executor.v1.Log logs = 11;
  total_size += 1UL * this->_internal_logs_size();
  for (const auto& msg : this->logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes tx_hash = 1;
  if (this->tx_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx_hash());
  }

  // bytes rlp_tx = 2;
  if (this->rlp_tx().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rlp_tx());
  }

  // bytes return_value = 4;
  if (this->return_value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_return_value());
  }

  // string create_address = 9;
  if (this->create_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_address());
  }

  // bytes state_root = 10;
  if (this->state_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_state_root());
  }

  // string effective_gas_price = 15;
  if (this->effective_gas_price().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_effective_gas_price());
  }

  // .executor.v1.FullTrace full_trace = 14;
  if (this->has_full_trace()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *full_trace_);
  }

  // uint64 gas_left = 5;
  if (this->gas_left() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas_left());
  }

  // uint32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  // .executor.v1.RomError error = 8;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  // uint64 gas_used = 6;
  if (this->gas_used() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas_used());
  }

  // uint64 gas_refunded = 7;
  if (this->gas_refunded() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas_refunded());
  }

  // uint32 effective_percentage = 16;
  if (this->effective_percentage() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_effective_percentage());
  }

  // uint32 has_gasprice_opcode = 17;
  if (this->has_gasprice_opcode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_has_gasprice_opcode());
  }

  // uint32 has_balance_opcode = 18;
  if (this->has_balance_opcode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_has_balance_opcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessTransactionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.ProcessTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessTransactionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessTransactionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.ProcessTransactionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.ProcessTransactionResponse)
    MergeFrom(*source);
  }
}

void ProcessTransactionResponse::MergeFrom(const ProcessTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.ProcessTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  logs_.MergeFrom(from.logs_);
  if (from.tx_hash().size() > 0) {
    _internal_set_tx_hash(from._internal_tx_hash());
  }
  if (from.rlp_tx().size() > 0) {
    _internal_set_rlp_tx(from._internal_rlp_tx());
  }
  if (from.return_value().size() > 0) {
    _internal_set_return_value(from._internal_return_value());
  }
  if (from.create_address().size() > 0) {
    _internal_set_create_address(from._internal_create_address());
  }
  if (from.state_root().size() > 0) {
    _internal_set_state_root(from._internal_state_root());
  }
  if (from.effective_gas_price().size() > 0) {
    _internal_set_effective_gas_price(from._internal_effective_gas_price());
  }
  if (from.has_full_trace()) {
    _internal_mutable_full_trace()->::executor::v1::FullTrace::MergeFrom(from._internal_full_trace());
  }
  if (from.gas_left() != 0) {
    _internal_set_gas_left(from._internal_gas_left());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
  if (from.gas_used() != 0) {
    _internal_set_gas_used(from._internal_gas_used());
  }
  if (from.gas_refunded() != 0) {
    _internal_set_gas_refunded(from._internal_gas_refunded());
  }
  if (from.effective_percentage() != 0) {
    _internal_set_effective_percentage(from._internal_effective_percentage());
  }
  if (from.has_gasprice_opcode() != 0) {
    _internal_set_has_gasprice_opcode(from._internal_has_gasprice_opcode());
  }
  if (from.has_balance_opcode() != 0) {
    _internal_set_has_balance_opcode(from._internal_has_balance_opcode());
  }
}

void ProcessTransactionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.ProcessTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessTransactionResponse::CopyFrom(const ProcessTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.ProcessTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessTransactionResponse::IsInitialized() const {
  return true;
}

void ProcessTransactionResponse::InternalSwap(ProcessTransactionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  logs_.InternalSwap(&other->logs_);
  tx_hash_.Swap(&other->tx_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rlp_tx_.Swap(&other->rlp_tx_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  return_value_.Swap(&other->return_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  create_address_.Swap(&other->create_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  state_root_.Swap(&other->state_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  effective_gas_price_.Swap(&other->effective_gas_price_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessTransactionResponse, has_balance_opcode_)
      + sizeof(ProcessTransactionResponse::has_balance_opcode_)
      - PROTOBUF_FIELD_OFFSET(ProcessTransactionResponse, full_trace_)>(
          reinterpret_cast<char*>(&full_trace_),
          reinterpret_cast<char*>(&other->full_trace_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessTransactionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Log::InitAsDefaultInstance() {
}
class Log::_Internal {
 public:
};

Log::Log(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  topics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.Log)
}
Log::Log(const Log& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      topics_(from.topics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tx_hash().empty()) {
    tx_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tx_hash(),
      GetArena());
  }
  batch_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_batch_hash().empty()) {
    batch_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_batch_hash(),
      GetArena());
  }
  ::memcpy(&batch_number_, &from.batch_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&batch_number_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.Log)
}

void Log::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Log_executor_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  batch_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&batch_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&batch_number_)) + sizeof(index_));
}

Log::~Log() {
  // @@protoc_insertion_point(destructor:executor.v1.Log)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Log::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  batch_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Log::ArenaDtor(void* object) {
  Log* _this = reinterpret_cast< Log* >(object);
  (void)_this;
}
void Log::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Log::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Log& Log::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Log_executor_2eproto.base);
  return *internal_default_instance();
}


void Log::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.Log)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topics_.Clear();
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tx_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  batch_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&batch_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&batch_number_)) + sizeof(index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Log::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.Log.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes topics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_topics();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 batch_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          batch_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes tx_hash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_tx_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tx_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          tx_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes batch_hash = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_batch_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 index = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Log::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.Log)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.Log.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // repeated bytes topics = 2;
  for (int i = 0, n = this->_internal_topics_size(); i < n; i++) {
    const auto& s = this->_internal_topics(i);
    target = stream->WriteBytes(2, s, target);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  // uint64 batch_number = 4;
  if (this->batch_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_batch_number(), target);
  }

  // bytes tx_hash = 5;
  if (this->tx_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_tx_hash(), target);
  }

  // uint32 tx_index = 6;
  if (this->tx_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_tx_index(), target);
  }

  // bytes batch_hash = 7;
  if (this->batch_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_batch_hash(), target);
  }

  // uint32 index = 8;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.Log)
  return target;
}

size_t Log::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.Log)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes topics = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(topics_.size());
  for (int i = 0, n = topics_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      topics_.Get(i));
  }

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // bytes tx_hash = 5;
  if (this->tx_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx_hash());
  }

  // bytes batch_hash = 7;
  if (this->batch_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_batch_hash());
  }

  // uint64 batch_number = 4;
  if (this->batch_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_batch_number());
  }

  // uint32 tx_index = 6;
  if (this->tx_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tx_index());
  }

  // uint32 index = 8;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Log::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.Log)
  GOOGLE_DCHECK_NE(&from, this);
  const Log* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Log>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.Log)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.Log)
    MergeFrom(*source);
  }
}

void Log::MergeFrom(const Log& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.Log)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  topics_.MergeFrom(from.topics_);
  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.tx_hash().size() > 0) {
    _internal_set_tx_hash(from._internal_tx_hash());
  }
  if (from.batch_hash().size() > 0) {
    _internal_set_batch_hash(from._internal_batch_hash());
  }
  if (from.batch_number() != 0) {
    _internal_set_batch_number(from._internal_batch_number());
  }
  if (from.tx_index() != 0) {
    _internal_set_tx_index(from._internal_tx_index());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void Log::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Log::CopyFrom(const Log& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Log::IsInitialized() const {
  return true;
}

void Log::InternalSwap(Log* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  topics_.InternalSwap(&other->topics_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tx_hash_.Swap(&other->tx_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  batch_hash_.Swap(&other->batch_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Log, index_)
      + sizeof(Log::index_)
      - PROTOBUF_FIELD_OFFSET(Log, batch_number_)>(
          reinterpret_cast<char*>(&batch_number_),
          reinterpret_cast<char*>(&other->batch_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Log::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse::ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse() {}
ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse::ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse::MergeFrom(const ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

ProcessBatchRequestV2_DbEntry_DoNotUse::ProcessBatchRequestV2_DbEntry_DoNotUse() {}
ProcessBatchRequestV2_DbEntry_DoNotUse::ProcessBatchRequestV2_DbEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProcessBatchRequestV2_DbEntry_DoNotUse::MergeFrom(const ProcessBatchRequestV2_DbEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProcessBatchRequestV2_DbEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ProcessBatchRequestV2_DbEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse::ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse() {}
ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse::ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse::MergeFrom(const ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

ProcessBatchRequestV2_StateOverrideEntry_DoNotUse::ProcessBatchRequestV2_StateOverrideEntry_DoNotUse() {}
ProcessBatchRequestV2_StateOverrideEntry_DoNotUse::ProcessBatchRequestV2_StateOverrideEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProcessBatchRequestV2_StateOverrideEntry_DoNotUse::MergeFrom(const ProcessBatchRequestV2_StateOverrideEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProcessBatchRequestV2_StateOverrideEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ProcessBatchRequestV2_StateOverrideEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ProcessBatchRequestV2::InitAsDefaultInstance() {
  ::executor::v1::_ProcessBatchRequestV2_default_instance_._instance.get_mutable()->trace_config_ = const_cast< ::executor::v1::TraceConfigV2*>(
      ::executor::v1::TraceConfigV2::internal_default_instance());
  ::executor::v1::_ProcessBatchRequestV2_default_instance_._instance.get_mutable()->debug_ = const_cast< ::executor::v1::DebugV2*>(
      ::executor::v1::DebugV2::internal_default_instance());
}
class ProcessBatchRequestV2::_Internal {
 public:
  static const ::executor::v1::TraceConfigV2& trace_config(const ProcessBatchRequestV2* msg);
  static const ::executor::v1::DebugV2& debug(const ProcessBatchRequestV2* msg);
};

const ::executor::v1::TraceConfigV2&
ProcessBatchRequestV2::_Internal::trace_config(const ProcessBatchRequestV2* msg) {
  return *msg->trace_config_;
}
const ::executor::v1::DebugV2&
ProcessBatchRequestV2::_Internal::debug(const ProcessBatchRequestV2* msg) {
  return *msg->debug_;
}
ProcessBatchRequestV2::ProcessBatchRequestV2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  l1_info_tree_data_(arena),
  db_(arena),
  contracts_bytecode_(arena),
  state_override_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.ProcessBatchRequestV2)
}
ProcessBatchRequestV2::ProcessBatchRequestV2(const ProcessBatchRequestV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  l1_info_tree_data_.MergeFrom(from.l1_info_tree_data_);
  db_.MergeFrom(from.db_);
  contracts_bytecode_.MergeFrom(from.contracts_bytecode_);
  state_override_.MergeFrom(from.state_override_);
  old_state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_old_state_root().empty()) {
    old_state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_old_state_root(),
      GetArena());
  }
  old_acc_input_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_old_acc_input_hash().empty()) {
    old_acc_input_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_old_acc_input_hash(),
      GetArena());
  }
  batch_l2_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_batch_l2_data().empty()) {
    batch_l2_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_batch_l2_data(),
      GetArena());
  }
  l1_info_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_l1_info_root().empty()) {
    l1_info_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_l1_info_root(),
      GetArena());
  }
  coinbase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_coinbase().empty()) {
    coinbase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_coinbase(),
      GetArena());
  }
  forced_blockhash_l1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_forced_blockhash_l1().empty()) {
    forced_blockhash_l1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_forced_blockhash_l1(),
      GetArena());
  }
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_from(),
      GetArena());
  }
  context_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_context_id().empty()) {
    context_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_context_id(),
      GetArena());
  }
  if (from._internal_has_trace_config()) {
    trace_config_ = new ::executor::v1::TraceConfigV2(*from.trace_config_);
  } else {
    trace_config_ = nullptr;
  }
  if (from._internal_has_debug()) {
    debug_ = new ::executor::v1::DebugV2(*from.debug_);
  } else {
    debug_ = nullptr;
  }
  ::memcpy(&old_batch_num_, &from.old_batch_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&execution_mode_) -
    reinterpret_cast<char*>(&old_batch_num_)) + sizeof(execution_mode_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.ProcessBatchRequestV2)
}

void ProcessBatchRequestV2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessBatchRequestV2_executor_2eproto.base);
  old_state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_acc_input_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  batch_l2_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  l1_info_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coinbase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  forced_blockhash_l1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  context_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&trace_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&execution_mode_) -
      reinterpret_cast<char*>(&trace_config_)) + sizeof(execution_mode_));
}

ProcessBatchRequestV2::~ProcessBatchRequestV2() {
  // @@protoc_insertion_point(destructor:executor.v1.ProcessBatchRequestV2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProcessBatchRequestV2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  old_state_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_acc_input_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  batch_l2_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  l1_info_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coinbase_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  forced_blockhash_l1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  context_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete trace_config_;
  if (this != internal_default_instance()) delete debug_;
}

void ProcessBatchRequestV2::ArenaDtor(void* object) {
  ProcessBatchRequestV2* _this = reinterpret_cast< ProcessBatchRequestV2* >(object);
  (void)_this;
}
void ProcessBatchRequestV2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessBatchRequestV2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessBatchRequestV2& ProcessBatchRequestV2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessBatchRequestV2_executor_2eproto.base);
  return *internal_default_instance();
}


void ProcessBatchRequestV2::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.ProcessBatchRequestV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  l1_info_tree_data_.Clear();
  db_.Clear();
  contracts_bytecode_.Clear();
  state_override_.Clear();
  old_state_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  old_acc_input_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  batch_l2_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  l1_info_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  coinbase_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  forced_blockhash_l1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  from_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  context_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && trace_config_ != nullptr) {
    delete trace_config_;
  }
  trace_config_ = nullptr;
  if (GetArena() == nullptr && debug_ != nullptr) {
    delete debug_;
  }
  debug_ = nullptr;
  ::memset(&old_batch_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&execution_mode_) -
      reinterpret_cast<char*>(&old_batch_num_)) + sizeof(execution_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessBatchRequestV2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes old_state_root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_old_state_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes old_acc_input_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_old_acc_input_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 old_batch_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          old_batch_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 chain_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          chain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 fork_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          fork_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes batch_l2_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_batch_l2_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes l1_info_root = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_l1_info_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp_limit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          timestamp_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string coinbase = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_coinbase();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.ProcessBatchRequestV2.coinbase"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes forced_blockhash_l1 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_forced_blockhash_l1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 update_merkle_tree = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          update_merkle_tree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 no_counters = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          no_counters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string from = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.ProcessBatchRequestV2.from"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 skip_verify_l1_info_root = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          skip_verify_l1_info_root_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 skip_first_change_l2_block = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          skip_first_change_l2_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 skip_write_block_info_root = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          skip_write_block_info_root_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint32, .executor.v1.L1DataV2> l1_info_tree_data = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&l1_info_tree_data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> db = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&db_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> contracts_bytecode = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&contracts_bytecode_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // .executor.v1.TraceConfigV2 trace_config = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_trace_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string context_id = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_context_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.ProcessBatchRequestV2.context_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 get_keys = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          get_keys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .executor.v1.OverrideAccountV2> state_override = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&state_override_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // .executor.v1.DebugV2 debug = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_debug(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 execution_mode = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          execution_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessBatchRequestV2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.ProcessBatchRequestV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes old_state_root = 1;
  if (this->old_state_root().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_old_state_root(), target);
  }

  // bytes old_acc_input_hash = 2;
  if (this->old_acc_input_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_old_acc_input_hash(), target);
  }

  // uint64 old_batch_num = 3;
  if (this->old_batch_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_old_batch_num(), target);
  }

  // uint64 chain_id = 4;
  if (this->chain_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_chain_id(), target);
  }

  // uint64 fork_id = 5;
  if (this->fork_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_fork_id(), target);
  }

  // bytes batch_l2_data = 6;
  if (this->batch_l2_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_batch_l2_data(), target);
  }

  // bytes l1_info_root = 7;
  if (this->l1_info_root().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_l1_info_root(), target);
  }

  // uint64 timestamp_limit = 8;
  if (this->timestamp_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_timestamp_limit(), target);
  }

  // string coinbase = 9;
  if (this->coinbase().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_coinbase().data(), static_cast<int>(this->_internal_coinbase().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessBatchRequestV2.coinbase");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_coinbase(), target);
  }

  // bytes forced_blockhash_l1 = 10;
  if (this->forced_blockhash_l1().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_forced_blockhash_l1(), target);
  }

  // uint32 update_merkle_tree = 11;
  if (this->update_merkle_tree() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_update_merkle_tree(), target);
  }

  // uint32 no_counters = 12;
  if (this->no_counters() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_no_counters(), target);
  }

  // string from = 13;
  if (this->from().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessBatchRequestV2.from");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_from(), target);
  }

  // uint32 skip_verify_l1_info_root = 14;
  if (this->skip_verify_l1_info_root() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_skip_verify_l1_info_root(), target);
  }

  // uint32 skip_first_change_l2_block = 15;
  if (this->skip_first_change_l2_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_skip_first_change_l2_block(), target);
  }

  // uint32 skip_write_block_info_root = 16;
  if (this->skip_write_block_info_root() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_skip_write_block_info_root(), target);
  }

  // map<uint32, .executor.v1.L1DataV2> l1_info_tree_data = 17;
  if (!this->_internal_l1_info_tree_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::executor::v1::L1DataV2 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_l1_info_tree_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_l1_info_tree_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::executor::v1::L1DataV2 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::executor::v1::L1DataV2 >::const_iterator
          it = this->_internal_l1_info_tree_data().begin();
          it != this->_internal_l1_info_tree_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse::Funcs::InternalSerialize(17, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::executor::v1::L1DataV2 >::const_iterator
          it = this->_internal_l1_info_tree_data().begin();
          it != this->_internal_l1_info_tree_data().end(); ++it) {
        target = ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse::Funcs::InternalSerialize(17, it->first, it->second, target, stream);
      }
    }
  }

  // map<string, string> db = 18;
  if (!this->_internal_db().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "executor.v1.ProcessBatchRequestV2.DbEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "executor.v1.ProcessBatchRequestV2.DbEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_db().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_db().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_db().begin();
          it != this->_internal_db().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ProcessBatchRequestV2_DbEntry_DoNotUse::Funcs::InternalSerialize(18, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_db().begin();
          it != this->_internal_db().end(); ++it) {
        target = ProcessBatchRequestV2_DbEntry_DoNotUse::Funcs::InternalSerialize(18, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> contracts_bytecode = 19;
  if (!this->_internal_contracts_bytecode().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "executor.v1.ProcessBatchRequestV2.ContractsBytecodeEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "executor.v1.ProcessBatchRequestV2.ContractsBytecodeEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_contracts_bytecode().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_contracts_bytecode().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_contracts_bytecode().begin();
          it != this->_internal_contracts_bytecode().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse::Funcs::InternalSerialize(19, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_contracts_bytecode().begin();
          it != this->_internal_contracts_bytecode().end(); ++it) {
        target = ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse::Funcs::InternalSerialize(19, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .executor.v1.TraceConfigV2 trace_config = 20;
  if (this->has_trace_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::trace_config(this), target, stream);
  }

  // string context_id = 21;
  if (this->context_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_context_id().data(), static_cast<int>(this->_internal_context_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessBatchRequestV2.context_id");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_context_id(), target);
  }

  // uint32 get_keys = 22;
  if (this->get_keys() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_get_keys(), target);
  }

  // map<string, .executor.v1.OverrideAccountV2> state_override = 23;
  if (!this->_internal_state_override().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::executor::v1::OverrideAccountV2 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "executor.v1.ProcessBatchRequestV2.StateOverrideEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_state_override().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_state_override().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::executor::v1::OverrideAccountV2 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::executor::v1::OverrideAccountV2 >::const_iterator
          it = this->_internal_state_override().begin();
          it != this->_internal_state_override().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ProcessBatchRequestV2_StateOverrideEntry_DoNotUse::Funcs::InternalSerialize(23, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::executor::v1::OverrideAccountV2 >::const_iterator
          it = this->_internal_state_override().begin();
          it != this->_internal_state_override().end(); ++it) {
        target = ProcessBatchRequestV2_StateOverrideEntry_DoNotUse::Funcs::InternalSerialize(23, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .executor.v1.DebugV2 debug = 24;
  if (this->has_debug()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::debug(this), target, stream);
  }

  // uint64 execution_mode = 25;
  if (this->execution_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(25, this->_internal_execution_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.ProcessBatchRequestV2)
  return target;
}

size_t ProcessBatchRequestV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.ProcessBatchRequestV2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .executor.v1.L1DataV2> l1_info_tree_data = 17;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_l1_info_tree_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::executor::v1::L1DataV2 >::const_iterator
      it = this->_internal_l1_info_tree_data().begin();
      it != this->_internal_l1_info_tree_data().end(); ++it) {
    total_size += ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> db = 18;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_db_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_db().begin();
      it != this->_internal_db().end(); ++it) {
    total_size += ProcessBatchRequestV2_DbEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> contracts_bytecode = 19;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_contracts_bytecode_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_contracts_bytecode().begin();
      it != this->_internal_contracts_bytecode().end(); ++it) {
    total_size += ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .executor.v1.OverrideAccountV2> state_override = 23;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_state_override_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::executor::v1::OverrideAccountV2 >::const_iterator
      it = this->_internal_state_override().begin();
      it != this->_internal_state_override().end(); ++it) {
    total_size += ProcessBatchRequestV2_StateOverrideEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes old_state_root = 1;
  if (this->old_state_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_old_state_root());
  }

  // bytes old_acc_input_hash = 2;
  if (this->old_acc_input_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_old_acc_input_hash());
  }

  // bytes batch_l2_data = 6;
  if (this->batch_l2_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_batch_l2_data());
  }

  // bytes l1_info_root = 7;
  if (this->l1_info_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_l1_info_root());
  }

  // string coinbase = 9;
  if (this->coinbase().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_coinbase());
  }

  // bytes forced_blockhash_l1 = 10;
  if (this->forced_blockhash_l1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_forced_blockhash_l1());
  }

  // string from = 13;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  // string context_id = 21;
  if (this->context_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_context_id());
  }

  // .executor.v1.TraceConfigV2 trace_config = 20;
  if (this->has_trace_config()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trace_config_);
  }

  // .executor.v1.DebugV2 debug = 24;
  if (this->has_debug()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *debug_);
  }

  // uint64 old_batch_num = 3;
  if (this->old_batch_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_old_batch_num());
  }

  // uint64 chain_id = 4;
  if (this->chain_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_chain_id());
  }

  // uint64 fork_id = 5;
  if (this->fork_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_fork_id());
  }

  // uint64 timestamp_limit = 8;
  if (this->timestamp_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp_limit());
  }

  // uint32 update_merkle_tree = 11;
  if (this->update_merkle_tree() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_update_merkle_tree());
  }

  // uint32 no_counters = 12;
  if (this->no_counters() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_no_counters());
  }

  // uint32 skip_verify_l1_info_root = 14;
  if (this->skip_verify_l1_info_root() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_skip_verify_l1_info_root());
  }

  // uint32 skip_first_change_l2_block = 15;
  if (this->skip_first_change_l2_block() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_skip_first_change_l2_block());
  }

  // uint32 skip_write_block_info_root = 16;
  if (this->skip_write_block_info_root() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_skip_write_block_info_root());
  }

  // uint32 get_keys = 22;
  if (this->get_keys() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_get_keys());
  }

  // uint64 execution_mode = 25;
  if (this->execution_mode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_execution_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessBatchRequestV2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.ProcessBatchRequestV2)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessBatchRequestV2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessBatchRequestV2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.ProcessBatchRequestV2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.ProcessBatchRequestV2)
    MergeFrom(*source);
  }
}

void ProcessBatchRequestV2::MergeFrom(const ProcessBatchRequestV2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.ProcessBatchRequestV2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  l1_info_tree_data_.MergeFrom(from.l1_info_tree_data_);
  db_.MergeFrom(from.db_);
  contracts_bytecode_.MergeFrom(from.contracts_bytecode_);
  state_override_.MergeFrom(from.state_override_);
  if (from.old_state_root().size() > 0) {
    _internal_set_old_state_root(from._internal_old_state_root());
  }
  if (from.old_acc_input_hash().size() > 0) {
    _internal_set_old_acc_input_hash(from._internal_old_acc_input_hash());
  }
  if (from.batch_l2_data().size() > 0) {
    _internal_set_batch_l2_data(from._internal_batch_l2_data());
  }
  if (from.l1_info_root().size() > 0) {
    _internal_set_l1_info_root(from._internal_l1_info_root());
  }
  if (from.coinbase().size() > 0) {
    _internal_set_coinbase(from._internal_coinbase());
  }
  if (from.forced_blockhash_l1().size() > 0) {
    _internal_set_forced_blockhash_l1(from._internal_forced_blockhash_l1());
  }
  if (from.from().size() > 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.context_id().size() > 0) {
    _internal_set_context_id(from._internal_context_id());
  }
  if (from.has_trace_config()) {
    _internal_mutable_trace_config()->::executor::v1::TraceConfigV2::MergeFrom(from._internal_trace_config());
  }
  if (from.has_debug()) {
    _internal_mutable_debug()->::executor::v1::DebugV2::MergeFrom(from._internal_debug());
  }
  if (from.old_batch_num() != 0) {
    _internal_set_old_batch_num(from._internal_old_batch_num());
  }
  if (from.chain_id() != 0) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  if (from.fork_id() != 0) {
    _internal_set_fork_id(from._internal_fork_id());
  }
  if (from.timestamp_limit() != 0) {
    _internal_set_timestamp_limit(from._internal_timestamp_limit());
  }
  if (from.update_merkle_tree() != 0) {
    _internal_set_update_merkle_tree(from._internal_update_merkle_tree());
  }
  if (from.no_counters() != 0) {
    _internal_set_no_counters(from._internal_no_counters());
  }
  if (from.skip_verify_l1_info_root() != 0) {
    _internal_set_skip_verify_l1_info_root(from._internal_skip_verify_l1_info_root());
  }
  if (from.skip_first_change_l2_block() != 0) {
    _internal_set_skip_first_change_l2_block(from._internal_skip_first_change_l2_block());
  }
  if (from.skip_write_block_info_root() != 0) {
    _internal_set_skip_write_block_info_root(from._internal_skip_write_block_info_root());
  }
  if (from.get_keys() != 0) {
    _internal_set_get_keys(from._internal_get_keys());
  }
  if (from.execution_mode() != 0) {
    _internal_set_execution_mode(from._internal_execution_mode());
  }
}

void ProcessBatchRequestV2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.ProcessBatchRequestV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessBatchRequestV2::CopyFrom(const ProcessBatchRequestV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.ProcessBatchRequestV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessBatchRequestV2::IsInitialized() const {
  return true;
}

void ProcessBatchRequestV2::InternalSwap(ProcessBatchRequestV2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  l1_info_tree_data_.Swap(&other->l1_info_tree_data_);
  db_.Swap(&other->db_);
  contracts_bytecode_.Swap(&other->contracts_bytecode_);
  state_override_.Swap(&other->state_override_);
  old_state_root_.Swap(&other->old_state_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  old_acc_input_hash_.Swap(&other->old_acc_input_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  batch_l2_data_.Swap(&other->batch_l2_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  l1_info_root_.Swap(&other->l1_info_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  coinbase_.Swap(&other->coinbase_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  forced_blockhash_l1_.Swap(&other->forced_blockhash_l1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  context_id_.Swap(&other->context_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessBatchRequestV2, execution_mode_)
      + sizeof(ProcessBatchRequestV2::execution_mode_)
      - PROTOBUF_FIELD_OFFSET(ProcessBatchRequestV2, trace_config_)>(
          reinterpret_cast<char*>(&trace_config_),
          reinterpret_cast<char*>(&other->trace_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessBatchRequestV2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcessStatelessBatchRequestV2::InitAsDefaultInstance() {
}
class ProcessStatelessBatchRequestV2::_Internal {
 public:
};

ProcessStatelessBatchRequestV2::ProcessStatelessBatchRequestV2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.ProcessStatelessBatchRequestV2)
}
ProcessStatelessBatchRequestV2::ProcessStatelessBatchRequestV2(const ProcessStatelessBatchRequestV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  witness_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witness().empty()) {
    witness_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_witness(),
      GetArena());
  }
  data_stream_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data_stream().empty()) {
    data_stream_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data_stream(),
      GetArena());
  }
  coinbase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_coinbase().empty()) {
    coinbase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_coinbase(),
      GetArena());
  }
  old_acc_input_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_old_acc_input_hash().empty()) {
    old_acc_input_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_old_acc_input_hash(),
      GetArena());
  }
  l1_info_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_l1_info_root().empty()) {
    l1_info_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_l1_info_root(),
      GetArena());
  }
  forced_blockhash_l1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_forced_blockhash_l1().empty()) {
    forced_blockhash_l1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_forced_blockhash_l1(),
      GetArena());
  }
  context_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_context_id().empty()) {
    context_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_context_id(),
      GetArena());
  }
  ::memcpy(&chain_id_, &from.chain_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_limit_) -
    reinterpret_cast<char*>(&chain_id_)) + sizeof(timestamp_limit_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.ProcessStatelessBatchRequestV2)
}

void ProcessStatelessBatchRequestV2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessStatelessBatchRequestV2_executor_2eproto.base);
  witness_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_stream_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coinbase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_acc_input_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  l1_info_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  forced_blockhash_l1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  context_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&chain_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_limit_) -
      reinterpret_cast<char*>(&chain_id_)) + sizeof(timestamp_limit_));
}

ProcessStatelessBatchRequestV2::~ProcessStatelessBatchRequestV2() {
  // @@protoc_insertion_point(destructor:executor.v1.ProcessStatelessBatchRequestV2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProcessStatelessBatchRequestV2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  witness_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_stream_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coinbase_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_acc_input_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  l1_info_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  forced_blockhash_l1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  context_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProcessStatelessBatchRequestV2::ArenaDtor(void* object) {
  ProcessStatelessBatchRequestV2* _this = reinterpret_cast< ProcessStatelessBatchRequestV2* >(object);
  (void)_this;
}
void ProcessStatelessBatchRequestV2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessStatelessBatchRequestV2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessStatelessBatchRequestV2& ProcessStatelessBatchRequestV2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessStatelessBatchRequestV2_executor_2eproto.base);
  return *internal_default_instance();
}


void ProcessStatelessBatchRequestV2::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.ProcessStatelessBatchRequestV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witness_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_stream_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  coinbase_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  old_acc_input_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  l1_info_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  forced_blockhash_l1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  context_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&chain_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_limit_) -
      reinterpret_cast<char*>(&chain_id_)) + sizeof(timestamp_limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessStatelessBatchRequestV2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes witness = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_witness();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data_stream = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data_stream();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 chain_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          chain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string coinbase = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_coinbase();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.ProcessStatelessBatchRequestV2.coinbase"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes old_acc_input_hash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_old_acc_input_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes l1_info_root = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_l1_info_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp_limit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          timestamp_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes forced_blockhash_l1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_forced_blockhash_l1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string context_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_context_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.ProcessStatelessBatchRequestV2.context_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessStatelessBatchRequestV2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.ProcessStatelessBatchRequestV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes witness = 1;
  if (this->witness().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_witness(), target);
  }

  // bytes data_stream = 2;
  if (this->data_stream().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data_stream(), target);
  }

  // uint64 chain_id = 3;
  if (this->chain_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_chain_id(), target);
  }

  // string coinbase = 4;
  if (this->coinbase().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_coinbase().data(), static_cast<int>(this->_internal_coinbase().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessStatelessBatchRequestV2.coinbase");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_coinbase(), target);
  }

  // bytes old_acc_input_hash = 5;
  if (this->old_acc_input_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_old_acc_input_hash(), target);
  }

  // bytes l1_info_root = 6;
  if (this->l1_info_root().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_l1_info_root(), target);
  }

  // uint64 timestamp_limit = 7;
  if (this->timestamp_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_timestamp_limit(), target);
  }

  // bytes forced_blockhash_l1 = 8;
  if (this->forced_blockhash_l1().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_forced_blockhash_l1(), target);
  }

  // string context_id = 9;
  if (this->context_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_context_id().data(), static_cast<int>(this->_internal_context_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessStatelessBatchRequestV2.context_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_context_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.ProcessStatelessBatchRequestV2)
  return target;
}

size_t ProcessStatelessBatchRequestV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.ProcessStatelessBatchRequestV2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes witness = 1;
  if (this->witness().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witness());
  }

  // bytes data_stream = 2;
  if (this->data_stream().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data_stream());
  }

  // string coinbase = 4;
  if (this->coinbase().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_coinbase());
  }

  // bytes old_acc_input_hash = 5;
  if (this->old_acc_input_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_old_acc_input_hash());
  }

  // bytes l1_info_root = 6;
  if (this->l1_info_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_l1_info_root());
  }

  // bytes forced_blockhash_l1 = 8;
  if (this->forced_blockhash_l1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_forced_blockhash_l1());
  }

  // string context_id = 9;
  if (this->context_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_context_id());
  }

  // uint64 chain_id = 3;
  if (this->chain_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_chain_id());
  }

  // uint64 timestamp_limit = 7;
  if (this->timestamp_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessStatelessBatchRequestV2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.ProcessStatelessBatchRequestV2)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessStatelessBatchRequestV2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessStatelessBatchRequestV2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.ProcessStatelessBatchRequestV2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.ProcessStatelessBatchRequestV2)
    MergeFrom(*source);
  }
}

void ProcessStatelessBatchRequestV2::MergeFrom(const ProcessStatelessBatchRequestV2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.ProcessStatelessBatchRequestV2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.witness().size() > 0) {
    _internal_set_witness(from._internal_witness());
  }
  if (from.data_stream().size() > 0) {
    _internal_set_data_stream(from._internal_data_stream());
  }
  if (from.coinbase().size() > 0) {
    _internal_set_coinbase(from._internal_coinbase());
  }
  if (from.old_acc_input_hash().size() > 0) {
    _internal_set_old_acc_input_hash(from._internal_old_acc_input_hash());
  }
  if (from.l1_info_root().size() > 0) {
    _internal_set_l1_info_root(from._internal_l1_info_root());
  }
  if (from.forced_blockhash_l1().size() > 0) {
    _internal_set_forced_blockhash_l1(from._internal_forced_blockhash_l1());
  }
  if (from.context_id().size() > 0) {
    _internal_set_context_id(from._internal_context_id());
  }
  if (from.chain_id() != 0) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  if (from.timestamp_limit() != 0) {
    _internal_set_timestamp_limit(from._internal_timestamp_limit());
  }
}

void ProcessStatelessBatchRequestV2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.ProcessStatelessBatchRequestV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessStatelessBatchRequestV2::CopyFrom(const ProcessStatelessBatchRequestV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.ProcessStatelessBatchRequestV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessStatelessBatchRequestV2::IsInitialized() const {
  return true;
}

void ProcessStatelessBatchRequestV2::InternalSwap(ProcessStatelessBatchRequestV2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  witness_.Swap(&other->witness_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_stream_.Swap(&other->data_stream_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  coinbase_.Swap(&other->coinbase_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  old_acc_input_hash_.Swap(&other->old_acc_input_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  l1_info_root_.Swap(&other->l1_info_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  forced_blockhash_l1_.Swap(&other->forced_blockhash_l1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  context_id_.Swap(&other->context_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessStatelessBatchRequestV2, timestamp_limit_)
      + sizeof(ProcessStatelessBatchRequestV2::timestamp_limit_)
      - PROTOBUF_FIELD_OFFSET(ProcessStatelessBatchRequestV2, chain_id_)>(
          reinterpret_cast<char*>(&chain_id_),
          reinterpret_cast<char*>(&other->chain_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessStatelessBatchRequestV2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void L1DataV2::InitAsDefaultInstance() {
}
class L1DataV2::_Internal {
 public:
};

L1DataV2::L1DataV2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  smt_proof_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.L1DataV2)
}
L1DataV2::L1DataV2(const L1DataV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      smt_proof_(from.smt_proof_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  global_exit_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_global_exit_root().empty()) {
    global_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_global_exit_root(),
      GetArena());
  }
  block_hash_l1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_hash_l1().empty()) {
    block_hash_l1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_block_hash_l1(),
      GetArena());
  }
  min_timestamp_ = from.min_timestamp_;
  // @@protoc_insertion_point(copy_constructor:executor.v1.L1DataV2)
}

void L1DataV2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_L1DataV2_executor_2eproto.base);
  global_exit_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_l1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  min_timestamp_ = PROTOBUF_ULONGLONG(0);
}

L1DataV2::~L1DataV2() {
  // @@protoc_insertion_point(destructor:executor.v1.L1DataV2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void L1DataV2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  global_exit_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_l1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void L1DataV2::ArenaDtor(void* object) {
  L1DataV2* _this = reinterpret_cast< L1DataV2* >(object);
  (void)_this;
}
void L1DataV2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void L1DataV2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const L1DataV2& L1DataV2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_L1DataV2_executor_2eproto.base);
  return *internal_default_instance();
}


void L1DataV2::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.L1DataV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  smt_proof_.Clear();
  global_exit_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  block_hash_l1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  min_timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* L1DataV2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes global_exit_root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_global_exit_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes block_hash_l1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_block_hash_l1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 min_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          min_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes smt_proof = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_smt_proof();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* L1DataV2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.L1DataV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes global_exit_root = 1;
  if (this->global_exit_root().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_global_exit_root(), target);
  }

  // bytes block_hash_l1 = 2;
  if (this->block_hash_l1().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_block_hash_l1(), target);
  }

  // uint64 min_timestamp = 3;
  if (this->min_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_min_timestamp(), target);
  }

  // repeated bytes smt_proof = 4;
  for (int i = 0, n = this->_internal_smt_proof_size(); i < n; i++) {
    const auto& s = this->_internal_smt_proof(i);
    target = stream->WriteBytes(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.L1DataV2)
  return target;
}

size_t L1DataV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.L1DataV2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes smt_proof = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(smt_proof_.size());
  for (int i = 0, n = smt_proof_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      smt_proof_.Get(i));
  }

  // bytes global_exit_root = 1;
  if (this->global_exit_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_global_exit_root());
  }

  // bytes block_hash_l1 = 2;
  if (this->block_hash_l1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_hash_l1());
  }

  // uint64 min_timestamp = 3;
  if (this->min_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_min_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void L1DataV2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.L1DataV2)
  GOOGLE_DCHECK_NE(&from, this);
  const L1DataV2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<L1DataV2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.L1DataV2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.L1DataV2)
    MergeFrom(*source);
  }
}

void L1DataV2::MergeFrom(const L1DataV2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.L1DataV2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  smt_proof_.MergeFrom(from.smt_proof_);
  if (from.global_exit_root().size() > 0) {
    _internal_set_global_exit_root(from._internal_global_exit_root());
  }
  if (from.block_hash_l1().size() > 0) {
    _internal_set_block_hash_l1(from._internal_block_hash_l1());
  }
  if (from.min_timestamp() != 0) {
    _internal_set_min_timestamp(from._internal_min_timestamp());
  }
}

void L1DataV2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.L1DataV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L1DataV2::CopyFrom(const L1DataV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.L1DataV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L1DataV2::IsInitialized() const {
  return true;
}

void L1DataV2::InternalSwap(L1DataV2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  smt_proof_.InternalSwap(&other->smt_proof_);
  global_exit_root_.Swap(&other->global_exit_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  block_hash_l1_.Swap(&other->block_hash_l1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(min_timestamp_, other->min_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata L1DataV2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DebugV2::InitAsDefaultInstance() {
}
class DebugV2::_Internal {
 public:
};

DebugV2::DebugV2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.DebugV2)
}
DebugV2::DebugV2(const DebugV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  new_state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_state_root().empty()) {
    new_state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_new_state_root(),
      GetArena());
  }
  new_acc_input_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_acc_input_hash().empty()) {
    new_acc_input_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_new_acc_input_hash(),
      GetArena());
  }
  new_local_exit_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_local_exit_root().empty()) {
    new_local_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_new_local_exit_root(),
      GetArena());
  }
  ::memcpy(&gas_limit_, &from.gas_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_batch_num_) -
    reinterpret_cast<char*>(&gas_limit_)) + sizeof(new_batch_num_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.DebugV2)
}

void DebugV2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DebugV2_executor_2eproto.base);
  new_state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_acc_input_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_local_exit_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gas_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_batch_num_) -
      reinterpret_cast<char*>(&gas_limit_)) + sizeof(new_batch_num_));
}

DebugV2::~DebugV2() {
  // @@protoc_insertion_point(destructor:executor.v1.DebugV2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DebugV2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  new_state_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_acc_input_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_local_exit_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DebugV2::ArenaDtor(void* object) {
  DebugV2* _this = reinterpret_cast< DebugV2* >(object);
  (void)_this;
}
void DebugV2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DebugV2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DebugV2& DebugV2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DebugV2_executor_2eproto.base);
  return *internal_default_instance();
}


void DebugV2::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.DebugV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_state_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_acc_input_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_local_exit_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&gas_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_batch_num_) -
      reinterpret_cast<char*>(&gas_limit_)) + sizeof(new_batch_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugV2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 gas_limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gas_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes new_state_root = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_new_state_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes new_acc_input_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_new_acc_input_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes new_local_exit_root = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_new_local_exit_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 new_batch_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          new_batch_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DebugV2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.DebugV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 gas_limit = 1;
  if (this->gas_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_gas_limit(), target);
  }

  // bytes new_state_root = 2;
  if (this->new_state_root().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_new_state_root(), target);
  }

  // bytes new_acc_input_hash = 3;
  if (this->new_acc_input_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_new_acc_input_hash(), target);
  }

  // bytes new_local_exit_root = 4;
  if (this->new_local_exit_root().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_new_local_exit_root(), target);
  }

  // uint64 new_batch_num = 5;
  if (this->new_batch_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_new_batch_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.DebugV2)
  return target;
}

size_t DebugV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.DebugV2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes new_state_root = 2;
  if (this->new_state_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_new_state_root());
  }

  // bytes new_acc_input_hash = 3;
  if (this->new_acc_input_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_new_acc_input_hash());
  }

  // bytes new_local_exit_root = 4;
  if (this->new_local_exit_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_new_local_exit_root());
  }

  // uint64 gas_limit = 1;
  if (this->gas_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas_limit());
  }

  // uint64 new_batch_num = 5;
  if (this->new_batch_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_new_batch_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugV2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.DebugV2)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugV2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DebugV2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.DebugV2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.DebugV2)
    MergeFrom(*source);
  }
}

void DebugV2::MergeFrom(const DebugV2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.DebugV2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.new_state_root().size() > 0) {
    _internal_set_new_state_root(from._internal_new_state_root());
  }
  if (from.new_acc_input_hash().size() > 0) {
    _internal_set_new_acc_input_hash(from._internal_new_acc_input_hash());
  }
  if (from.new_local_exit_root().size() > 0) {
    _internal_set_new_local_exit_root(from._internal_new_local_exit_root());
  }
  if (from.gas_limit() != 0) {
    _internal_set_gas_limit(from._internal_gas_limit());
  }
  if (from.new_batch_num() != 0) {
    _internal_set_new_batch_num(from._internal_new_batch_num());
  }
}

void DebugV2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.DebugV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugV2::CopyFrom(const DebugV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.DebugV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugV2::IsInitialized() const {
  return true;
}

void DebugV2::InternalSwap(DebugV2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  new_state_root_.Swap(&other->new_state_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_acc_input_hash_.Swap(&other->new_acc_input_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_local_exit_root_.Swap(&other->new_local_exit_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DebugV2, new_batch_num_)
      + sizeof(DebugV2::new_batch_num_)
      - PROTOBUF_FIELD_OFFSET(DebugV2, gas_limit_)>(
          reinterpret_cast<char*>(&gas_limit_),
          reinterpret_cast<char*>(&other->gas_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugV2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse::ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse() {}
ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse::ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse::MergeFrom(const ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ProcessBatchResponseV2::InitAsDefaultInstance() {
}
class ProcessBatchResponseV2::_Internal {
 public:
};

ProcessBatchResponseV2::ProcessBatchResponseV2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  block_responses_(arena),
  read_write_addresses_(arena),
  smt_keys_(arena),
  program_keys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.ProcessBatchResponseV2)
}
ProcessBatchResponseV2::ProcessBatchResponseV2(const ProcessBatchResponseV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      block_responses_(from.block_responses_),
      smt_keys_(from.smt_keys_),
      program_keys_(from.program_keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  read_write_addresses_.MergeFrom(from.read_write_addresses_);
  new_state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_state_root().empty()) {
    new_state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_new_state_root(),
      GetArena());
  }
  new_acc_input_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_acc_input_hash().empty()) {
    new_acc_input_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_new_acc_input_hash(),
      GetArena());
  }
  new_local_exit_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_local_exit_root().empty()) {
    new_local_exit_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_new_local_exit_root(),
      GetArena());
  }
  prover_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prover_id().empty()) {
    prover_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prover_id(),
      GetArena());
  }
  ::memcpy(&new_batch_num_, &from.new_batch_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_rom_) -
    reinterpret_cast<char*>(&new_batch_num_)) + sizeof(error_rom_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.ProcessBatchResponseV2)
}

void ProcessBatchResponseV2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessBatchResponseV2_executor_2eproto.base);
  new_state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_acc_input_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_local_exit_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prover_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&new_batch_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_rom_) -
      reinterpret_cast<char*>(&new_batch_num_)) + sizeof(error_rom_));
}

ProcessBatchResponseV2::~ProcessBatchResponseV2() {
  // @@protoc_insertion_point(destructor:executor.v1.ProcessBatchResponseV2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProcessBatchResponseV2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  new_state_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_acc_input_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_local_exit_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prover_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProcessBatchResponseV2::ArenaDtor(void* object) {
  ProcessBatchResponseV2* _this = reinterpret_cast< ProcessBatchResponseV2* >(object);
  (void)_this;
}
void ProcessBatchResponseV2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessBatchResponseV2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessBatchResponseV2& ProcessBatchResponseV2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessBatchResponseV2_executor_2eproto.base);
  return *internal_default_instance();
}


void ProcessBatchResponseV2::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.ProcessBatchResponseV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_responses_.Clear();
  read_write_addresses_.Clear();
  smt_keys_.Clear();
  program_keys_.Clear();
  new_state_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_acc_input_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_local_exit_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prover_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&new_batch_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_rom_) -
      reinterpret_cast<char*>(&new_batch_num_)) + sizeof(error_rom_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessBatchResponseV2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes new_state_root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_new_state_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes new_acc_input_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_new_acc_input_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes new_local_exit_root = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_new_local_exit_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 new_batch_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          new_batch_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cnt_keccak_hashes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          cnt_keccak_hashes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cnt_poseidon_hashes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          cnt_poseidon_hashes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cnt_poseidon_paddings = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          cnt_poseidon_paddings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cnt_mem_aligns = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          cnt_mem_aligns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cnt_arithmetics = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          cnt_arithmetics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cnt_binaries = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          cnt_binaries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cnt_steps = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          cnt_steps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cnt_sha256_hashes = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          cnt_sha256_hashes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .executor.v1.ProcessBlockResponseV2 block_responses = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_block_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // .executor.v1.ExecutorError error = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::executor::v1::ExecutorError>(val));
        } else goto handle_unusual;
        continue;
      // map<string, .executor.v1.InfoReadWriteV2> read_write_addresses = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&read_write_addresses_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 flush_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          flush_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 stored_flush_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          stored_flush_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prover_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_prover_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.ProcessBatchResponseV2.prover_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas_used = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          gas_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes smt_keys = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_smt_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes program_keys = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_program_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 fork_id = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          fork_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 invalid_batch = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          invalid_batch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .executor.v1.RomError error_rom = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error_rom(static_cast<::executor::v1::RomError>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessBatchResponseV2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.ProcessBatchResponseV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes new_state_root = 1;
  if (this->new_state_root().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_new_state_root(), target);
  }

  // bytes new_acc_input_hash = 2;
  if (this->new_acc_input_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_new_acc_input_hash(), target);
  }

  // bytes new_local_exit_root = 3;
  if (this->new_local_exit_root().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_new_local_exit_root(), target);
  }

  // uint64 new_batch_num = 4;
  if (this->new_batch_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_new_batch_num(), target);
  }

  // uint32 cnt_keccak_hashes = 5;
  if (this->cnt_keccak_hashes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_cnt_keccak_hashes(), target);
  }

  // uint32 cnt_poseidon_hashes = 6;
  if (this->cnt_poseidon_hashes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_cnt_poseidon_hashes(), target);
  }

  // uint32 cnt_poseidon_paddings = 7;
  if (this->cnt_poseidon_paddings() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_cnt_poseidon_paddings(), target);
  }

  // uint32 cnt_mem_aligns = 8;
  if (this->cnt_mem_aligns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_cnt_mem_aligns(), target);
  }

  // uint32 cnt_arithmetics = 9;
  if (this->cnt_arithmetics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_cnt_arithmetics(), target);
  }

  // uint32 cnt_binaries = 10;
  if (this->cnt_binaries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_cnt_binaries(), target);
  }

  // uint32 cnt_steps = 11;
  if (this->cnt_steps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_cnt_steps(), target);
  }

  // uint32 cnt_sha256_hashes = 12;
  if (this->cnt_sha256_hashes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_cnt_sha256_hashes(), target);
  }

  // repeated .executor.v1.ProcessBlockResponseV2 block_responses = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_block_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_block_responses(i), target, stream);
  }

  // .executor.v1.ExecutorError error = 14;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_error(), target);
  }

  // map<string, .executor.v1.InfoReadWriteV2> read_write_addresses = 15;
  if (!this->_internal_read_write_addresses().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::executor::v1::InfoReadWriteV2 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "executor.v1.ProcessBatchResponseV2.ReadWriteAddressesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_read_write_addresses().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_read_write_addresses().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::executor::v1::InfoReadWriteV2 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::executor::v1::InfoReadWriteV2 >::const_iterator
          it = this->_internal_read_write_addresses().begin();
          it != this->_internal_read_write_addresses().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse::Funcs::InternalSerialize(15, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::executor::v1::InfoReadWriteV2 >::const_iterator
          it = this->_internal_read_write_addresses().begin();
          it != this->_internal_read_write_addresses().end(); ++it) {
        target = ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse::Funcs::InternalSerialize(15, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // uint64 flush_id = 16;
  if (this->flush_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_flush_id(), target);
  }

  // uint64 stored_flush_id = 17;
  if (this->stored_flush_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_stored_flush_id(), target);
  }

  // string prover_id = 18;
  if (this->prover_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prover_id().data(), static_cast<int>(this->_internal_prover_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessBatchResponseV2.prover_id");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_prover_id(), target);
  }

  // uint64 gas_used = 19;
  if (this->gas_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(19, this->_internal_gas_used(), target);
  }

  // repeated bytes smt_keys = 20;
  for (int i = 0, n = this->_internal_smt_keys_size(); i < n; i++) {
    const auto& s = this->_internal_smt_keys(i);
    target = stream->WriteBytes(20, s, target);
  }

  // repeated bytes program_keys = 21;
  for (int i = 0, n = this->_internal_program_keys_size(); i < n; i++) {
    const auto& s = this->_internal_program_keys(i);
    target = stream->WriteBytes(21, s, target);
  }

  // uint64 fork_id = 22;
  if (this->fork_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(22, this->_internal_fork_id(), target);
  }

  // uint32 invalid_batch = 23;
  if (this->invalid_batch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_invalid_batch(), target);
  }

  // .executor.v1.RomError error_rom = 24;
  if (this->error_rom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      24, this->_internal_error_rom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.ProcessBatchResponseV2)
  return target;
}

size_t ProcessBatchResponseV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.ProcessBatchResponseV2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .executor.v1.ProcessBlockResponseV2 block_responses = 13;
  total_size += 1UL * this->_internal_block_responses_size();
  for (const auto& msg : this->block_responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .executor.v1.InfoReadWriteV2> read_write_addresses = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_read_write_addresses_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::executor::v1::InfoReadWriteV2 >::const_iterator
      it = this->_internal_read_write_addresses().begin();
      it != this->_internal_read_write_addresses().end(); ++it) {
    total_size += ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated bytes smt_keys = 20;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(smt_keys_.size());
  for (int i = 0, n = smt_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      smt_keys_.Get(i));
  }

  // repeated bytes program_keys = 21;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(program_keys_.size());
  for (int i = 0, n = program_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      program_keys_.Get(i));
  }

  // bytes new_state_root = 1;
  if (this->new_state_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_new_state_root());
  }

  // bytes new_acc_input_hash = 2;
  if (this->new_acc_input_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_new_acc_input_hash());
  }

  // bytes new_local_exit_root = 3;
  if (this->new_local_exit_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_new_local_exit_root());
  }

  // string prover_id = 18;
  if (this->prover_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prover_id());
  }

  // uint64 new_batch_num = 4;
  if (this->new_batch_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_new_batch_num());
  }

  // uint32 cnt_keccak_hashes = 5;
  if (this->cnt_keccak_hashes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cnt_keccak_hashes());
  }

  // uint32 cnt_poseidon_hashes = 6;
  if (this->cnt_poseidon_hashes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cnt_poseidon_hashes());
  }

  // uint32 cnt_poseidon_paddings = 7;
  if (this->cnt_poseidon_paddings() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cnt_poseidon_paddings());
  }

  // uint32 cnt_mem_aligns = 8;
  if (this->cnt_mem_aligns() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cnt_mem_aligns());
  }

  // uint32 cnt_arithmetics = 9;
  if (this->cnt_arithmetics() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cnt_arithmetics());
  }

  // uint32 cnt_binaries = 10;
  if (this->cnt_binaries() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cnt_binaries());
  }

  // uint32 cnt_steps = 11;
  if (this->cnt_steps() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cnt_steps());
  }

  // uint32 cnt_sha256_hashes = 12;
  if (this->cnt_sha256_hashes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cnt_sha256_hashes());
  }

  // uint64 flush_id = 16;
  if (this->flush_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_flush_id());
  }

  // uint64 stored_flush_id = 17;
  if (this->stored_flush_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_stored_flush_id());
  }

  // .executor.v1.ExecutorError error = 14;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  // uint32 invalid_batch = 23;
  if (this->invalid_batch() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_invalid_batch());
  }

  // uint64 gas_used = 19;
  if (this->gas_used() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas_used());
  }

  // uint64 fork_id = 22;
  if (this->fork_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_fork_id());
  }

  // .executor.v1.RomError error_rom = 24;
  if (this->error_rom() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error_rom());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessBatchResponseV2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.ProcessBatchResponseV2)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessBatchResponseV2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessBatchResponseV2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.ProcessBatchResponseV2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.ProcessBatchResponseV2)
    MergeFrom(*source);
  }
}

void ProcessBatchResponseV2::MergeFrom(const ProcessBatchResponseV2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.ProcessBatchResponseV2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  block_responses_.MergeFrom(from.block_responses_);
  read_write_addresses_.MergeFrom(from.read_write_addresses_);
  smt_keys_.MergeFrom(from.smt_keys_);
  program_keys_.MergeFrom(from.program_keys_);
  if (from.new_state_root().size() > 0) {
    _internal_set_new_state_root(from._internal_new_state_root());
  }
  if (from.new_acc_input_hash().size() > 0) {
    _internal_set_new_acc_input_hash(from._internal_new_acc_input_hash());
  }
  if (from.new_local_exit_root().size() > 0) {
    _internal_set_new_local_exit_root(from._internal_new_local_exit_root());
  }
  if (from.prover_id().size() > 0) {
    _internal_set_prover_id(from._internal_prover_id());
  }
  if (from.new_batch_num() != 0) {
    _internal_set_new_batch_num(from._internal_new_batch_num());
  }
  if (from.cnt_keccak_hashes() != 0) {
    _internal_set_cnt_keccak_hashes(from._internal_cnt_keccak_hashes());
  }
  if (from.cnt_poseidon_hashes() != 0) {
    _internal_set_cnt_poseidon_hashes(from._internal_cnt_poseidon_hashes());
  }
  if (from.cnt_poseidon_paddings() != 0) {
    _internal_set_cnt_poseidon_paddings(from._internal_cnt_poseidon_paddings());
  }
  if (from.cnt_mem_aligns() != 0) {
    _internal_set_cnt_mem_aligns(from._internal_cnt_mem_aligns());
  }
  if (from.cnt_arithmetics() != 0) {
    _internal_set_cnt_arithmetics(from._internal_cnt_arithmetics());
  }
  if (from.cnt_binaries() != 0) {
    _internal_set_cnt_binaries(from._internal_cnt_binaries());
  }
  if (from.cnt_steps() != 0) {
    _internal_set_cnt_steps(from._internal_cnt_steps());
  }
  if (from.cnt_sha256_hashes() != 0) {
    _internal_set_cnt_sha256_hashes(from._internal_cnt_sha256_hashes());
  }
  if (from.flush_id() != 0) {
    _internal_set_flush_id(from._internal_flush_id());
  }
  if (from.stored_flush_id() != 0) {
    _internal_set_stored_flush_id(from._internal_stored_flush_id());
  }
  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
  if (from.invalid_batch() != 0) {
    _internal_set_invalid_batch(from._internal_invalid_batch());
  }
  if (from.gas_used() != 0) {
    _internal_set_gas_used(from._internal_gas_used());
  }
  if (from.fork_id() != 0) {
    _internal_set_fork_id(from._internal_fork_id());
  }
  if (from.error_rom() != 0) {
    _internal_set_error_rom(from._internal_error_rom());
  }
}

void ProcessBatchResponseV2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.ProcessBatchResponseV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessBatchResponseV2::CopyFrom(const ProcessBatchResponseV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.ProcessBatchResponseV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessBatchResponseV2::IsInitialized() const {
  return true;
}

void ProcessBatchResponseV2::InternalSwap(ProcessBatchResponseV2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  block_responses_.InternalSwap(&other->block_responses_);
  read_write_addresses_.Swap(&other->read_write_addresses_);
  smt_keys_.InternalSwap(&other->smt_keys_);
  program_keys_.InternalSwap(&other->program_keys_);
  new_state_root_.Swap(&other->new_state_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_acc_input_hash_.Swap(&other->new_acc_input_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  new_local_exit_root_.Swap(&other->new_local_exit_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prover_id_.Swap(&other->prover_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessBatchResponseV2, error_rom_)
      + sizeof(ProcessBatchResponseV2::error_rom_)
      - PROTOBUF_FIELD_OFFSET(ProcessBatchResponseV2, new_batch_num_)>(
          reinterpret_cast<char*>(&new_batch_num_),
          reinterpret_cast<char*>(&other->new_batch_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessBatchResponseV2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TraceConfigV2::InitAsDefaultInstance() {
}
class TraceConfigV2::_Internal {
 public:
};

TraceConfigV2::TraceConfigV2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.TraceConfigV2)
}
TraceConfigV2::TraceConfigV2(const TraceConfigV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tx_hash_to_generate_full_trace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tx_hash_to_generate_full_trace().empty()) {
    tx_hash_to_generate_full_trace_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tx_hash_to_generate_full_trace(),
      GetArena());
  }
  ::memcpy(&disable_storage_, &from.disable_storage_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_return_data_) -
    reinterpret_cast<char*>(&disable_storage_)) + sizeof(enable_return_data_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.TraceConfigV2)
}

void TraceConfigV2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TraceConfigV2_executor_2eproto.base);
  tx_hash_to_generate_full_trace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&disable_storage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_return_data_) -
      reinterpret_cast<char*>(&disable_storage_)) + sizeof(enable_return_data_));
}

TraceConfigV2::~TraceConfigV2() {
  // @@protoc_insertion_point(destructor:executor.v1.TraceConfigV2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TraceConfigV2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tx_hash_to_generate_full_trace_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TraceConfigV2::ArenaDtor(void* object) {
  TraceConfigV2* _this = reinterpret_cast< TraceConfigV2* >(object);
  (void)_this;
}
void TraceConfigV2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TraceConfigV2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TraceConfigV2& TraceConfigV2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TraceConfigV2_executor_2eproto.base);
  return *internal_default_instance();
}


void TraceConfigV2::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.TraceConfigV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_hash_to_generate_full_trace_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&disable_storage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_return_data_) -
      reinterpret_cast<char*>(&disable_storage_)) + sizeof(enable_return_data_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceConfigV2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 disable_storage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          disable_storage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 disable_stack = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          disable_stack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 enable_memory = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          enable_memory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 enable_return_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          enable_return_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes tx_hash_to_generate_full_trace = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_tx_hash_to_generate_full_trace();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TraceConfigV2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.TraceConfigV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 disable_storage = 1;
  if (this->disable_storage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_disable_storage(), target);
  }

  // uint32 disable_stack = 2;
  if (this->disable_stack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_disable_stack(), target);
  }

  // uint32 enable_memory = 3;
  if (this->enable_memory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_enable_memory(), target);
  }

  // uint32 enable_return_data = 4;
  if (this->enable_return_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_enable_return_data(), target);
  }

  // bytes tx_hash_to_generate_full_trace = 5;
  if (this->tx_hash_to_generate_full_trace().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_tx_hash_to_generate_full_trace(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.TraceConfigV2)
  return target;
}

size_t TraceConfigV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.TraceConfigV2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes tx_hash_to_generate_full_trace = 5;
  if (this->tx_hash_to_generate_full_trace().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx_hash_to_generate_full_trace());
  }

  // uint32 disable_storage = 1;
  if (this->disable_storage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_disable_storage());
  }

  // uint32 disable_stack = 2;
  if (this->disable_stack() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_disable_stack());
  }

  // uint32 enable_memory = 3;
  if (this->enable_memory() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_enable_memory());
  }

  // uint32 enable_return_data = 4;
  if (this->enable_return_data() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_enable_return_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceConfigV2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.TraceConfigV2)
  GOOGLE_DCHECK_NE(&from, this);
  const TraceConfigV2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TraceConfigV2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.TraceConfigV2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.TraceConfigV2)
    MergeFrom(*source);
  }
}

void TraceConfigV2::MergeFrom(const TraceConfigV2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.TraceConfigV2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tx_hash_to_generate_full_trace().size() > 0) {
    _internal_set_tx_hash_to_generate_full_trace(from._internal_tx_hash_to_generate_full_trace());
  }
  if (from.disable_storage() != 0) {
    _internal_set_disable_storage(from._internal_disable_storage());
  }
  if (from.disable_stack() != 0) {
    _internal_set_disable_stack(from._internal_disable_stack());
  }
  if (from.enable_memory() != 0) {
    _internal_set_enable_memory(from._internal_enable_memory());
  }
  if (from.enable_return_data() != 0) {
    _internal_set_enable_return_data(from._internal_enable_return_data());
  }
}

void TraceConfigV2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.TraceConfigV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraceConfigV2::CopyFrom(const TraceConfigV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.TraceConfigV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceConfigV2::IsInitialized() const {
  return true;
}

void TraceConfigV2::InternalSwap(TraceConfigV2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tx_hash_to_generate_full_trace_.Swap(&other->tx_hash_to_generate_full_trace_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceConfigV2, enable_return_data_)
      + sizeof(TraceConfigV2::enable_return_data_)
      - PROTOBUF_FIELD_OFFSET(TraceConfigV2, disable_storage_)>(
          reinterpret_cast<char*>(&disable_storage_),
          reinterpret_cast<char*>(&other->disable_storage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceConfigV2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

OverrideAccountV2_StateEntry_DoNotUse::OverrideAccountV2_StateEntry_DoNotUse() {}
OverrideAccountV2_StateEntry_DoNotUse::OverrideAccountV2_StateEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void OverrideAccountV2_StateEntry_DoNotUse::MergeFrom(const OverrideAccountV2_StateEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata OverrideAccountV2_StateEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void OverrideAccountV2_StateEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

OverrideAccountV2_StateDiffEntry_DoNotUse::OverrideAccountV2_StateDiffEntry_DoNotUse() {}
OverrideAccountV2_StateDiffEntry_DoNotUse::OverrideAccountV2_StateDiffEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void OverrideAccountV2_StateDiffEntry_DoNotUse::MergeFrom(const OverrideAccountV2_StateDiffEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata OverrideAccountV2_StateDiffEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void OverrideAccountV2_StateDiffEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void OverrideAccountV2::InitAsDefaultInstance() {
}
class OverrideAccountV2::_Internal {
 public:
};

OverrideAccountV2::OverrideAccountV2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  state_(arena),
  state_diff_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.OverrideAccountV2)
}
OverrideAccountV2::OverrideAccountV2(const OverrideAccountV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_.MergeFrom(from.state_);
  state_diff_.MergeFrom(from.state_diff_);
  balance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_balance().empty()) {
    balance_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_balance(),
      GetArena());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_code(),
      GetArena());
  }
  nonce_ = from.nonce_;
  // @@protoc_insertion_point(copy_constructor:executor.v1.OverrideAccountV2)
}

void OverrideAccountV2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OverrideAccountV2_executor_2eproto.base);
  balance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nonce_ = PROTOBUF_ULONGLONG(0);
}

OverrideAccountV2::~OverrideAccountV2() {
  // @@protoc_insertion_point(destructor:executor.v1.OverrideAccountV2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OverrideAccountV2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  balance_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OverrideAccountV2::ArenaDtor(void* object) {
  OverrideAccountV2* _this = reinterpret_cast< OverrideAccountV2* >(object);
  (void)_this;
}
void OverrideAccountV2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OverrideAccountV2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OverrideAccountV2& OverrideAccountV2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OverrideAccountV2_executor_2eproto.base);
  return *internal_default_instance();
}


void OverrideAccountV2::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.OverrideAccountV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_.Clear();
  state_diff_.Clear();
  balance_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nonce_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OverrideAccountV2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes balance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_balance();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 nonce = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&state_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> state_diff = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&state_diff_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OverrideAccountV2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.OverrideAccountV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes balance = 1;
  if (this->balance().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_balance(), target);
  }

  // uint64 nonce = 2;
  if (this->nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_nonce(), target);
  }

  // bytes code = 3;
  if (this->code().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_code(), target);
  }

  // map<string, string> state = 4;
  if (!this->_internal_state().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "executor.v1.OverrideAccountV2.StateEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "executor.v1.OverrideAccountV2.StateEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_state().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_state().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_state().begin();
          it != this->_internal_state().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = OverrideAccountV2_StateEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_state().begin();
          it != this->_internal_state().end(); ++it) {
        target = OverrideAccountV2_StateEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> state_diff = 5;
  if (!this->_internal_state_diff().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "executor.v1.OverrideAccountV2.StateDiffEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "executor.v1.OverrideAccountV2.StateDiffEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_state_diff().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_state_diff().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_state_diff().begin();
          it != this->_internal_state_diff().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = OverrideAccountV2_StateDiffEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_state_diff().begin();
          it != this->_internal_state_diff().end(); ++it) {
        target = OverrideAccountV2_StateDiffEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.OverrideAccountV2)
  return target;
}

size_t OverrideAccountV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.OverrideAccountV2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> state = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_state_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_state().begin();
      it != this->_internal_state().end(); ++it) {
    total_size += OverrideAccountV2_StateEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> state_diff = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_state_diff_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_state_diff().begin();
      it != this->_internal_state_diff().end(); ++it) {
    total_size += OverrideAccountV2_StateDiffEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes balance = 1;
  if (this->balance().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_balance());
  }

  // bytes code = 3;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_code());
  }

  // uint64 nonce = 2;
  if (this->nonce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_nonce());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OverrideAccountV2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.OverrideAccountV2)
  GOOGLE_DCHECK_NE(&from, this);
  const OverrideAccountV2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OverrideAccountV2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.OverrideAccountV2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.OverrideAccountV2)
    MergeFrom(*source);
  }
}

void OverrideAccountV2::MergeFrom(const OverrideAccountV2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.OverrideAccountV2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  state_.MergeFrom(from.state_);
  state_diff_.MergeFrom(from.state_diff_);
  if (from.balance().size() > 0) {
    _internal_set_balance(from._internal_balance());
  }
  if (from.code().size() > 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
}

void OverrideAccountV2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.OverrideAccountV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OverrideAccountV2::CopyFrom(const OverrideAccountV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.OverrideAccountV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OverrideAccountV2::IsInitialized() const {
  return true;
}

void OverrideAccountV2::InternalSwap(OverrideAccountV2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  state_.Swap(&other->state_);
  state_diff_.Swap(&other->state_diff_);
  balance_.Swap(&other->balance_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(nonce_, other->nonce_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OverrideAccountV2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InfoReadWriteV2::InitAsDefaultInstance() {
}
class InfoReadWriteV2::_Internal {
 public:
};

InfoReadWriteV2::InfoReadWriteV2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.InfoReadWriteV2)
}
InfoReadWriteV2::InfoReadWriteV2(const InfoReadWriteV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nonce().empty()) {
    nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_nonce(),
      GetArena());
  }
  balance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_balance().empty()) {
    balance_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_balance(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:executor.v1.InfoReadWriteV2)
}

void InfoReadWriteV2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InfoReadWriteV2_executor_2eproto.base);
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  balance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InfoReadWriteV2::~InfoReadWriteV2() {
  // @@protoc_insertion_point(destructor:executor.v1.InfoReadWriteV2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InfoReadWriteV2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nonce_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  balance_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InfoReadWriteV2::ArenaDtor(void* object) {
  InfoReadWriteV2* _this = reinterpret_cast< InfoReadWriteV2* >(object);
  (void)_this;
}
void InfoReadWriteV2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InfoReadWriteV2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InfoReadWriteV2& InfoReadWriteV2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InfoReadWriteV2_executor_2eproto.base);
  return *internal_default_instance();
}


void InfoReadWriteV2::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.InfoReadWriteV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nonce_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  balance_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InfoReadWriteV2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string nonce = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_nonce();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.InfoReadWriteV2.nonce"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string balance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_balance();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.InfoReadWriteV2.balance"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InfoReadWriteV2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.InfoReadWriteV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string nonce = 1;
  if (this->nonce().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nonce().data(), static_cast<int>(this->_internal_nonce().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.InfoReadWriteV2.nonce");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nonce(), target);
  }

  // string balance = 2;
  if (this->balance().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_balance().data(), static_cast<int>(this->_internal_balance().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.InfoReadWriteV2.balance");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.InfoReadWriteV2)
  return target;
}

size_t InfoReadWriteV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.InfoReadWriteV2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nonce = 1;
  if (this->nonce().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nonce());
  }

  // string balance = 2;
  if (this->balance().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_balance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InfoReadWriteV2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.InfoReadWriteV2)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoReadWriteV2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InfoReadWriteV2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.InfoReadWriteV2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.InfoReadWriteV2)
    MergeFrom(*source);
  }
}

void InfoReadWriteV2::MergeFrom(const InfoReadWriteV2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.InfoReadWriteV2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nonce().size() > 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  if (from.balance().size() > 0) {
    _internal_set_balance(from._internal_balance());
  }
}

void InfoReadWriteV2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.InfoReadWriteV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoReadWriteV2::CopyFrom(const InfoReadWriteV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.InfoReadWriteV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoReadWriteV2::IsInitialized() const {
  return true;
}

void InfoReadWriteV2::InternalSwap(InfoReadWriteV2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nonce_.Swap(&other->nonce_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  balance_.Swap(&other->balance_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata InfoReadWriteV2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FullTraceV2::InitAsDefaultInstance() {
  ::executor::v1::_FullTraceV2_default_instance_._instance.get_mutable()->context_ = const_cast< ::executor::v1::TransactionContextV2*>(
      ::executor::v1::TransactionContextV2::internal_default_instance());
}
class FullTraceV2::_Internal {
 public:
  static const ::executor::v1::TransactionContextV2& context(const FullTraceV2* msg);
};

const ::executor::v1::TransactionContextV2&
FullTraceV2::_Internal::context(const FullTraceV2* msg) {
  return *msg->context_;
}
FullTraceV2::FullTraceV2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  steps_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.FullTraceV2)
}
FullTraceV2::FullTraceV2(const FullTraceV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      steps_(from.steps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_context()) {
    context_ = new ::executor::v1::TransactionContextV2(*from.context_);
  } else {
    context_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:executor.v1.FullTraceV2)
}

void FullTraceV2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FullTraceV2_executor_2eproto.base);
  context_ = nullptr;
}

FullTraceV2::~FullTraceV2() {
  // @@protoc_insertion_point(destructor:executor.v1.FullTraceV2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FullTraceV2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete context_;
}

void FullTraceV2::ArenaDtor(void* object) {
  FullTraceV2* _this = reinterpret_cast< FullTraceV2* >(object);
  (void)_this;
}
void FullTraceV2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FullTraceV2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FullTraceV2& FullTraceV2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FullTraceV2_executor_2eproto.base);
  return *internal_default_instance();
}


void FullTraceV2::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.FullTraceV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steps_.Clear();
  if (GetArena() == nullptr && context_ != nullptr) {
    delete context_;
  }
  context_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FullTraceV2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .executor.v1.TransactionContextV2 context = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .executor.v1.TransactionStepV2 steps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_steps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FullTraceV2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.FullTraceV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .executor.v1.TransactionContextV2 context = 1;
  if (this->has_context()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::context(this), target, stream);
  }

  // repeated .executor.v1.TransactionStepV2 steps = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_steps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_steps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.FullTraceV2)
  return target;
}

size_t FullTraceV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.FullTraceV2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .executor.v1.TransactionStepV2 steps = 2;
  total_size += 1UL * this->_internal_steps_size();
  for (const auto& msg : this->steps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .executor.v1.TransactionContextV2 context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *context_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FullTraceV2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.FullTraceV2)
  GOOGLE_DCHECK_NE(&from, this);
  const FullTraceV2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FullTraceV2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.FullTraceV2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.FullTraceV2)
    MergeFrom(*source);
  }
}

void FullTraceV2::MergeFrom(const FullTraceV2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.FullTraceV2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  steps_.MergeFrom(from.steps_);
  if (from.has_context()) {
    _internal_mutable_context()->::executor::v1::TransactionContextV2::MergeFrom(from._internal_context());
  }
}

void FullTraceV2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.FullTraceV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FullTraceV2::CopyFrom(const FullTraceV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.FullTraceV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullTraceV2::IsInitialized() const {
  return true;
}

void FullTraceV2::InternalSwap(FullTraceV2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  steps_.InternalSwap(&other->steps_);
  swap(context_, other->context_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FullTraceV2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransactionContextV2::InitAsDefaultInstance() {
}
class TransactionContextV2::_Internal {
 public:
};

TransactionContextV2::TransactionContextV2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.TransactionContextV2)
}
TransactionContextV2::TransactionContextV2(const TransactionContextV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_from(),
      GetArena());
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to().empty()) {
    to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_to(),
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_hash().empty()) {
    block_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_block_hash(),
      GetArena());
  }
  output_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_output().empty()) {
    output_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_output(),
      GetArena());
  }
  gas_price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gas_price().empty()) {
    gas_price_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gas_price(),
      GetArena());
  }
  old_state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_old_state_root().empty()) {
    old_state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_old_state_root(),
      GetArena());
  }
  ::memcpy(&gas_, &from.gas_,
    static_cast<size_t>(reinterpret_cast<char*>(&execution_time_) -
    reinterpret_cast<char*>(&gas_)) + sizeof(execution_time_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.TransactionContextV2)
}

void TransactionContextV2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionContextV2_executor_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gas_price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gas_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&execution_time_) -
      reinterpret_cast<char*>(&gas_)) + sizeof(execution_time_));
}

TransactionContextV2::~TransactionContextV2() {
  // @@protoc_insertion_point(destructor:executor.v1.TransactionContextV2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransactionContextV2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gas_price_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_state_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionContextV2::ArenaDtor(void* object) {
  TransactionContextV2* _this = reinterpret_cast< TransactionContextV2* >(object);
  (void)_this;
}
void TransactionContextV2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionContextV2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionContextV2& TransactionContextV2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionContextV2_executor_2eproto.base);
  return *internal_default_instance();
}


void TransactionContextV2::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.TransactionContextV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  from_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  block_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  output_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gas_price_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  old_state_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&gas_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&execution_time_) -
      reinterpret_cast<char*>(&gas_)) + sizeof(execution_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionContextV2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.TransactionContextV2.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string from = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.TransactionContextV2.from"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string to = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.TransactionContextV2.to"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.TransactionContextV2.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes block_hash = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_block_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes output = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_output();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas_used = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          gas_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gas_price = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_gas_price();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.TransactionContextV2.gas_price"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 execution_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          execution_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes old_state_root = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_old_state_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 nonce = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tx_index = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          tx_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 chain_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          chain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionContextV2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.TransactionContextV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.TransactionContextV2.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // string from = 2;
  if (this->from().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.TransactionContextV2.from");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_from(), target);
  }

  // string to = 3;
  if (this->to().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.TransactionContextV2.to");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_to(), target);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  // uint64 gas = 5;
  if (this->gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_gas(), target);
  }

  // string value = 6;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.TransactionContextV2.value");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_value(), target);
  }

  // bytes block_hash = 7;
  if (this->block_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_block_hash(), target);
  }

  // bytes output = 8;
  if (this->output().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_output(), target);
  }

  // uint64 gas_used = 9;
  if (this->gas_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_gas_used(), target);
  }

  // string gas_price = 10;
  if (this->gas_price().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gas_price().data(), static_cast<int>(this->_internal_gas_price().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.TransactionContextV2.gas_price");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_gas_price(), target);
  }

  // uint32 execution_time = 11;
  if (this->execution_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_execution_time(), target);
  }

  // bytes old_state_root = 12;
  if (this->old_state_root().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_old_state_root(), target);
  }

  // uint64 nonce = 13;
  if (this->nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_nonce(), target);
  }

  // uint64 tx_index = 14;
  if (this->tx_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_tx_index(), target);
  }

  // uint64 chain_id = 15;
  if (this->chain_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->_internal_chain_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.TransactionContextV2)
  return target;
}

size_t TransactionContextV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.TransactionContextV2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string from = 2;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  // string to = 3;
  if (this->to().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string value = 6;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // bytes block_hash = 7;
  if (this->block_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_hash());
  }

  // bytes output = 8;
  if (this->output().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_output());
  }

  // string gas_price = 10;
  if (this->gas_price().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gas_price());
  }

  // bytes old_state_root = 12;
  if (this->old_state_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_old_state_root());
  }

  // uint64 gas = 5;
  if (this->gas() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas());
  }

  // uint64 gas_used = 9;
  if (this->gas_used() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas_used());
  }

  // uint64 nonce = 13;
  if (this->nonce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_nonce());
  }

  // uint64 tx_index = 14;
  if (this->tx_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tx_index());
  }

  // uint64 chain_id = 15;
  if (this->chain_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_chain_id());
  }

  // uint32 execution_time = 11;
  if (this->execution_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_execution_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionContextV2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.TransactionContextV2)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionContextV2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionContextV2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.TransactionContextV2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.TransactionContextV2)
    MergeFrom(*source);
  }
}

void TransactionContextV2::MergeFrom(const TransactionContextV2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.TransactionContextV2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.from().size() > 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to().size() > 0) {
    _internal_set_to(from._internal_to());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.block_hash().size() > 0) {
    _internal_set_block_hash(from._internal_block_hash());
  }
  if (from.output().size() > 0) {
    _internal_set_output(from._internal_output());
  }
  if (from.gas_price().size() > 0) {
    _internal_set_gas_price(from._internal_gas_price());
  }
  if (from.old_state_root().size() > 0) {
    _internal_set_old_state_root(from._internal_old_state_root());
  }
  if (from.gas() != 0) {
    _internal_set_gas(from._internal_gas());
  }
  if (from.gas_used() != 0) {
    _internal_set_gas_used(from._internal_gas_used());
  }
  if (from.nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  if (from.tx_index() != 0) {
    _internal_set_tx_index(from._internal_tx_index());
  }
  if (from.chain_id() != 0) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  if (from.execution_time() != 0) {
    _internal_set_execution_time(from._internal_execution_time());
  }
}

void TransactionContextV2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.TransactionContextV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionContextV2::CopyFrom(const TransactionContextV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.TransactionContextV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionContextV2::IsInitialized() const {
  return true;
}

void TransactionContextV2::InternalSwap(TransactionContextV2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_.Swap(&other->to_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  block_hash_.Swap(&other->block_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  output_.Swap(&other->output_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gas_price_.Swap(&other->gas_price_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  old_state_root_.Swap(&other->old_state_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionContextV2, execution_time_)
      + sizeof(TransactionContextV2::execution_time_)
      - PROTOBUF_FIELD_OFFSET(TransactionContextV2, gas_)>(
          reinterpret_cast<char*>(&gas_),
          reinterpret_cast<char*>(&other->gas_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionContextV2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

TransactionStepV2_StorageEntry_DoNotUse::TransactionStepV2_StorageEntry_DoNotUse() {}
TransactionStepV2_StorageEntry_DoNotUse::TransactionStepV2_StorageEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TransactionStepV2_StorageEntry_DoNotUse::MergeFrom(const TransactionStepV2_StorageEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TransactionStepV2_StorageEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TransactionStepV2_StorageEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void TransactionStepV2::InitAsDefaultInstance() {
  ::executor::v1::_TransactionStepV2_default_instance_._instance.get_mutable()->contract_ = const_cast< ::executor::v1::ContractV2*>(
      ::executor::v1::ContractV2::internal_default_instance());
}
class TransactionStepV2::_Internal {
 public:
  static const ::executor::v1::ContractV2& contract(const TransactionStepV2* msg);
};

const ::executor::v1::ContractV2&
TransactionStepV2::_Internal::contract(const TransactionStepV2* msg) {
  return *msg->contract_;
}
TransactionStepV2::TransactionStepV2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stack_(arena),
  storage_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.TransactionStepV2)
}
TransactionStepV2::TransactionStepV2(const TransactionStepV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stack_(from.stack_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  storage_.MergeFrom(from.storage_);
  state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state_root().empty()) {
    state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_state_root(),
      GetArena());
  }
  memory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_memory().empty()) {
    memory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_memory(),
      GetArena());
  }
  return_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_return_data().empty()) {
    return_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_return_data(),
      GetArena());
  }
  if (from._internal_has_contract()) {
    contract_ = new ::executor::v1::ContractV2(*from.contract_);
  } else {
    contract_ = nullptr;
  }
  ::memcpy(&pc_, &from.pc_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&pc_)) + sizeof(error_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.TransactionStepV2)
}

void TransactionStepV2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionStepV2_executor_2eproto.base);
  state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  return_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&contract_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&contract_)) + sizeof(error_));
}

TransactionStepV2::~TransactionStepV2() {
  // @@protoc_insertion_point(destructor:executor.v1.TransactionStepV2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransactionStepV2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  state_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  return_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete contract_;
}

void TransactionStepV2::ArenaDtor(void* object) {
  TransactionStepV2* _this = reinterpret_cast< TransactionStepV2* >(object);
  (void)_this;
}
void TransactionStepV2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionStepV2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionStepV2& TransactionStepV2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionStepV2_executor_2eproto.base);
  return *internal_default_instance();
}


void TransactionStepV2::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.TransactionStepV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stack_.Clear();
  storage_.Clear();
  state_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  memory_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  return_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && contract_ != nullptr) {
    delete contract_;
  }
  contract_ = nullptr;
  ::memset(&pc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&pc_)) + sizeof(error_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionStepV2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes state_root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_state_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 depth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 pc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas_cost = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          gas_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas_refund = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          gas_refund_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 op = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          op_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string stack = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_stack();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.TransactionStepV2.stack"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes memory = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_memory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 memory_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          memory_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 memory_offset = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          memory_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes return_data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_return_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .executor.v1.ContractV2 contract = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_contract(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .executor.v1.RomError error = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::executor::v1::RomError>(val));
        } else goto handle_unusual;
        continue;
      // map<string, string> storage = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&storage_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionStepV2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.TransactionStepV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes state_root = 1;
  if (this->state_root().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_state_root(), target);
  }

  // uint32 depth = 2;
  if (this->depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_depth(), target);
  }

  // uint64 pc = 3;
  if (this->pc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_pc(), target);
  }

  // uint64 gas = 4;
  if (this->gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_gas(), target);
  }

  // uint64 gas_cost = 5;
  if (this->gas_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_gas_cost(), target);
  }

  // uint64 gas_refund = 6;
  if (this->gas_refund() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_gas_refund(), target);
  }

  // uint32 op = 7;
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_op(), target);
  }

  // repeated string stack = 8;
  for (int i = 0, n = this->_internal_stack_size(); i < n; i++) {
    const auto& s = this->_internal_stack(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.TransactionStepV2.stack");
    target = stream->WriteString(8, s, target);
  }

  // bytes memory = 9;
  if (this->memory().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_memory(), target);
  }

  // uint32 memory_size = 10;
  if (this->memory_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_memory_size(), target);
  }

  // uint32 memory_offset = 11;
  if (this->memory_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_memory_offset(), target);
  }

  // bytes return_data = 12;
  if (this->return_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_return_data(), target);
  }

  // .executor.v1.ContractV2 contract = 13;
  if (this->has_contract()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::contract(this), target, stream);
  }

  // .executor.v1.RomError error = 14;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_error(), target);
  }

  // map<string, string> storage = 15;
  if (!this->_internal_storage().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "executor.v1.TransactionStepV2.StorageEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "executor.v1.TransactionStepV2.StorageEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_storage().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_storage().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_storage().begin();
          it != this->_internal_storage().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TransactionStepV2_StorageEntry_DoNotUse::Funcs::InternalSerialize(15, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_storage().begin();
          it != this->_internal_storage().end(); ++it) {
        target = TransactionStepV2_StorageEntry_DoNotUse::Funcs::InternalSerialize(15, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.TransactionStepV2)
  return target;
}

size_t TransactionStepV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.TransactionStepV2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string stack = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(stack_.size());
  for (int i = 0, n = stack_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      stack_.Get(i));
  }

  // map<string, string> storage = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_storage_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_storage().begin();
      it != this->_internal_storage().end(); ++it) {
    total_size += TransactionStepV2_StorageEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes state_root = 1;
  if (this->state_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_state_root());
  }

  // bytes memory = 9;
  if (this->memory().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_memory());
  }

  // bytes return_data = 12;
  if (this->return_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_return_data());
  }

  // .executor.v1.ContractV2 contract = 13;
  if (this->has_contract()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *contract_);
  }

  // uint64 pc = 3;
  if (this->pc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pc());
  }

  // uint64 gas = 4;
  if (this->gas() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas());
  }

  // uint32 depth = 2;
  if (this->depth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_depth());
  }

  // uint32 op = 7;
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_op());
  }

  // uint64 gas_cost = 5;
  if (this->gas_cost() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas_cost());
  }

  // uint64 gas_refund = 6;
  if (this->gas_refund() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas_refund());
  }

  // uint32 memory_size = 10;
  if (this->memory_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_memory_size());
  }

  // uint32 memory_offset = 11;
  if (this->memory_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_memory_offset());
  }

  // .executor.v1.RomError error = 14;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionStepV2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.TransactionStepV2)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionStepV2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionStepV2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.TransactionStepV2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.TransactionStepV2)
    MergeFrom(*source);
  }
}

void TransactionStepV2::MergeFrom(const TransactionStepV2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.TransactionStepV2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stack_.MergeFrom(from.stack_);
  storage_.MergeFrom(from.storage_);
  if (from.state_root().size() > 0) {
    _internal_set_state_root(from._internal_state_root());
  }
  if (from.memory().size() > 0) {
    _internal_set_memory(from._internal_memory());
  }
  if (from.return_data().size() > 0) {
    _internal_set_return_data(from._internal_return_data());
  }
  if (from.has_contract()) {
    _internal_mutable_contract()->::executor::v1::ContractV2::MergeFrom(from._internal_contract());
  }
  if (from.pc() != 0) {
    _internal_set_pc(from._internal_pc());
  }
  if (from.gas() != 0) {
    _internal_set_gas(from._internal_gas());
  }
  if (from.depth() != 0) {
    _internal_set_depth(from._internal_depth());
  }
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
  if (from.gas_cost() != 0) {
    _internal_set_gas_cost(from._internal_gas_cost());
  }
  if (from.gas_refund() != 0) {
    _internal_set_gas_refund(from._internal_gas_refund());
  }
  if (from.memory_size() != 0) {
    _internal_set_memory_size(from._internal_memory_size());
  }
  if (from.memory_offset() != 0) {
    _internal_set_memory_offset(from._internal_memory_offset());
  }
  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
}

void TransactionStepV2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.TransactionStepV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionStepV2::CopyFrom(const TransactionStepV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.TransactionStepV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionStepV2::IsInitialized() const {
  return true;
}

void TransactionStepV2::InternalSwap(TransactionStepV2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stack_.InternalSwap(&other->stack_);
  storage_.Swap(&other->storage_);
  state_root_.Swap(&other->state_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  memory_.Swap(&other->memory_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  return_data_.Swap(&other->return_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionStepV2, error_)
      + sizeof(TransactionStepV2::error_)
      - PROTOBUF_FIELD_OFFSET(TransactionStepV2, contract_)>(
          reinterpret_cast<char*>(&contract_),
          reinterpret_cast<char*>(&other->contract_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionStepV2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractV2::InitAsDefaultInstance() {
}
class ContractV2::_Internal {
 public:
};

ContractV2::ContractV2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.ContractV2)
}
ContractV2::ContractV2(const ContractV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  caller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_caller().empty()) {
    caller_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_caller(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  gas_ = from.gas_;
  // @@protoc_insertion_point(copy_constructor:executor.v1.ContractV2)
}

void ContractV2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractV2_executor_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  caller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gas_ = PROTOBUF_ULONGLONG(0);
}

ContractV2::~ContractV2() {
  // @@protoc_insertion_point(destructor:executor.v1.ContractV2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContractV2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  caller_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContractV2::ArenaDtor(void* object) {
  ContractV2* _this = reinterpret_cast< ContractV2* >(object);
  (void)_this;
}
void ContractV2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContractV2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractV2& ContractV2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractV2_executor_2eproto.base);
  return *internal_default_instance();
}


void ContractV2::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.ContractV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  caller_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  gas_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractV2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.ContractV2.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string caller = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_caller();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.ContractV2.caller"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.ContractV2.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.ContractV2.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractV2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.ContractV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ContractV2.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // string caller = 2;
  if (this->caller().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_caller().data(), static_cast<int>(this->_internal_caller().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ContractV2.caller");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_caller(), target);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ContractV2.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  // uint64 gas = 5;
  if (this->gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_gas(), target);
  }

  // string type = 6;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ContractV2.type");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.ContractV2)
  return target;
}

size_t ContractV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.ContractV2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string caller = 2;
  if (this->caller().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_caller());
  }

  // string value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string type = 6;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // uint64 gas = 5;
  if (this->gas() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractV2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.ContractV2)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractV2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractV2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.ContractV2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.ContractV2)
    MergeFrom(*source);
  }
}

void ContractV2::MergeFrom(const ContractV2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.ContractV2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.caller().size() > 0) {
    _internal_set_caller(from._internal_caller());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.gas() != 0) {
    _internal_set_gas(from._internal_gas());
  }
}

void ContractV2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.ContractV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractV2::CopyFrom(const ContractV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.ContractV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractV2::IsInitialized() const {
  return true;
}

void ContractV2::InternalSwap(ContractV2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  caller_.Swap(&other->caller_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(gas_, other->gas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractV2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcessBlockResponseV2::InitAsDefaultInstance() {
}
class ProcessBlockResponseV2::_Internal {
 public:
};

ProcessBlockResponseV2::ProcessBlockResponseV2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  responses_(arena),
  logs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.ProcessBlockResponseV2)
}
ProcessBlockResponseV2::ProcessBlockResponseV2(const ProcessBlockResponseV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_),
      logs_(from.logs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parent_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parent_hash().empty()) {
    parent_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_parent_hash(),
      GetArena());
  }
  coinbase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_coinbase().empty()) {
    coinbase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_coinbase(),
      GetArena());
  }
  ger_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ger().empty()) {
    ger_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ger(),
      GetArena());
  }
  block_hash_l1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_hash_l1().empty()) {
    block_hash_l1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_block_hash_l1(),
      GetArena());
  }
  block_info_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_info_root().empty()) {
    block_info_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_block_info_root(),
      GetArena());
  }
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_hash().empty()) {
    block_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_block_hash(),
      GetArena());
  }
  ::memcpy(&gas_limit_, &from.gas_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&gas_limit_)) + sizeof(error_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.ProcessBlockResponseV2)
}

void ProcessBlockResponseV2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessBlockResponseV2_executor_2eproto.base);
  parent_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coinbase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ger_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_l1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_info_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gas_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&gas_limit_)) + sizeof(error_));
}

ProcessBlockResponseV2::~ProcessBlockResponseV2() {
  // @@protoc_insertion_point(destructor:executor.v1.ProcessBlockResponseV2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProcessBlockResponseV2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  parent_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coinbase_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ger_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_l1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_info_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProcessBlockResponseV2::ArenaDtor(void* object) {
  ProcessBlockResponseV2* _this = reinterpret_cast< ProcessBlockResponseV2* >(object);
  (void)_this;
}
void ProcessBlockResponseV2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessBlockResponseV2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessBlockResponseV2& ProcessBlockResponseV2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessBlockResponseV2_executor_2eproto.base);
  return *internal_default_instance();
}


void ProcessBlockResponseV2::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.ProcessBlockResponseV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responses_.Clear();
  logs_.Clear();
  parent_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  coinbase_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ger_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  block_hash_l1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  block_info_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  block_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&gas_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&gas_limit_)) + sizeof(error_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessBlockResponseV2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes parent_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_parent_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string coinbase = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_coinbase();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.ProcessBlockResponseV2.coinbase"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gas_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 block_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          block_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ger = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_ger();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes block_hash_l1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_block_hash_l1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas_used = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          gas_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes block_info_root = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_block_info_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes block_hash = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_block_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .executor.v1.ProcessTransactionResponseV2 responses = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .executor.v1.LogV2 logs = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // .executor.v1.RomError error = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::executor::v1::RomError>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessBlockResponseV2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.ProcessBlockResponseV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes parent_hash = 1;
  if (this->parent_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_parent_hash(), target);
  }

  // string coinbase = 2;
  if (this->coinbase().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_coinbase().data(), static_cast<int>(this->_internal_coinbase().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessBlockResponseV2.coinbase");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_coinbase(), target);
  }

  // uint64 gas_limit = 3;
  if (this->gas_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_gas_limit(), target);
  }

  // uint64 block_number = 4;
  if (this->block_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_block_number(), target);
  }

  // uint64 timestamp = 5;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_timestamp(), target);
  }

  // bytes ger = 6;
  if (this->ger().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_ger(), target);
  }

  // bytes block_hash_l1 = 7;
  if (this->block_hash_l1().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_block_hash_l1(), target);
  }

  // uint64 gas_used = 8;
  if (this->gas_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_gas_used(), target);
  }

  // bytes block_info_root = 9;
  if (this->block_info_root().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_block_info_root(), target);
  }

  // bytes block_hash = 10;
  if (this->block_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_block_hash(), target);
  }

  // repeated .executor.v1.ProcessTransactionResponseV2 responses = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_responses(i), target, stream);
  }

  // repeated .executor.v1.LogV2 logs = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_logs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_logs(i), target, stream);
  }

  // .executor.v1.RomError error = 13;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.ProcessBlockResponseV2)
  return target;
}

size_t ProcessBlockResponseV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.ProcessBlockResponseV2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .executor.v1.ProcessTransactionResponseV2 responses = 11;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .executor.v1.LogV2 logs = 12;
  total_size += 1UL * this->_internal_logs_size();
  for (const auto& msg : this->logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes parent_hash = 1;
  if (this->parent_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_parent_hash());
  }

  // string coinbase = 2;
  if (this->coinbase().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_coinbase());
  }

  // bytes ger = 6;
  if (this->ger().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ger());
  }

  // bytes block_hash_l1 = 7;
  if (this->block_hash_l1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_hash_l1());
  }

  // bytes block_info_root = 9;
  if (this->block_info_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_info_root());
  }

  // bytes block_hash = 10;
  if (this->block_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_hash());
  }

  // uint64 gas_limit = 3;
  if (this->gas_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas_limit());
  }

  // uint64 block_number = 4;
  if (this->block_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_block_number());
  }

  // uint64 timestamp = 5;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 gas_used = 8;
  if (this->gas_used() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas_used());
  }

  // .executor.v1.RomError error = 13;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessBlockResponseV2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.ProcessBlockResponseV2)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessBlockResponseV2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessBlockResponseV2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.ProcessBlockResponseV2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.ProcessBlockResponseV2)
    MergeFrom(*source);
  }
}

void ProcessBlockResponseV2::MergeFrom(const ProcessBlockResponseV2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.ProcessBlockResponseV2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responses_.MergeFrom(from.responses_);
  logs_.MergeFrom(from.logs_);
  if (from.parent_hash().size() > 0) {
    _internal_set_parent_hash(from._internal_parent_hash());
  }
  if (from.coinbase().size() > 0) {
    _internal_set_coinbase(from._internal_coinbase());
  }
  if (from.ger().size() > 0) {
    _internal_set_ger(from._internal_ger());
  }
  if (from.block_hash_l1().size() > 0) {
    _internal_set_block_hash_l1(from._internal_block_hash_l1());
  }
  if (from.block_info_root().size() > 0) {
    _internal_set_block_info_root(from._internal_block_info_root());
  }
  if (from.block_hash().size() > 0) {
    _internal_set_block_hash(from._internal_block_hash());
  }
  if (from.gas_limit() != 0) {
    _internal_set_gas_limit(from._internal_gas_limit());
  }
  if (from.block_number() != 0) {
    _internal_set_block_number(from._internal_block_number());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.gas_used() != 0) {
    _internal_set_gas_used(from._internal_gas_used());
  }
  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
}

void ProcessBlockResponseV2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.ProcessBlockResponseV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessBlockResponseV2::CopyFrom(const ProcessBlockResponseV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.ProcessBlockResponseV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessBlockResponseV2::IsInitialized() const {
  return true;
}

void ProcessBlockResponseV2::InternalSwap(ProcessBlockResponseV2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  responses_.InternalSwap(&other->responses_);
  logs_.InternalSwap(&other->logs_);
  parent_hash_.Swap(&other->parent_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  coinbase_.Swap(&other->coinbase_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ger_.Swap(&other->ger_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  block_hash_l1_.Swap(&other->block_hash_l1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  block_info_root_.Swap(&other->block_info_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  block_hash_.Swap(&other->block_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessBlockResponseV2, error_)
      + sizeof(ProcessBlockResponseV2::error_)
      - PROTOBUF_FIELD_OFFSET(ProcessBlockResponseV2, gas_limit_)>(
          reinterpret_cast<char*>(&gas_limit_),
          reinterpret_cast<char*>(&other->gas_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessBlockResponseV2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcessTransactionResponseV2::InitAsDefaultInstance() {
  ::executor::v1::_ProcessTransactionResponseV2_default_instance_._instance.get_mutable()->full_trace_ = const_cast< ::executor::v1::FullTraceV2*>(
      ::executor::v1::FullTraceV2::internal_default_instance());
}
class ProcessTransactionResponseV2::_Internal {
 public:
  static const ::executor::v1::FullTraceV2& full_trace(const ProcessTransactionResponseV2* msg);
};

const ::executor::v1::FullTraceV2&
ProcessTransactionResponseV2::_Internal::full_trace(const ProcessTransactionResponseV2* msg) {
  return *msg->full_trace_;
}
ProcessTransactionResponseV2::ProcessTransactionResponseV2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  logs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.ProcessTransactionResponseV2)
}
ProcessTransactionResponseV2::ProcessTransactionResponseV2(const ProcessTransactionResponseV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      logs_(from.logs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tx_hash().empty()) {
    tx_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tx_hash(),
      GetArena());
  }
  tx_hash_l2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tx_hash_l2().empty()) {
    tx_hash_l2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tx_hash_l2(),
      GetArena());
  }
  rlp_tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rlp_tx().empty()) {
    rlp_tx_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_rlp_tx(),
      GetArena());
  }
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_hash().empty()) {
    block_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_block_hash(),
      GetArena());
  }
  return_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_return_value().empty()) {
    return_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_return_value(),
      GetArena());
  }
  create_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_address().empty()) {
    create_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_create_address(),
      GetArena());
  }
  state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state_root().empty()) {
    state_root_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_state_root(),
      GetArena());
  }
  effective_gas_price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_effective_gas_price().empty()) {
    effective_gas_price_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_effective_gas_price(),
      GetArena());
  }
  if (from._internal_has_full_trace()) {
    full_trace_ = new ::executor::v1::FullTraceV2(*from.full_trace_);
  } else {
    full_trace_ = nullptr;
  }
  ::memcpy(&block_number_, &from.block_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_balance_opcode_) -
    reinterpret_cast<char*>(&block_number_)) + sizeof(has_balance_opcode_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.ProcessTransactionResponseV2)
}

void ProcessTransactionResponseV2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessTransactionResponseV2_executor_2eproto.base);
  tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_hash_l2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rlp_tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  return_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  effective_gas_price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&full_trace_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_balance_opcode_) -
      reinterpret_cast<char*>(&full_trace_)) + sizeof(has_balance_opcode_));
}

ProcessTransactionResponseV2::~ProcessTransactionResponseV2() {
  // @@protoc_insertion_point(destructor:executor.v1.ProcessTransactionResponseV2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProcessTransactionResponseV2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tx_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_hash_l2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rlp_tx_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  return_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  effective_gas_price_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete full_trace_;
}

void ProcessTransactionResponseV2::ArenaDtor(void* object) {
  ProcessTransactionResponseV2* _this = reinterpret_cast< ProcessTransactionResponseV2* >(object);
  (void)_this;
}
void ProcessTransactionResponseV2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessTransactionResponseV2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessTransactionResponseV2& ProcessTransactionResponseV2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessTransactionResponseV2_executor_2eproto.base);
  return *internal_default_instance();
}


void ProcessTransactionResponseV2::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.ProcessTransactionResponseV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logs_.Clear();
  tx_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tx_hash_l2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rlp_tx_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  block_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  return_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  create_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  state_root_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  effective_gas_price_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && full_trace_ != nullptr) {
    delete full_trace_;
  }
  full_trace_ = nullptr;
  ::memset(&block_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_balance_opcode_) -
      reinterpret_cast<char*>(&block_number_)) + sizeof(has_balance_opcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessTransactionResponseV2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes tx_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tx_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes tx_hash_l2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tx_hash_l2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes rlp_tx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_rlp_tx();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes block_hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_block_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 block_number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          block_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes return_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_return_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas_left = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          gas_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas_used = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          gas_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 cumulative_gas_used = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          cumulative_gas_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas_refunded = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          gas_refunded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .executor.v1.RomError error = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::executor::v1::RomError>(val));
        } else goto handle_unusual;
        continue;
      // string create_address = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_create_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.ProcessTransactionResponseV2.create_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes state_root = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_state_root();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .executor.v1.LogV2 logs = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // .executor.v1.FullTraceV2 full_trace = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_full_trace(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string effective_gas_price = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_effective_gas_price();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.ProcessTransactionResponseV2.effective_gas_price"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 effective_percentage = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          effective_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 has_gasprice_opcode = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          has_gasprice_opcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 has_balance_opcode = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          has_balance_opcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessTransactionResponseV2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.ProcessTransactionResponseV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes tx_hash = 1;
  if (this->tx_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_tx_hash(), target);
  }

  // bytes tx_hash_l2 = 2;
  if (this->tx_hash_l2().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_tx_hash_l2(), target);
  }

  // bytes rlp_tx = 3;
  if (this->rlp_tx().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_rlp_tx(), target);
  }

  // bytes block_hash = 4;
  if (this->block_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_block_hash(), target);
  }

  // uint64 block_number = 5;
  if (this->block_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_block_number(), target);
  }

  // uint32 type = 6;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_type(), target);
  }

  // bytes return_value = 7;
  if (this->return_value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_return_value(), target);
  }

  // uint64 gas_left = 8;
  if (this->gas_left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_gas_left(), target);
  }

  // uint64 gas_used = 9;
  if (this->gas_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_gas_used(), target);
  }

  // uint64 cumulative_gas_used = 10;
  if (this->cumulative_gas_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_cumulative_gas_used(), target);
  }

  // uint64 gas_refunded = 11;
  if (this->gas_refunded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_gas_refunded(), target);
  }

  // .executor.v1.RomError error = 12;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_error(), target);
  }

  // string create_address = 13;
  if (this->create_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_address().data(), static_cast<int>(this->_internal_create_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessTransactionResponseV2.create_address");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_create_address(), target);
  }

  // bytes state_root = 14;
  if (this->state_root().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        14, this->_internal_state_root(), target);
  }

  // repeated .executor.v1.LogV2 logs = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_logs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_logs(i), target, stream);
  }

  // .executor.v1.FullTraceV2 full_trace = 16;
  if (this->has_full_trace()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::full_trace(this), target, stream);
  }

  // string effective_gas_price = 17;
  if (this->effective_gas_price().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_effective_gas_price().data(), static_cast<int>(this->_internal_effective_gas_price().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.ProcessTransactionResponseV2.effective_gas_price");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_effective_gas_price(), target);
  }

  // uint32 effective_percentage = 18;
  if (this->effective_percentage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_effective_percentage(), target);
  }

  // uint32 has_gasprice_opcode = 19;
  if (this->has_gasprice_opcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_has_gasprice_opcode(), target);
  }

  // uint32 has_balance_opcode = 20;
  if (this->has_balance_opcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_has_balance_opcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.ProcessTransactionResponseV2)
  return target;
}

size_t ProcessTransactionResponseV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.ProcessTransactionResponseV2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .executor.v1.LogV2 logs = 15;
  total_size += 1UL * this->_internal_logs_size();
  for (const auto& msg : this->logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes tx_hash = 1;
  if (this->tx_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx_hash());
  }

  // bytes tx_hash_l2 = 2;
  if (this->tx_hash_l2().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx_hash_l2());
  }

  // bytes rlp_tx = 3;
  if (this->rlp_tx().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rlp_tx());
  }

  // bytes block_hash = 4;
  if (this->block_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_hash());
  }

  // bytes return_value = 7;
  if (this->return_value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_return_value());
  }

  // string create_address = 13;
  if (this->create_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_address());
  }

  // bytes state_root = 14;
  if (this->state_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_state_root());
  }

  // string effective_gas_price = 17;
  if (this->effective_gas_price().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_effective_gas_price());
  }

  // .executor.v1.FullTraceV2 full_trace = 16;
  if (this->has_full_trace()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *full_trace_);
  }

  // uint64 block_number = 5;
  if (this->block_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_block_number());
  }

  // uint64 gas_left = 8;
  if (this->gas_left() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas_left());
  }

  // uint64 gas_used = 9;
  if (this->gas_used() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas_used());
  }

  // uint32 type = 6;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  // .executor.v1.RomError error = 12;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  // uint64 cumulative_gas_used = 10;
  if (this->cumulative_gas_used() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_cumulative_gas_used());
  }

  // uint64 gas_refunded = 11;
  if (this->gas_refunded() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas_refunded());
  }

  // uint32 effective_percentage = 18;
  if (this->effective_percentage() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_effective_percentage());
  }

  // uint32 has_gasprice_opcode = 19;
  if (this->has_gasprice_opcode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_has_gasprice_opcode());
  }

  // uint32 has_balance_opcode = 20;
  if (this->has_balance_opcode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_has_balance_opcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessTransactionResponseV2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.ProcessTransactionResponseV2)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessTransactionResponseV2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessTransactionResponseV2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.ProcessTransactionResponseV2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.ProcessTransactionResponseV2)
    MergeFrom(*source);
  }
}

void ProcessTransactionResponseV2::MergeFrom(const ProcessTransactionResponseV2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.ProcessTransactionResponseV2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  logs_.MergeFrom(from.logs_);
  if (from.tx_hash().size() > 0) {
    _internal_set_tx_hash(from._internal_tx_hash());
  }
  if (from.tx_hash_l2().size() > 0) {
    _internal_set_tx_hash_l2(from._internal_tx_hash_l2());
  }
  if (from.rlp_tx().size() > 0) {
    _internal_set_rlp_tx(from._internal_rlp_tx());
  }
  if (from.block_hash().size() > 0) {
    _internal_set_block_hash(from._internal_block_hash());
  }
  if (from.return_value().size() > 0) {
    _internal_set_return_value(from._internal_return_value());
  }
  if (from.create_address().size() > 0) {
    _internal_set_create_address(from._internal_create_address());
  }
  if (from.state_root().size() > 0) {
    _internal_set_state_root(from._internal_state_root());
  }
  if (from.effective_gas_price().size() > 0) {
    _internal_set_effective_gas_price(from._internal_effective_gas_price());
  }
  if (from.has_full_trace()) {
    _internal_mutable_full_trace()->::executor::v1::FullTraceV2::MergeFrom(from._internal_full_trace());
  }
  if (from.block_number() != 0) {
    _internal_set_block_number(from._internal_block_number());
  }
  if (from.gas_left() != 0) {
    _internal_set_gas_left(from._internal_gas_left());
  }
  if (from.gas_used() != 0) {
    _internal_set_gas_used(from._internal_gas_used());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
  if (from.cumulative_gas_used() != 0) {
    _internal_set_cumulative_gas_used(from._internal_cumulative_gas_used());
  }
  if (from.gas_refunded() != 0) {
    _internal_set_gas_refunded(from._internal_gas_refunded());
  }
  if (from.effective_percentage() != 0) {
    _internal_set_effective_percentage(from._internal_effective_percentage());
  }
  if (from.has_gasprice_opcode() != 0) {
    _internal_set_has_gasprice_opcode(from._internal_has_gasprice_opcode());
  }
  if (from.has_balance_opcode() != 0) {
    _internal_set_has_balance_opcode(from._internal_has_balance_opcode());
  }
}

void ProcessTransactionResponseV2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.ProcessTransactionResponseV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessTransactionResponseV2::CopyFrom(const ProcessTransactionResponseV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.ProcessTransactionResponseV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessTransactionResponseV2::IsInitialized() const {
  return true;
}

void ProcessTransactionResponseV2::InternalSwap(ProcessTransactionResponseV2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  logs_.InternalSwap(&other->logs_);
  tx_hash_.Swap(&other->tx_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tx_hash_l2_.Swap(&other->tx_hash_l2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rlp_tx_.Swap(&other->rlp_tx_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  block_hash_.Swap(&other->block_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  return_value_.Swap(&other->return_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  create_address_.Swap(&other->create_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  state_root_.Swap(&other->state_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  effective_gas_price_.Swap(&other->effective_gas_price_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessTransactionResponseV2, has_balance_opcode_)
      + sizeof(ProcessTransactionResponseV2::has_balance_opcode_)
      - PROTOBUF_FIELD_OFFSET(ProcessTransactionResponseV2, full_trace_)>(
          reinterpret_cast<char*>(&full_trace_),
          reinterpret_cast<char*>(&other->full_trace_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessTransactionResponseV2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogV2::InitAsDefaultInstance() {
}
class LogV2::_Internal {
 public:
};

LogV2::LogV2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  topics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:executor.v1.LogV2)
}
LogV2::LogV2(const LogV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      topics_(from.topics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tx_hash().empty()) {
    tx_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tx_hash(),
      GetArena());
  }
  tx_hash_l2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tx_hash_l2().empty()) {
    tx_hash_l2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tx_hash_l2(),
      GetArena());
  }
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_hash().empty()) {
    block_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_block_hash(),
      GetArena());
  }
  ::memcpy(&block_number_, &from.block_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&block_number_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:executor.v1.LogV2)
}

void LogV2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogV2_executor_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_hash_l2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&block_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&block_number_)) + sizeof(index_));
}

LogV2::~LogV2() {
  // @@protoc_insertion_point(destructor:executor.v1.LogV2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogV2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_hash_l2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogV2::ArenaDtor(void* object) {
  LogV2* _this = reinterpret_cast< LogV2* >(object);
  (void)_this;
}
void LogV2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogV2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogV2& LogV2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogV2_executor_2eproto.base);
  return *internal_default_instance();
}


void LogV2::Clear() {
// @@protoc_insertion_point(message_clear_start:executor.v1.LogV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topics_.Clear();
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tx_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tx_hash_l2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  block_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&block_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&block_number_)) + sizeof(index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogV2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "executor.v1.LogV2.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes topics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_topics();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 block_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          block_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes tx_hash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_tx_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes tx_hash_l2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_tx_hash_l2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tx_index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          tx_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes block_hash = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_block_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 index = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogV2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:executor.v1.LogV2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "executor.v1.LogV2.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // repeated bytes topics = 2;
  for (int i = 0, n = this->_internal_topics_size(); i < n; i++) {
    const auto& s = this->_internal_topics(i);
    target = stream->WriteBytes(2, s, target);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  // uint64 block_number = 4;
  if (this->block_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_block_number(), target);
  }

  // bytes tx_hash = 5;
  if (this->tx_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_tx_hash(), target);
  }

  // bytes tx_hash_l2 = 6;
  if (this->tx_hash_l2().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_tx_hash_l2(), target);
  }

  // uint32 tx_index = 7;
  if (this->tx_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_tx_index(), target);
  }

  // bytes block_hash = 8;
  if (this->block_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_block_hash(), target);
  }

  // uint32 index = 9;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:executor.v1.LogV2)
  return target;
}

size_t LogV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:executor.v1.LogV2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes topics = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(topics_.size());
  for (int i = 0, n = topics_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      topics_.Get(i));
  }

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // bytes tx_hash = 5;
  if (this->tx_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx_hash());
  }

  // bytes tx_hash_l2 = 6;
  if (this->tx_hash_l2().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tx_hash_l2());
  }

  // bytes block_hash = 8;
  if (this->block_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_hash());
  }

  // uint64 block_number = 4;
  if (this->block_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_block_number());
  }

  // uint32 tx_index = 7;
  if (this->tx_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tx_index());
  }

  // uint32 index = 9;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogV2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:executor.v1.LogV2)
  GOOGLE_DCHECK_NE(&from, this);
  const LogV2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogV2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:executor.v1.LogV2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:executor.v1.LogV2)
    MergeFrom(*source);
  }
}

void LogV2::MergeFrom(const LogV2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:executor.v1.LogV2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  topics_.MergeFrom(from.topics_);
  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.tx_hash().size() > 0) {
    _internal_set_tx_hash(from._internal_tx_hash());
  }
  if (from.tx_hash_l2().size() > 0) {
    _internal_set_tx_hash_l2(from._internal_tx_hash_l2());
  }
  if (from.block_hash().size() > 0) {
    _internal_set_block_hash(from._internal_block_hash());
  }
  if (from.block_number() != 0) {
    _internal_set_block_number(from._internal_block_number());
  }
  if (from.tx_index() != 0) {
    _internal_set_tx_index(from._internal_tx_index());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void LogV2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:executor.v1.LogV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogV2::CopyFrom(const LogV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:executor.v1.LogV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogV2::IsInitialized() const {
  return true;
}

void LogV2::InternalSwap(LogV2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  topics_.InternalSwap(&other->topics_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tx_hash_.Swap(&other->tx_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tx_hash_l2_.Swap(&other->tx_hash_l2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  block_hash_.Swap(&other->block_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogV2, index_)
      + sizeof(LogV2::index_)
      - PROTOBUF_FIELD_OFFSET(LogV2, block_number_)>(
          reinterpret_cast<char*>(&block_number_),
          reinterpret_cast<char*>(&other->block_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogV2::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace executor
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessBatchRequest_DbEntry_DoNotUse* Arena::CreateMaybeMessage< ::executor::v1::ProcessBatchRequest_DbEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessBatchRequest_DbEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse* Arena::CreateMaybeMessage< ::executor::v1::ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessBatchRequest_ContractsBytecodeEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessBatchRequest_StateOverrideEntry_DoNotUse* Arena::CreateMaybeMessage< ::executor::v1::ProcessBatchRequest_StateOverrideEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessBatchRequest_StateOverrideEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessBatchRequest* Arena::CreateMaybeMessage< ::executor::v1::ProcessBatchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessBatchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse* Arena::CreateMaybeMessage< ::executor::v1::ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessBatchResponse_ReadWriteAddressesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessBatchResponse* Arena::CreateMaybeMessage< ::executor::v1::ProcessBatchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessBatchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::GetFlushStatusResponse* Arena::CreateMaybeMessage< ::executor::v1::GetFlushStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::GetFlushStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::TraceConfig* Arena::CreateMaybeMessage< ::executor::v1::TraceConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::TraceConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::OverrideAccount_StateEntry_DoNotUse* Arena::CreateMaybeMessage< ::executor::v1::OverrideAccount_StateEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::OverrideAccount_StateEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::OverrideAccount_StateDiffEntry_DoNotUse* Arena::CreateMaybeMessage< ::executor::v1::OverrideAccount_StateDiffEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::OverrideAccount_StateDiffEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::OverrideAccount* Arena::CreateMaybeMessage< ::executor::v1::OverrideAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::OverrideAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::InfoReadWrite* Arena::CreateMaybeMessage< ::executor::v1::InfoReadWrite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::InfoReadWrite >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::FullTrace* Arena::CreateMaybeMessage< ::executor::v1::FullTrace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::FullTrace >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::TransactionContext* Arena::CreateMaybeMessage< ::executor::v1::TransactionContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::TransactionContext >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::TransactionStep_StorageEntry_DoNotUse* Arena::CreateMaybeMessage< ::executor::v1::TransactionStep_StorageEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::TransactionStep_StorageEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::TransactionStep* Arena::CreateMaybeMessage< ::executor::v1::TransactionStep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::TransactionStep >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::Contract* Arena::CreateMaybeMessage< ::executor::v1::Contract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::Contract >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessTransactionResponse* Arena::CreateMaybeMessage< ::executor::v1::ProcessTransactionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessTransactionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::Log* Arena::CreateMaybeMessage< ::executor::v1::Log >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::Log >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse* Arena::CreateMaybeMessage< ::executor::v1::ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessBatchRequestV2_L1InfoTreeDataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessBatchRequestV2_DbEntry_DoNotUse* Arena::CreateMaybeMessage< ::executor::v1::ProcessBatchRequestV2_DbEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessBatchRequestV2_DbEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse* Arena::CreateMaybeMessage< ::executor::v1::ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessBatchRequestV2_ContractsBytecodeEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessBatchRequestV2_StateOverrideEntry_DoNotUse* Arena::CreateMaybeMessage< ::executor::v1::ProcessBatchRequestV2_StateOverrideEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessBatchRequestV2_StateOverrideEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessBatchRequestV2* Arena::CreateMaybeMessage< ::executor::v1::ProcessBatchRequestV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessBatchRequestV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessStatelessBatchRequestV2* Arena::CreateMaybeMessage< ::executor::v1::ProcessStatelessBatchRequestV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessStatelessBatchRequestV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::L1DataV2* Arena::CreateMaybeMessage< ::executor::v1::L1DataV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::L1DataV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::DebugV2* Arena::CreateMaybeMessage< ::executor::v1::DebugV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::DebugV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse* Arena::CreateMaybeMessage< ::executor::v1::ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessBatchResponseV2_ReadWriteAddressesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessBatchResponseV2* Arena::CreateMaybeMessage< ::executor::v1::ProcessBatchResponseV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessBatchResponseV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::TraceConfigV2* Arena::CreateMaybeMessage< ::executor::v1::TraceConfigV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::TraceConfigV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::OverrideAccountV2_StateEntry_DoNotUse* Arena::CreateMaybeMessage< ::executor::v1::OverrideAccountV2_StateEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::OverrideAccountV2_StateEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::OverrideAccountV2_StateDiffEntry_DoNotUse* Arena::CreateMaybeMessage< ::executor::v1::OverrideAccountV2_StateDiffEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::OverrideAccountV2_StateDiffEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::OverrideAccountV2* Arena::CreateMaybeMessage< ::executor::v1::OverrideAccountV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::OverrideAccountV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::InfoReadWriteV2* Arena::CreateMaybeMessage< ::executor::v1::InfoReadWriteV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::InfoReadWriteV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::FullTraceV2* Arena::CreateMaybeMessage< ::executor::v1::FullTraceV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::FullTraceV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::TransactionContextV2* Arena::CreateMaybeMessage< ::executor::v1::TransactionContextV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::TransactionContextV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::TransactionStepV2_StorageEntry_DoNotUse* Arena::CreateMaybeMessage< ::executor::v1::TransactionStepV2_StorageEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::TransactionStepV2_StorageEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::TransactionStepV2* Arena::CreateMaybeMessage< ::executor::v1::TransactionStepV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::TransactionStepV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ContractV2* Arena::CreateMaybeMessage< ::executor::v1::ContractV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ContractV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessBlockResponseV2* Arena::CreateMaybeMessage< ::executor::v1::ProcessBlockResponseV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessBlockResponseV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::ProcessTransactionResponseV2* Arena::CreateMaybeMessage< ::executor::v1::ProcessTransactionResponseV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::ProcessTransactionResponseV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::executor::v1::LogV2* Arena::CreateMaybeMessage< ::executor::v1::LogV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::executor::v1::LogV2 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
